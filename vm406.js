function Table(ret) {
  ret.set = function (i, func) {
    this[i] = func;
  };
  ret.get = function (i) {
    return this[i];
  };
  return ret;
}
var bufferView;
var base64ReverseLookup = new Uint8Array(123);
for (var i = 25; i >= 0; --i) {
  base64ReverseLookup[48 + i] = 52 + i;
  base64ReverseLookup[65 + i] = i;
  base64ReverseLookup[97 + i] = 26 + i;
}
base64ReverseLookup[43] = 62;
base64ReverseLookup[47] = 63;
function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
  var b1,
    b2,
    i = 0,
    j = offset,
    bLength = b64.length,
    end = offset + (bLength * 3 >> 2) - (b64[bLength - 2] == "=") - (b64[bLength - 1] == "=");
  for (; i < bLength; i += 4) {
    b1 = base64ReverseLookup[b64.charCodeAt(i + 1)];
    b2 = base64ReverseLookup[b64.charCodeAt(i + 2)];
    uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
    if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
    if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i + 3)];
  }
}
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "aW5maW5pdHkAZGV2aWNlTWVtb3J5AGhhcmR3YXJlQ29uY3VycmVuY3kAQWN1bmV0aXgAJXglcyUwMnglMDJ4ACUwMngleCUwMngALSsgICAwWDB4AC0wWCswWCAwWC0weCsweCAweAAleABCaW5nUHJldmlldwBBcHBsZWJvdABHb29nbGVib3QAWWFuZGV4Qm90AEFkc0JvdABZYW5kZXhNb2JpbGVCb3QATWljcm9BZEJvdABTTVRCb3QAdXNlckFnZW50AGZhY2Vib29rZXh0ZXJuYWxoaXQAbWF4VG91Y2hQb2ludHMAcGx1Z2lucwBQYXJhbGxlbHMAbWltZVR5cGVzACVjJXglcyVzJXMlcwB3ZWJkcml2ZXIAYmFya3Jvd2xlcgBTcGlkZXIAbmFuAHBsYXRmb3JtAGRvTm90VHJhY2sAaW5mAFZNd2FyZQAlMDJ4JWxsZABjb29raWVFbmFibGVkACVkLiVkLiVkLiVkAHVzZXJBZ2VudERhdGEAJTJYAE5BTgBJTkYAcXdlcnR5dWlvcGFzZGZnaGprbHp4Y3Zibm1RV0VSVFlVSU9QQVNERkdISktMWlhDVkJOTTAxMjM0NTY3ODkAbHR4NzEAZmlsZTovLy9hbmRyb2lkX2Fzc2V0LwBmaWxlOi8vL3Zhci9tb2JsaWUvAGZpbGU6Ly8vc3RvcmFnZS8AZmlsZTovLy9kYXRhLwBmaWxlOi8vLwBkVmtHaXVOcThUZmd0cEg5Sm5MRlF2NjVoWXpjYlBTc0VXcjRlRFJtSzJ5bDNqT29aWDdVTUIxYXdDeEkwQSsvAC4AKG51bGwp");
  base64DecodeToExistingUint8Array(bufferView, 1664, "MDEyMzQ1Njc4OWFiY2RlZmsEAAAoBQAAxwQAAM4FAAB3BAAAgAQAAIoEAAC2BAAAlAQAAKsEAACbBAAAHQUAACoE");
  base64DecodeToExistingUint8Array(bufferView, 1744, "6gQAADMFAAD8BAAAvQQAAHUFAAATBQAA2wQAABYEAAAJBAAAPAUAAFsFAAAAAAAAQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL2N8d3vya2/FMAFnK/7Xq3bKgsl9+llH8K3Uoq+cpHLAt/2TJjY/98w0peXxcdgxFQTHI8MYlgWaBxKA4usnsnUJgywaG25aoFI71rMp4y+EU9EA7SD8sVtqy745SkxYz9DvqvtDTTOFRfkCf1A8n6hRo0CPkp049by22iEQ//PSzQwT7F+XRBfEp349ZF0Zc2CBT9wiKpCIRu64FN5eC9vgMjoKSQYkXMLTrGKRleR558g3bY3VTqlsVvTqZXquCLp4JS4cprTG6N10H0u9i4pwPrVmSAP2DmE1V7mGwR2e4fiYEWnZjpSbHofpzlUo34yhiQ2/5kJoQZktD7BUuxZSCWrVMDalOL9Ao56B89f7fOM5gpsv/4c0jkNExN7py1R7lDKmwiM97kyVC0L6w04ILqFmKNkksnZboklti9Elcvj2ZIZomBbUpFzMXWW2kmxwSFD97bnaXhVGV6eNnYSQ2KsAjLzTCvfkWAW4s0UG0Cwej8o/DwLBr70DAROKazqREUFPZ9zql/LPzvC05nOWrHQi5601heL5N+gcdd9uR/EacR0pxYlvt2IOqhi+G/xWPkvG0nkgmtvA/njNWvQf3agziAfHMbESEFkngOxfYFF/qRm1Sg0t5Xqfk8mc76DgO02uKvWwyOu7PINTmWEXKwR+unfWJuFpFGNVIQx9GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk=");
  base64DecodeToExistingUint8Array(bufferView, 2449, "DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO");
  base64DecodeToExistingUint8Array(bufferView, 2507, "DA==");
  base64DecodeToExistingUint8Array(bufferView, 2519, "EwAAAAATAAAAAAkMAAAAAAAMAAAM");
  base64DecodeToExistingUint8Array(bufferView, 2565, "EA==");
  base64DecodeToExistingUint8Array(bufferView, 2577, "DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
  base64DecodeToExistingUint8Array(bufferView, 2623, "Eg==");
  base64DecodeToExistingUint8Array(bufferView, 2635, "EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
  base64DecodeToExistingUint8Array(bufferView, 2690, "GgAAABoaGgAAAAAAAAk=");
  base64DecodeToExistingUint8Array(bufferView, 2739, "FA==");
  base64DecodeToExistingUint8Array(bufferView, 2751, "FwAAAAAXAAAAAAkUAAAAAAAUAAAU");
  base64DecodeToExistingUint8Array(bufferView, 2797, "Fg==");
  base64DecodeToExistingUint8Array(bufferView, 2809, "FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAAAAAAAIAAMADAADABAAAwAUAAMAGAADABwAAwAgAAMAJAADACgAAwAsAAMAMAADADQAAwA4AAMAPAADAEAAAwBEAAMASAADAEwAAwBQAAMAVAADAFgAAwBcAAMAYAADAGQAAwBoAAMAbAADAHAAAwB0AAMAeAADAHwAAwAAAALMBAADDAgAAwwMAAMMEAADDBQAAwwYAAMMHAADDCAAAwwkAAMMKAADDCwAAwwwAAMMNAADTDgAAww8AAMMAAAy7AQAMwwIADMMDAAzDBAAM2w==");
  base64DecodeToExistingUint8Array(bufferView, 3408, "gA==");
  base64DecodeToExistingUint8Array(bufferView, 3472, "eKRq11a3x+jbcCAk7s69wa8PfPUqxodHE0YwqAGVRv3YmIBpr/dEi7Fb//++11yJIhGQa5NxmP2OQ3mmIQi0SWIlHvZAs0DAUVpeJqrHtuldEC/WUxREAoHmodjI+9Pn5s3hIdYHN8OHDdX07RRaRQXp46n4o+/82QJvZ4pMKo1COfr/gfZxhyJhnW0MOOX9ROq+pKnP3ktgS7v2cLy/vsZ+myj6J6HqhTDv1AUdiAQ50NTZ5Znb5vh8oh9lVqzERCIp9Jf/KkOnI5SrOaCT/MNZW2WSzAyPffTv/9FdhIVPfqhv4OYs/hRDAaOhEQhOgn5T9zXyOr270tcqkdOG6w==");
  base64DecodeToExistingUint8Array(bufferView, 4496, "cBZQ");
}
var scratchBuffer = new ArrayBuffer(16);
var i32ScratchView = new Int32Array(scratchBuffer);
var f32ScratchView = new Float32Array(scratchBuffer);
var f64ScratchView = new Float64Array(scratchBuffer);
function wasm2js_scratch_load_i32(index) {
  return i32ScratchView[index];
}
function wasm2js_scratch_store_i32(index, value) {
  i32ScratchView[index] = value;
}
function wasm2js_scratch_load_f64() {
  return f64ScratchView[0];
}
function wasm2js_scratch_store_f64(value) {
  f64ScratchView[0] = value;
}
function wasm2js_scratch_store_f32(value) {
  f32ScratchView[2] = value;
}
function asmFunc(imports) {
  var buffer = new ArrayBuffer(16777216);
  var HEAP8 = new Int8Array(buffer);
  var HEAP16 = new Int16Array(buffer);
  var HEAP32 = new Int32Array(buffer);
  var HEAPU8 = new Uint8Array(buffer);
  var HEAPU16 = new Uint16Array(buffer);
  var HEAPU32 = new Uint32Array(buffer);
  var HEAPF32 = new Float32Array(buffer);
  var HEAPF64 = new Float64Array(buffer);
  var Math_imul = Math.imul;
  var Math_fround = Math.fround;
  var Math_abs = Math.abs;
  var Math_clz32 = Math.clz32;
  var Math_min = Math.min;
  var Math_max = Math.max;
  var Math_floor = Math.floor;
  var Math_ceil = Math.ceil;
  var Math_trunc = Math.trunc;
  var Math_sqrt = Math.sqrt;
  var a = imports.a;
  var fimport$0 = a.a;
  var fimport$1 = a.b;
  var fimport$2 = a.c;
  var fimport$3 = a.d;
  var fimport$4 = a.e;
  var fimport$5 = a.f;
  var fimport$6 = a.g;
  var fimport$7 = a.h;
  var fimport$8 = a.i;
  var fimport$9 = a.j;
  var fimport$10 = a.k;
  var fimport$11 = a.l;
  var fimport$12 = a.m;
  var fimport$13 = a.n;
  var fimport$14 = a.o;
  var fimport$15 = a.p;
  var fimport$16 = a.q;
  var fimport$17 = a.r;
  var fimport$18 = a.s;
  var fimport$19 = a.t;
  var fimport$20 = a.u;
  var global$0 = 5248624;
  var __wasm_intrinsics_temp_i64 = 0;
  var __wasm_intrinsics_temp_i64$hi = 0;
  var i64toi32_i32$HIGH_BITS = 0;
  function $0($0_1) {
    $0_1 = $0_1 | 0;
    var i64toi32_i32$1 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      $1_1 = 0,
      $2_1 = 0,
      $5$hi = 0,
      $4$hi = 0,
      $4_1 = 0,
      $5_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $31_1 = 0,
      $3_1 = 0,
      $32_1 = 0,
      $33_1 = 0,
      $34_1 = 0,
      $9_1 = 0,
      $10_1 = 0,
      $10$hi = 0,
      $12_1 = 0,
      $12$hi = 0,
      $20_1 = 0,
      $20$hi = 0,
      $52_1 = 0,
      $57_1 = 0,
      $57$hi = 0,
      $76 = 0,
      $76$hi = 0,
      $84 = 0,
      $91 = 0,
      $91$hi = 0;
    block1: {
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      $9_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$1;
      $10_1 = $4_1;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$2;
      $12$hi = i64toi32_i32$1;
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      i64toi32_i32$2 = $1_1 - $2_1 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$0 = $20_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $5_1 = i64toi32_i32$4;
      $5$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
        $29_1 = 1;
      } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0) {
            $30_1 = 0;
          } else {
            $30_1 = 1;
          }
          $31_1 = $30_1;
        } else {
          $31_1 = 0;
        }
        $29_1 = $31_1;
      }
      if (!($9_1 & $29_1 | 0)) {
        $2_1 = global$0 - 16 | 0;
        global$0 = $2_1;
        $1_1 = -1;
        block: {
          if ($51($0_1 | 0) | 0) {
            break block;
          }
          if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
            break block;
          }
          $1_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
        }
        global$0 = $2_1 + 16 | 0;
        $3_1 = $1_1;
        if (($1_1 | 0) >= (0 | 0)) {
          break block1;
        }
        $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      }
      i64toi32_i32$5 = $0_1;
      i64toi32_i32$1 = -1;
      HEAP32[($0_1 + 112 | 0) >> 2] = -1;
      HEAP32[($0_1 + 116 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
      $52_1 = $0_1;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$5 = $2_1 - $1_1 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $57_1 = i64toi32_i32$5;
      $57$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$5 = $57$hi;
      i64toi32_i32$3 = $57_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
      }
      i64toi32_i32$0 = $52_1;
      HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$4;
      return -1 | 0;
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
    }
    $5_1 = i64toi32_i32$5;
    $5$hi = i64toi32_i32$2;
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    block2: {
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$1;
      if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
        break block2;
      }
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      i64toi32_i32$5 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$0;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $2_1 - $1_1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $76 = i64toi32_i32$4;
      $76$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $76$hi;
      i64toi32_i32$3 = $76;
      if ((i64toi32_i32$5 | 0) > (i64toi32_i32$4 | 0)) {
        $32_1 = 1;
      } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            $33_1 = 0;
          } else {
            $33_1 = 1;
          }
          $34_1 = $33_1;
        } else {
          $34_1 = 0;
        }
        $32_1 = $34_1;
      }
      if ($32_1) {
        break block2;
      }
      i64toi32_i32$1 = $4$hi;
      $2_1 = $1_1 + $4_1 | 0;
    }
    HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
    $84 = $0_1;
    i64toi32_i32$1 = $5$hi;
    $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    i64toi32_i32$5 = $0_1 - $1_1 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $91 = i64toi32_i32$5;
    $91$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = $91$hi;
    i64toi32_i32$4 = $91;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
    }
    i64toi32_i32$3 = $84;
    HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
      HEAP8[($1_1 - 1 | 0) >> 0] = $3_1;
    }
    return $3_1 | 0;
  }
  function $1($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$2 = 0,
      $11$hi = 0,
      $10$hi = 0,
      $11_1 = 0,
      $6_1 = 0,
      $10_1 = 0,
      $5_1 = 0,
      $12$hi = 0,
      $13$hi = 0,
      $13_1 = 0,
      $12_1 = 0,
      $16$hi = 0,
      $19$hi = 0,
      $7_1 = 0,
      $15$hi = 0,
      $17$hi = 0,
      $14_1 = 0,
      $14$hi = 0,
      $15_1 = 0,
      $17_1 = 0,
      $18_1 = 0,
      $18$hi = 0,
      $16_1 = 0,
      $19_1 = 0,
      $20$hi = 0,
      $8_1 = 0,
      $21$hi = 0,
      $22$hi = 0,
      $23$hi = 0,
      $24$hi = 0,
      $445$hi = 0,
      $230 = 0,
      $231 = 0,
      $232 = 0,
      $9_1 = 0,
      $233 = 0,
      $235 = 0,
      $237 = 0,
      $238 = 0,
      $239 = 0,
      $240 = 0,
      $241 = 0,
      $21_1 = 0,
      $243 = 0,
      $244 = 0,
      $20_1 = 0,
      $245 = 0,
      $246 = 0,
      $22_1 = 0,
      $248 = 0,
      $249 = 0,
      $24_1 = 0,
      $250 = 0,
      $251 = 0,
      $252 = 0,
      $253 = 0,
      $254 = 0,
      $255 = 0,
      $256 = 0,
      $257 = 0,
      $258 = 0,
      $259 = 0,
      $260 = 0,
      $261 = 0,
      $445 = 0,
      $262 = 0,
      $263 = 0,
      $264 = 0,
      $265 = 0,
      $53_1 = 0,
      $57_1 = 0,
      $65_1 = 0,
      $69_1 = 0,
      $79 = 0,
      $79$hi = 0,
      $90 = 0,
      $90$hi = 0,
      $111 = 0,
      $112 = 0,
      $112$hi = 0,
      $113 = 0,
      $113$hi = 0,
      $120$hi = 0,
      $123$hi = 0,
      $139 = 0,
      $140 = 0,
      $140$hi = 0,
      $141 = 0,
      $141$hi = 0,
      $148$hi = 0,
      $151$hi = 0,
      $168 = 0,
      $168$hi = 0,
      $173 = 0,
      $173$hi = 0,
      $180 = 0,
      $180$hi = 0,
      $187 = 0,
      $187$hi = 0,
      $191 = 0,
      $192 = 0,
      $192$hi = 0,
      $201 = 0,
      $201$hi = 0,
      $203 = 0,
      $203$hi = 0,
      $206 = 0,
      $206$hi = 0,
      $208$hi = 0,
      $213 = 0,
      $213$hi = 0,
      $215 = 0,
      $215$hi = 0,
      $218 = 0,
      $220 = 0,
      $220$hi = 0,
      $222$hi = 0,
      $223 = 0,
      $223$hi = 0,
      $225 = 0,
      $225$hi = 0,
      $234 = 0,
      $234$hi = 0,
      $236 = 0,
      $236$hi = 0,
      $242 = 0,
      $242$hi = 0,
      $247 = 0,
      $247$hi = 0,
      $250$hi = 0,
      $23_1 = 0,
      $266 = 0,
      $266$hi = 0,
      $271 = 0,
      $271$hi = 0,
      $272 = 0,
      $272$hi = 0,
      $276 = 0,
      $276$hi = 0,
      $279 = 0,
      $280$hi = 0,
      $281$hi = 0,
      $284 = 0,
      $284$hi = 0,
      $285 = 0,
      $285$hi = 0,
      $286 = 0,
      $286$hi = 0,
      $287 = 0,
      $287$hi = 0,
      $290 = 0,
      $291$hi = 0,
      $294 = 0,
      $295$hi = 0,
      $296$hi = 0,
      $299 = 0,
      $300$hi = 0,
      $301 = 0,
      $301$hi = 0,
      $308 = 0,
      $308$hi = 0,
      $314 = 0,
      $314$hi = 0,
      $316$hi = 0,
      $317 = 0,
      $317$hi = 0,
      $318 = 0,
      $318$hi = 0,
      $319 = 0,
      $319$hi = 0,
      $321$hi = 0,
      $325 = 0,
      $326$hi = 0,
      $327 = 0,
      $327$hi = 0,
      $328 = 0,
      $328$hi = 0,
      $329 = 0,
      $329$hi = 0,
      $332 = 0,
      $333 = 0,
      $333$hi = 0,
      $336 = 0,
      $337$hi = 0,
      $340 = 0,
      $341$hi = 0,
      $342$hi = 0,
      $344 = 0,
      $344$hi = 0,
      $346$hi = 0,
      $347 = 0,
      $347$hi = 0,
      $350 = 0,
      $351$hi = 0,
      $352 = 0,
      $352$hi = 0,
      $353 = 0,
      $353$hi = 0,
      $354 = 0,
      $354$hi = 0,
      $357 = 0,
      $358$hi = 0,
      $361 = 0,
      $362$hi = 0,
      $363$hi = 0,
      $366 = 0,
      $367$hi = 0,
      $377 = 0,
      $377$hi = 0,
      $379$hi = 0,
      $382 = 0,
      $382$hi = 0,
      $384$hi = 0,
      $388 = 0,
      $388$hi = 0,
      $390$hi = 0,
      $424 = 0,
      $424$hi = 0,
      $426 = 0,
      $426$hi = 0,
      $428 = 0,
      $429$hi = 0,
      $431 = 0,
      $431$hi = 0,
      $433 = 0,
      $433$hi = 0,
      $434 = 0,
      $434$hi = 0,
      $437 = 0,
      $437$hi = 0,
      $439 = 0,
      $439$hi = 0,
      $447 = 0,
      $447$hi = 0,
      $450$hi = 0,
      $456 = 0,
      $463 = 0,
      $463$hi = 0,
      $468 = 0,
      $469$hi = 0,
      $473 = 0,
      $473$hi = 0,
      $477 = 0,
      $477$hi = 0,
      $480 = 0,
      $480$hi = 0,
      $484 = 0,
      $485$hi = 0;
    $5_1 = global$0 - 96 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $10_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $230 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $230 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $14_1 = $230;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $231 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $231 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $231 & 32767 | 0;
    block1: {
      block: {
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 48;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $232 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $232 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        $9_1 = $232 & 32767 | 0;
        if (($9_1 - 32767 | 0) >>> 0 >= -32766 >>> 0) {
          if (($7_1 - 32767 | 0) >>> 0 > -32767 >>> 0) {
            break block;
          }
        }
        i64toi32_i32$1 = $1$hi;
        $53_1 = !($1_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$2 = 2147483647;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $11_1;
        i64toi32_i32$0 = 2147418112;
        i64toi32_i32$3 = 0;
        $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = 2147418112;
        i64toi32_i32$0 = 0;
        if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1)) {
          i64toi32_i32$3 = $2$hi;
          i64toi32_i32$0 = $2_1;
          i64toi32_i32$1 = 32768;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
          $10_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
          $10$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $3$hi;
        $65_1 = !($3_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = 2147483647;
        i64toi32_i32$2 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
        $2$hi = i64toi32_i32$0;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$2 = 0;
        $69_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$0 = 2147418112;
        i64toi32_i32$3 = 0;
        if (!((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $65_1 : $69_1)) {
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$3 = $4_1;
          i64toi32_i32$1 = 32768;
          i64toi32_i32$0 = 0;
          i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
          $10_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
          $10$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $3$hi;
          $1_1 = $3_1;
          $1$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$2 = $11_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
        $79 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $79$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$2 = $79$hi;
        i64toi32_i32$0 = $79;
        i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
        if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
          i64toi32_i32$2 = $2$hi;
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$2 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
          if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$1 | 0)) {
            i64toi32_i32$1 = 2147450880;
            $10_1 = 0;
            $10$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            $1_1 = 0;
            $1$hi = i64toi32_i32$1;
            break block1;
          }
          i64toi32_i32$1 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$3 = 2147418112;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $10$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$3;
          break block1;
        }
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$2 = 2147418112;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
        $90 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
        $90$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$1 = $90$hi;
        i64toi32_i32$0 = $90;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$1 | 0)) {
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$2 = $1_1;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$0 = $11_1;
          i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $2$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $2$hi;
          if (!($2_1 | i64toi32_i32$3 | 0)) {
            i64toi32_i32$3 = 2147450880;
            $10_1 = 0;
            $10$hi = i64toi32_i32$3;
            break block1;
          }
          i64toi32_i32$3 = $10$hi;
          i64toi32_i32$1 = $10_1;
          i64toi32_i32$2 = 2147418112;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
          $10_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
          $10$hi = i64toi32_i32$2;
          break block1;
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$1 | 0)) {
          i64toi32_i32$1 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0 | i64toi32_i32$3 | 0)) {
          i64toi32_i32$3 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$3;
          break block1;
        }
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$1 = $11_1;
        i64toi32_i32$2 = 65535;
        i64toi32_i32$0 = -1;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
          $111 = $5_1 + 80 | 0;
          i64toi32_i32$1 = $1$hi;
          $112 = $1_1;
          $112$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $13$hi;
          $113 = $13_1;
          $113$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$1 = $13$hi;
          $6_1 = !($13_1 | i64toi32_i32$1 | 0);
          i64toi32_i32$4 = $6_1;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$3 = $13$hi;
          i64toi32_i32$2 = i64toi32_i32$4 ? $1_1 : $13_1;
          i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
          i64toi32_i32$3 = Math_clz32(i64toi32_i32$0);
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$3 | 0) == (32 | 0)) {
            $233 = Math_clz32(i64toi32_i32$2) + 32 | 0;
          } else {
            $233 = i64toi32_i32$3;
          }
          $120$hi = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          $123$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $120$hi;
          i64toi32_i32$2 = $233;
          i64toi32_i32$0 = $123$hi;
          i64toi32_i32$3 = $6_1 << 6 | 0;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
          }
          $6_1 = i64toi32_i32$1;
          i64toi32_i32$5 = $112$hi;
          i64toi32_i32$2 = $113$hi;
          $5($111 | 0, $112 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 - 15 | 0 | 0);
          $6_1 = 16 - i64toi32_i32$1 | 0;
          i64toi32_i32$4 = $5_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
          $13_1 = i64toi32_i32$2;
          $13$hi = i64toi32_i32$5;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $235 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
            $235 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
          }
          $14_1 = $235;
          $14$hi = i64toi32_i32$2;
          i64toi32_i32$5 = $5_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
          $1_1 = i64toi32_i32$2;
          $1$hi = i64toi32_i32$4;
        }
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$5 = $2_1;
        i64toi32_i32$2 = 65535;
        i64toi32_i32$3 = -1;
        if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
          break block;
        }
        $139 = $5_1 - -64 | 0;
        i64toi32_i32$5 = $3$hi;
        $140 = $3_1;
        $140$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $12$hi;
        $141 = $12_1;
        $141$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $12$hi;
        $8_1 = !($12_1 | i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $12_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
        i64toi32_i32$4 = Math_clz32(i64toi32_i32$3);
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$4 | 0) == (32 | 0)) {
          $237 = Math_clz32(i64toi32_i32$2) + 32 | 0;
        } else {
          $237 = i64toi32_i32$4;
        }
        $148$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $151$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $148$hi;
        i64toi32_i32$2 = $237;
        i64toi32_i32$3 = $151$hi;
        i64toi32_i32$4 = $8_1 << 6 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $8_1 = i64toi32_i32$5;
        i64toi32_i32$1 = $140$hi;
        i64toi32_i32$2 = $141$hi;
        $5($139 | 0, $140 | 0, i64toi32_i32$1 | 0, $141 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 - 15 | 0 | 0);
        $6_1 = ($6_1 - i64toi32_i32$5 | 0) + 16 | 0;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$2;
        $12$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
        $3_1 = i64toi32_i32$1;
        $3$hi = i64toi32_i32$2;
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 15;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        $238 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
        $238 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      }
      $11_1 = $238;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -32768;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $2$hi = i64toi32_i32$0;
      $168 = $2_1;
      $168$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $239 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $239 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $4_1 = $239;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $168$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($168 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      $173 = i64toi32_i32$1;
      $173$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $240 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
        $240 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $19_1 = $240;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $180 = i64toi32_i32$2;
      $180$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $173$hi;
      i64toi32_i32$1 = $173;
      i64toi32_i32$2 = $180$hi;
      i64toi32_i32$4 = $180;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $15_1 = i64toi32_i32$3;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $241 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
        $241 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $17_1 = $241;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $187 = i64toi32_i32$0;
      $187$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$0 = $187$hi;
      i64toi32_i32$4 = $187;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
      }
      $11_1 = i64toi32_i32$2;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      $191 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $192 = $191;
      $192$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $13_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $13$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $201 = i64toi32_i32$4;
      $201$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$1 = $21_1;
      i64toi32_i32$4 = $201$hi;
      i64toi32_i32$5 = $201;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
      }
      $17_1 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$2;
      $203 = i64toi32_i32$0;
      $203$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
        $243 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $243 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $18_1 = $243;
      $18$hi = i64toi32_i32$1;
      $206 = $18_1;
      $206$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 49;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $244 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $244 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $208$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $206$hi;
      i64toi32_i32$1 = $206;
      i64toi32_i32$2 = $208$hi;
      i64toi32_i32$5 = $244;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $3_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $3$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $213 = i64toi32_i32$3;
      $213$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $203$hi;
      i64toi32_i32$2 = $203;
      i64toi32_i32$3 = $213$hi;
      i64toi32_i32$5 = $213;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
      }
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$0;
      $215 = i64toi32_i32$4;
      $215$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $218 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $218;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        $245 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
        $245 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $220 = $245;
      $220$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $246 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $246 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $222$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $220$hi;
      i64toi32_i32$0 = $220;
      i64toi32_i32$1 = $222$hi;
      i64toi32_i32$2 = $246;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $223 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $223$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $215$hi;
      i64toi32_i32$5 = $215;
      i64toi32_i32$0 = $223$hi;
      i64toi32_i32$2 = $223;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
      }
      $15_1 = i64toi32_i32$3;
      $15$hi = i64toi32_i32$4;
      $225 = i64toi32_i32$3;
      $225$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $22_1 = i64toi32_i32$1;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $234 = i64toi32_i32$1;
      $234$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$4 = $22_1;
      i64toi32_i32$1 = $234$hi;
      i64toi32_i32$2 = $234;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
      }
      $14_1 = i64toi32_i32$0;
      $14$hi = i64toi32_i32$3;
      $236 = i64toi32_i32$0;
      $236$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$5 = $18_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $248 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $248 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$3 = $248;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -2147483648;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $2_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $242 = i64toi32_i32$3;
      $242$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $236$hi;
      i64toi32_i32$4 = $236;
      i64toi32_i32$3 = $242$hi;
      i64toi32_i32$2 = $242;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $247 = i64toi32_i32$4;
      $247$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $247$hi;
      i64toi32_i32$2 = $247;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
      }
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $249 = 0;
      } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $249 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $250$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $225$hi;
      i64toi32_i32$1 = $225;
      i64toi32_i32$0 = $250$hi;
      i64toi32_i32$2 = $249;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
      }
      $23_1 = i64toi32_i32$4;
      $23$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $192$hi;
      i64toi32_i32$5 = $192;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
      }
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$4;
      $6_1 = (($7_1 + $9_1 | 0) + $6_1 | 0) - 16383 | 0;
      block2: {
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$5 = $4$hi;
        i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$5;
        $24$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $266 = i64toi32_i32$5;
        $266$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $24$hi;
        i64toi32_i32$3 = $24_1;
        i64toi32_i32$5 = $266$hi;
        i64toi32_i32$2 = $266;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $4_1 = i64toi32_i32$1;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $24$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$3 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$4 = 0;
        $271 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        $271$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$0;
        $272 = i64toi32_i32$1;
        $272$hi = i64toi32_i32$0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$4 = $13$hi;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $276 = i64toi32_i32$0;
        $276$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $276$hi;
        i64toi32_i32$3 = $276;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $272$hi;
        i64toi32_i32$4 = $272;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = i64toi32_i32$5;
        $279 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$4 = 0;
        $280$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $271$hi;
        i64toi32_i32$3 = $271;
        i64toi32_i32$1 = $280$hi;
        i64toi32_i32$2 = $279;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $281$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $284 = i64toi32_i32$3;
        $284$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $281$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$3 = $284$hi;
        i64toi32_i32$2 = $284;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $285 = i64toi32_i32$1;
        $285$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        $286 = $4_1;
        $286$hi = i64toi32_i32$0;
        $287 = $4_1;
        $287$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $21$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$5 = $17_1;
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$2 = $21_1;
        $290 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$5 = 0;
        $291$hi = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$5 = $20$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$2 = $17_1;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$4 = $20_1;
        $294 = i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $295$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $291$hi;
        i64toi32_i32$4 = $290;
        i64toi32_i32$5 = $295$hi;
        i64toi32_i32$0 = $294;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $296$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $287$hi;
        i64toi32_i32$2 = $287;
        i64toi32_i32$4 = $296$hi;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $286$hi;
        i64toi32_i32$1 = $286;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$0 = i64toi32_i32$5;
        $299 = i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $300$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $285$hi;
        i64toi32_i32$0 = $285;
        i64toi32_i32$3 = $300$hi;
        i64toi32_i32$2 = $299;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $301 = i64toi32_i32$4;
        $301$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $3_1 = i64toi32_i32$0;
        $3$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $308 = i64toi32_i32$0;
        $308$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = $308$hi;
        i64toi32_i32$2 = $308;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $2_1 = i64toi32_i32$3;
        $2$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$1 = 32;
        i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
          $250 = 0;
        } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
          $250 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
        }
        $314 = $250;
        $314$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$5 = $2_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 32;
        i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $251 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
        } else {
          i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
          $251 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
        }
        $316$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $314$hi;
        i64toi32_i32$4 = $314;
        i64toi32_i32$5 = $316$hi;
        i64toi32_i32$1 = $251;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        $317 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $301$hi;
        i64toi32_i32$2 = $301;
        i64toi32_i32$4 = $317$hi;
        i64toi32_i32$1 = $317;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $318 = i64toi32_i32$0;
        $318$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $4$hi;
        $319 = $4_1;
        $319$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$5 = $2_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 32;
        i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
          $252 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $252 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $321$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $319$hi;
        i64toi32_i32$3 = $319;
        i64toi32_i32$5 = $321$hi;
        i64toi32_i32$1 = $252;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$1 = $4_1;
        $325 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $326$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $318$hi;
        i64toi32_i32$1 = $318;
        i64toi32_i32$0 = $326$hi;
        i64toi32_i32$3 = $325;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $327 = i64toi32_i32$5;
        $327$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        $328 = $2_1;
        $328$hi = i64toi32_i32$4;
        $329 = $2_1;
        $329$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$2 = $16_1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$3 = $18_1;
        $332 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $333 = $332;
        $333$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$3 = $14_1;
        i64toi32_i32$4 = $22$hi;
        i64toi32_i32$1 = $22_1;
        $336 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $337$hi = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$1 = $14_1;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$4 = $16_1;
        $340 = i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $341$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $337$hi;
        i64toi32_i32$4 = $336;
        i64toi32_i32$3 = $341$hi;
        i64toi32_i32$2 = $340;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $342$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $333$hi;
        i64toi32_i32$1 = $333;
        i64toi32_i32$4 = $342$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
          $253 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $253 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $344 = $253;
        $344$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$0 = $18_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $254 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $254 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
        }
        $346$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $344$hi;
        i64toi32_i32$1 = $344;
        i64toi32_i32$0 = $346$hi;
        i64toi32_i32$2 = $254;
        i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
        $347 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        $347$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $329$hi;
        i64toi32_i32$5 = $329;
        i64toi32_i32$1 = $347$hi;
        i64toi32_i32$2 = $347;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $328$hi;
        i64toi32_i32$0 = $328;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        $350 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$0 = 0;
        $351$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $327$hi;
        i64toi32_i32$2 = $327;
        i64toi32_i32$3 = $351$hi;
        i64toi32_i32$5 = $350;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $352 = i64toi32_i32$1;
        $352$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        $353 = $2_1;
        $353$hi = i64toi32_i32$4;
        $354 = $2_1;
        $354$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$5 = $20_1;
        $357 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
        i64toi32_i32$0 = 0;
        $358$hi = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$0 = $23$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$5 = $15_1;
        i64toi32_i32$4 = $23$hi;
        i64toi32_i32$2 = $23_1;
        $361 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$5 = 0;
        $362$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $358$hi;
        i64toi32_i32$2 = $357;
        i64toi32_i32$0 = $362$hi;
        i64toi32_i32$4 = $361;
        i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $363$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $354$hi;
        i64toi32_i32$5 = $354;
        i64toi32_i32$2 = $363$hi;
        i64toi32_i32$4 = i64toi32_i32$3;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $353$hi;
        i64toi32_i32$1 = $353;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        $366 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $367$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $352$hi;
        i64toi32_i32$4 = $352;
        i64toi32_i32$3 = $367$hi;
        i64toi32_i32$5 = $366;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $4_1 = i64toi32_i32$2;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$4 = 65536;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0) {
          $6_1 = $6_1 + 1 | 0;
          break block2;
        }
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$1 = 63;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = 0;
          $255 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
          $255 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $3_1 = $255;
        $3$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = 1;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
          $256 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $256 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        }
        $377 = $256;
        $377$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$4 = $2_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 63;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $257 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
          $257 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
        }
        $379$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $377$hi;
        i64toi32_i32$5 = $377;
        i64toi32_i32$4 = $379$hi;
        i64toi32_i32$1 = $257;
        i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
        $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
        $4$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = 1;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
          $258 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $258 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        }
        $382 = $258;
        $382$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 63;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $259 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
          $259 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
        }
        $384$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $382$hi;
        i64toi32_i32$5 = $382;
        i64toi32_i32$4 = $384$hi;
        i64toi32_i32$1 = $259;
        i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
        $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
        $2$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = 1;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
          $260 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $260 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        }
        $11_1 = $260;
        $11$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        $388 = $3_1;
        $388$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 1;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
          $261 = 0;
        } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $261 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
        }
        $390$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $388$hi;
        i64toi32_i32$5 = $388;
        i64toi32_i32$4 = $390$hi;
        i64toi32_i32$1 = $261;
        i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
        $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
        $1$hi = i64toi32_i32$4;
      }
      if (($6_1 | 0) >= (32767 | 0)) {
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$5 = 2147418112;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
        $10_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
        $10$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $1_1 = 0;
        $1$hi = i64toi32_i32$5;
        break block1;
      }
      block3: {
        if (($6_1 | 0) <= (0 | 0)) {
          $7_1 = 1 - $6_1 | 0;
          if ($7_1 >>> 0 >= 128 >>> 0) {
            i64toi32_i32$5 = 0;
            $1_1 = 0;
            $1$hi = i64toi32_i32$5;
            break block1;
          }
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$5 = $1$hi;
          $6_1 = $6_1 + 127 | 0;
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$0 = $1$hi;
          $5($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0);
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$5 = $4$hi;
          $5($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$0 = $1$hi;
          $20($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$5 = $4$hi;
          $20($5_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
          i64toi32_i32$4 = $5_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
          $424 = i64toi32_i32$5;
          $424$hi = i64toi32_i32$0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 56 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 60 | 0) >> 2] | 0;
          $426 = i64toi32_i32$0;
          $426$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $424$hi;
          i64toi32_i32$4 = $424;
          i64toi32_i32$0 = $426$hi;
          i64toi32_i32$1 = $426;
          i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
          i64toi32_i32$4 = 0;
          i64toi32_i32$1 = 0;
          $428 = (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
          i64toi32_i32$5 = 0;
          $429$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $5_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
          $431 = i64toi32_i32$5;
          $431$hi = i64toi32_i32$0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
          $433 = i64toi32_i32$0;
          $433$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $431$hi;
          i64toi32_i32$1 = $431;
          i64toi32_i32$0 = $433$hi;
          i64toi32_i32$4 = $433;
          i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
          $434 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
          $434$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $429$hi;
          i64toi32_i32$5 = $428;
          i64toi32_i32$1 = $434$hi;
          i64toi32_i32$4 = $434;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          $11_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $5_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
          $437 = i64toi32_i32$1;
          $437$hi = i64toi32_i32$5;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
          $439 = i64toi32_i32$5;
          $439$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $437$hi;
          i64toi32_i32$0 = $437;
          i64toi32_i32$5 = $439$hi;
          i64toi32_i32$4 = $439;
          i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
          $1_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
          $1$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $5_1;
          i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $2_1 = i64toi32_i32$5;
          $2$hi = i64toi32_i32$0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
          $445 = i64toi32_i32$0;
          $445$hi = i64toi32_i32$5;
          break block3;
        }
        i64toi32_i32$5 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$0 = 65535;
        i64toi32_i32$4 = -1;
        i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
        $447 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
        $447$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$4 = 48;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
          $262 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
          $262 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        }
        $450$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $447$hi;
        i64toi32_i32$0 = $447;
        i64toi32_i32$5 = $450$hi;
        i64toi32_i32$4 = $262;
        i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
        $445 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
        $445$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $445$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $445$hi;
      i64toi32_i32$1 = $445;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$4 = $10_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $10_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      $456 = !($11_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
        $263 = 1;
      } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
            $264 = 0;
          } else {
            $264 = 1;
          }
          $265 = $264;
        } else {
          $265 = 0;
        }
        $263 = $265;
      }
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$0 = -2147483648;
      i64toi32_i32$1 = 0;
      if (!((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0 ? $456 : $263)) {
        i64toi32_i32$4 = $10$hi;
        $463 = $10_1;
        $463$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $1_1 = i64toi32_i32$3;
        $1$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$4 = i64toi32_i32$3;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$0 = $2_1;
        $468 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$4 = 0;
        $469$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $463$hi;
        i64toi32_i32$0 = $463;
        i64toi32_i32$2 = $469$hi;
        i64toi32_i32$1 = $468;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$3;
        break block1;
      }
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$0 = -2147483648;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
      $473 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
      $473$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$1 = $473;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
        i64toi32_i32$0 = $2$hi;
        $1_1 = $2_1;
        $1$hi = i64toi32_i32$0;
        break block1;
      }
      i64toi32_i32$0 = $10$hi;
      $477 = $10_1;
      $477$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $480 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $480$hi = i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $480$hi;
      i64toi32_i32$3 = $480;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      $484 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $485$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $477$hi;
      i64toi32_i32$3 = $477;
      i64toi32_i32$5 = $485$hi;
      i64toi32_i32$0 = $484;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
      }
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $0_1;
    HEAP32[i64toi32_i32$3 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $10_1;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$2;
    global$0 = $5_1 + 96 | 0;
  }
  function $2($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      $2_1 = 0,
      $3_1 = 0;
    block: {
      $1_1 = $0_1;
      if ($1_1 & 3 | 0) {
        label: while (1) {
          if (!(HEAPU8[$1_1 >> 0] | 0)) {
            break block;
          }
          $1_1 = $1_1 + 1 | 0;
          if ($1_1 & 3 | 0) {
            continue label;
          }
          break label;
        }
      }
      label1: while (1) {
        $2_1 = $1_1;
        $1_1 = $1_1 + 4 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if (!((($3_1 ^ -1 | 0) & ($3_1 - 16843009 | 0) | 0) & -2139062144 | 0)) {
          continue label1;
        }
        break label1;
      }
      label2: while (1) {
        $1_1 = $2_1;
        $2_1 = $1_1 + 1 | 0;
        if (HEAPU8[$1_1 >> 0] | 0) {
          continue label2;
        }
        break label2;
      }
    }
    return $1_1 - $0_1 | 0 | 0;
  }
  function $3($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $23_1 = 0,
      $11_1 = 0;
    if (!((HEAPU8[$0_1 >> 0] | 0) & 32 | 0)) {
      block1: {
        $3_1 = $1_1;
        block: {
          $11_1 = $2_1;
          $1_1 = $0_1;
          $0_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
          if ($0_1) {
            $23_1 = $0_1;
          } else {
            if ($59($1_1 | 0) | 0) {
              break block;
            }
            $23_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
          }
          $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          if ($11_1 >>> 0 > ($23_1 - $5_1 | 0) >>> 0) {
            FUNCTION_TABLE[HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0]($1_1, $3_1, $2_1) | 0;
            break block1;
          }
          block2: {
            if ((HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
              break block2;
            }
            $0_1 = $2_1;
            label: while (1) {
              $4_1 = $0_1;
              if (!$0_1) {
                break block2;
              }
              $0_1 = $0_1 - 1 | 0;
              if ((HEAPU8[($3_1 + $0_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
                continue label;
              }
              break label;
            }
            if ((FUNCTION_TABLE[HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0]($1_1, $3_1, $4_1) | 0) >>> 0 < $4_1 >>> 0) {
              break block;
            }
            $3_1 = $3_1 + $4_1 | 0;
            $2_1 = $2_1 - $4_1 | 0;
            $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          }
          $7($5_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
          HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + $2_1 | 0;
        }
      }
    }
  }
  function $4($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      $46_1 = 0,
      $48_1 = 0,
      $50_1 = 0,
      $51_1 = 0,
      $53_1 = 0,
      $54_1 = 0,
      $6_1 = 0,
      $9_1 = 0,
      $9$hi = 0,
      $12_1 = 0,
      $12$hi = 0,
      $13_1 = 0,
      $13$hi = 0,
      $16_1 = 0,
      $16$hi = 0,
      $20_1 = 0,
      $20$hi = 0,
      $21_1 = 0,
      $21$hi = 0,
      $5_1 = 0,
      $5$hi = 0,
      $30$hi = 0,
      $33_1 = 0,
      $33$hi = 0,
      $36$hi = 0,
      $37_1 = 0,
      $37$hi = 0,
      $40_1 = 0,
      $40$hi = 0,
      $42_1 = 0,
      $42$hi = 0,
      $45$hi = 0,
      $47_1 = 0,
      $49_1 = 0,
      $49$hi = 0,
      $51$hi = 0,
      $52_1 = 0;
    $6_1 = $0_1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
    }
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    $2_1 = $46_1;
    $2$hi = i64toi32_i32$2;
    $16_1 = $2_1;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $48_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $20_1 = i64toi32_i32$5;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$3 = $20_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
    }
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $50_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
    } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $50_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $30$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $33_1 = i64toi32_i32$2;
    $33$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $30$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$2 = $33$hi;
    i64toi32_i32$3 = $33_1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
    }
    $3_1 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $51_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      $51_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $36$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = $21_1;
    i64toi32_i32$4 = $36$hi;
    i64toi32_i32$3 = $51_1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
    }
    $37_1 = i64toi32_i32$2;
    $37$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $40_1 = i64toi32_i32$1;
    $40$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $42_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $42$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $40$hi;
    i64toi32_i32$5 = $40_1;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$3 = $42_1;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $45$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $37$hi;
    i64toi32_i32$2 = $37_1;
    i64toi32_i32$1 = $45$hi;
    i64toi32_i32$3 = $53_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
    }
    i64toi32_i32$2 = $6_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
    $47_1 = $0_1;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $49_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $49$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $54_1 = 0;
    } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $54_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $51$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $49$hi;
    i64toi32_i32$2 = $49_1;
    i64toi32_i32$4 = $51$hi;
    i64toi32_i32$3 = $54_1;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $47_1;
    HEAP32[i64toi32_i32$2 >> 2] = $52_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
  }
  function $5($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      $4$hi = 0,
      $19_1 = 0,
      $20_1 = 0,
      $21_1 = 0,
      $22_1 = 0,
      $10$hi = 0,
      $4_1 = 0,
      $18_1 = 0,
      $18$hi = 0,
      $22$hi = 0,
      $23$hi = 0;
    block: {
      if ($3_1 & 64 | 0) {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = 0;
        $10$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$3 = $3_1 + -64 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $19_1 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $19_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $2_1 = $19_1;
        $2$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $1_1 = 0;
        $1$hi = i64toi32_i32$1;
        break block;
      }
      if (!$3_1) {
        break block;
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = 0;
      $4_1 = $3_1;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $20_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $18_1 = $20_1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = 0;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$3 = 64 - $3_1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $23$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$3 = $21_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $22_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $1_1 = $22_1;
      $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  function $6($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0,
      $16_1 = 0;
    $5_1 = global$0 - 256 | 0;
    global$0 = $5_1;
    block: {
      if (($2_1 | 0) <= ($3_1 | 0)) {
        break block;
      }
      if ($4_1 & 73728 | 0) {
        break block;
      }
      $16_1 = $1_1 & 255 | 0;
      $3_1 = $2_1 - $3_1 | 0;
      $1_1 = $3_1 >>> 0 < 256 >>> 0;
      $12($5_1 | 0, $16_1 | 0, ($1_1 ? $3_1 : 256) | 0) | 0;
      if (!$1_1) {
        label: while (1) {
          $3($0_1 | 0, $5_1 | 0, 256 | 0);
          $3_1 = $3_1 - 256 | 0;
          if ($3_1 >>> 0 > 255 >>> 0) {
            continue label;
          }
          break label;
        }
      }
      $3($0_1 | 0, $5_1 | 0, $3_1 | 0);
    }
    global$0 = $5_1 + 256 | 0;
  }
  function $7($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0,
      $3_1 = 0,
      $5_1 = 0;
    if ($2_1 >>> 0 >= 512 >>> 0) {
      fimport$11($0_1 | 0, $1_1 | 0, $2_1 | 0);
      return $0_1 | 0;
    }
    $3_1 = $0_1 + $2_1 | 0;
    block2: {
      if (!(($0_1 ^ $1_1 | 0) & 3 | 0)) {
        block: {
          if (!($0_1 & 3 | 0)) {
            $2_1 = $0_1;
            break block;
          }
          if (!$2_1) {
            $2_1 = $0_1;
            break block;
          }
          $2_1 = $0_1;
          label: while (1) {
            HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
            $1_1 = $1_1 + 1 | 0;
            $2_1 = $2_1 + 1 | 0;
            if (!($2_1 & 3 | 0)) {
              break block;
            }
            if ($2_1 >>> 0 < $3_1 >>> 0) {
              continue label;
            }
            break label;
          }
        }
        block1: {
          $4_1 = $3_1 & -4 | 0;
          if ($4_1 >>> 0 < 64 >>> 0) {
            break block1;
          }
          $5_1 = $4_1 + -64 | 0;
          if ($2_1 >>> 0 > $5_1 >>> 0) {
            break block1;
          }
          label1: while (1) {
            HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
            HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
            HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
            HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
            HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
            HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
            HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
            HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
            HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
            HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
            HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
            HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
            HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
            HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
            $1_1 = $1_1 - -64 | 0;
            $2_1 = $2_1 - -64 | 0;
            if ($2_1 >>> 0 <= $5_1 >>> 0) {
              continue label1;
            }
            break label1;
          }
        }
        if ($2_1 >>> 0 >= $4_1 >>> 0) {
          break block2;
        }
        label2: while (1) {
          HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
          $1_1 = $1_1 + 4 | 0;
          $2_1 = $2_1 + 4 | 0;
          if ($2_1 >>> 0 < $4_1 >>> 0) {
            continue label2;
          }
          break label2;
        }
        break block2;
      }
      if ($3_1 >>> 0 < 4 >>> 0) {
        $2_1 = $0_1;
        break block2;
      }
      $4_1 = $3_1 - 4 | 0;
      if ($0_1 >>> 0 > $4_1 >>> 0) {
        $2_1 = $0_1;
        break block2;
      }
      $2_1 = $0_1;
      label3: while (1) {
        HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
        HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
        $1_1 = $1_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        if ($2_1 >>> 0 <= $4_1 >>> 0) {
          continue label3;
        }
        break label3;
      }
    }
    if ($2_1 >>> 0 < $3_1 >>> 0) {
      label4: while (1) {
        HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
        $1_1 = $1_1 + 1 | 0;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
          continue label4;
        }
        break label4;
      }
    }
    return $0_1 | 0;
  }
  function $8($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $7_1 = 0,
      $352 = 0,
      $368 = 0,
      $375 = 0,
      $382 = 0;
    block: {
      if (!$0_1) {
        break block;
      }
      $3_1 = $0_1 - 8 | 0;
      $1_1 = HEAP32[($0_1 - 4 | 0) >> 2] | 0;
      $0_1 = $1_1 & -8 | 0;
      $5_1 = $3_1 + $0_1 | 0;
      block1: {
        if ($1_1 & 1 | 0) {
          break block1;
        }
        if (!($1_1 & 3 | 0)) {
          break block;
        }
        $1_1 = HEAP32[$3_1 >> 2] | 0;
        $3_1 = $3_1 - $1_1 | 0;
        if ($3_1 >>> 0 < (HEAP32[5260 >> 2] | 0) >>> 0) {
          break block;
        }
        $0_1 = $0_1 + $1_1 | 0;
        block2: {
          block3: {
            if ((HEAP32[5264 >> 2] | 0 | 0) != ($3_1 | 0)) {
              if ($1_1 >>> 0 <= 255 >>> 0) {
                $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                $4_1 = $1_1 >>> 3 | 0;
                $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
                if (($2_1 | 0) == ($1_1 | 0)) {
                  HEAP32[5244 >> 2] = (HEAP32[5244 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                  break block1;
                }
                HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
                HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
                break block1;
              }
              $6_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
              $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
              if (($3_1 | 0) != ($1_1 | 0)) {
                $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
                HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
                break block2;
              }
              $4_1 = $3_1 + 20 | 0;
              $2_1 = HEAP32[$4_1 >> 2] | 0;
              if (!$2_1) {
                $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                if (!$2_1) {
                  break block3;
                }
                $4_1 = $3_1 + 16 | 0;
              }
              label: while (1) {
                $7_1 = $4_1;
                $1_1 = $2_1;
                $4_1 = $1_1 + 20 | 0;
                $2_1 = HEAP32[$4_1 >> 2] | 0;
                if ($2_1) {
                  continue label;
                }
                $4_1 = $1_1 + 16 | 0;
                $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
                if ($2_1) {
                  continue label;
                }
                break label;
              }
              HEAP32[$7_1 >> 2] = 0;
              break block2;
            }
            $1_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($1_1 & 3 | 0 | 0) != (3 | 0)) {
              break block1;
            }
            HEAP32[5252 >> 2] = $0_1;
            HEAP32[($5_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[$5_1 >> 2] = $0_1;
            return;
          }
          $1_1 = 0;
        }
        if (!$6_1) {
          break block1;
        }
        block4: {
          $2_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
          $4_1 = ($2_1 << 2 | 0) + 5548 | 0;
          if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
            HEAP32[$4_1 >> 2] = $1_1;
            if ($1_1) {
              break block4;
            }
            HEAP32[5248 >> 2] = (HEAP32[5248 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
            break block1;
          }
          HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $1_1;
          if (!$1_1) {
            break block1;
          }
        }
        HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
        $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($2_1) {
          HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
        }
        $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if (!$2_1) {
          break block1;
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
      }
      if ($3_1 >>> 0 >= $5_1 >>> 0) {
        break block;
      }
      $1_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      if (!($1_1 & 1 | 0)) {
        break block;
      }
      block8: {
        block5: {
          block6: {
            block7: {
              if (!($1_1 & 2 | 0)) {
                if ((HEAP32[5268 >> 2] | 0 | 0) == ($5_1 | 0)) {
                  HEAP32[5268 >> 2] = $3_1;
                  $0_1 = (HEAP32[5256 >> 2] | 0) + $0_1 | 0;
                  HEAP32[5256 >> 2] = $0_1;
                  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                  if (($3_1 | 0) != (HEAP32[5264 >> 2] | 0 | 0)) {
                    break block;
                  }
                  HEAP32[5252 >> 2] = 0;
                  HEAP32[5264 >> 2] = 0;
                  return;
                }
                if ((HEAP32[5264 >> 2] | 0 | 0) == ($5_1 | 0)) {
                  HEAP32[5264 >> 2] = $3_1;
                  $0_1 = (HEAP32[5252 >> 2] | 0) + $0_1 | 0;
                  HEAP32[5252 >> 2] = $0_1;
                  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                  HEAP32[($0_1 + $3_1 | 0) >> 2] = $0_1;
                  return;
                }
                $0_1 = ($1_1 & -8 | 0) + $0_1 | 0;
                if ($1_1 >>> 0 <= 255 >>> 0) {
                  $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                  $4_1 = $1_1 >>> 3 | 0;
                  $1_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                  if (($2_1 | 0) == ($1_1 | 0)) {
                    HEAP32[5244 >> 2] = (HEAP32[5244 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                    break block5;
                  }
                  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
                  HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
                  break block5;
                }
                $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
                $1_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($5_1 | 0) != ($1_1 | 0)) {
                  $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                  HEAP32[5260 >> 2] | 0;
                  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
                  HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
                  break block6;
                }
                $4_1 = $5_1 + 20 | 0;
                $2_1 = HEAP32[$4_1 >> 2] | 0;
                if (!$2_1) {
                  $2_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if (!$2_1) {
                    break block7;
                  }
                  $4_1 = $5_1 + 16 | 0;
                }
                label1: while (1) {
                  $7_1 = $4_1;
                  $1_1 = $2_1;
                  $4_1 = $1_1 + 20 | 0;
                  $2_1 = HEAP32[$4_1 >> 2] | 0;
                  if ($2_1) {
                    continue label1;
                  }
                  $4_1 = $1_1 + 16 | 0;
                  $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
                  if ($2_1) {
                    continue label1;
                  }
                  break label1;
                }
                HEAP32[$7_1 >> 2] = 0;
                break block6;
              }
              HEAP32[($5_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
              HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
              HEAP32[($0_1 + $3_1 | 0) >> 2] = $0_1;
              break block8;
            }
            $1_1 = 0;
          }
          if (!$6_1) {
            break block5;
          }
          block9: {
            $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
            $4_1 = ($2_1 << 2 | 0) + 5548 | 0;
            if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
              HEAP32[$4_1 >> 2] = $1_1;
              if ($1_1) {
                break block9;
              }
              HEAP32[5248 >> 2] = (HEAP32[5248 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
              break block5;
            }
            HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $1_1;
            if (!$1_1) {
              break block5;
            }
          }
          HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
          $2_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          if ($2_1) {
            HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
            HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
          }
          $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (!$2_1) {
            break block5;
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[($0_1 + $3_1 | 0) >> 2] = $0_1;
        if (($3_1 | 0) != (HEAP32[5264 >> 2] | 0 | 0)) {
          break block8;
        }
        HEAP32[5252 >> 2] = $0_1;
        return;
      }
      if ($0_1 >>> 0 <= 255 >>> 0) {
        $1_1 = ($0_1 & -8 | 0) + 5284 | 0;
        block10: {
          $2_1 = HEAP32[5244 >> 2] | 0;
          $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
          if (!($2_1 & $0_1 | 0)) {
            HEAP32[5244 >> 2] = $0_1 | $2_1 | 0;
            $352 = $1_1;
            break block10;
          }
          $352 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        }
        $0_1 = $352;
        HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
        HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        return;
      }
      $2_1 = 31;
      if ($0_1 >>> 0 <= 16777215 >>> 0) {
        $1_1 = $0_1 >>> 8 | 0;
        $368 = $1_1;
        $1_1 = (($1_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
        $2_1 = $368 << $1_1 | 0;
        $375 = $2_1;
        $2_1 = (($2_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
        $4_1 = $375 << $2_1 | 0;
        $382 = $4_1;
        $4_1 = (($4_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
        $1_1 = (($382 << $4_1 | 0) >>> 15 | 0) - ($1_1 | $2_1 | 0 | $4_1 | 0) | 0;
        $2_1 = ($1_1 << 1 | 0 | (($0_1 >>> ($1_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
      HEAP32[($3_1 + 16 | 0) >> 2] = 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = 0;
      $1_1 = ($2_1 << 2 | 0) + 5548 | 0;
      block13: {
        block12: {
          block11: {
            $4_1 = HEAP32[5248 >> 2] | 0;
            $7_1 = 1 << $2_1 | 0;
            if (!($4_1 & $7_1 | 0)) {
              HEAP32[5248 >> 2] = $4_1 | $7_1 | 0;
              HEAP32[$1_1 >> 2] = $3_1;
              HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
              break block11;
            }
            $2_1 = $0_1 << (($2_1 | 0) != (31 | 0) ? 25 - ($2_1 >>> 1 | 0) | 0 : 0) | 0;
            $1_1 = HEAP32[$1_1 >> 2] | 0;
            label2: while (1) {
              $4_1 = $1_1;
              if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
                break block12;
              }
              $1_1 = $2_1 >>> 29 | 0;
              $2_1 = $2_1 << 1 | 0;
              $7_1 = $4_1 + ($1_1 & 4 | 0) | 0;
              $1_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
              if ($1_1) {
                continue label2;
              }
              break label2;
            }
            HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
          }
          HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
          HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
          break block13;
        }
        $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 24 | 0) >> 2] = 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = (HEAP32[5276 >> 2] | 0) - 1 | 0;
      HEAP32[5276 >> 2] = $0_1 ? $0_1 : -1;
    }
  }
  function $9($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$1 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$5 = 0,
      $9$hi = 0,
      $5_1 = 0,
      $10$hi = 0,
      $9_1 = 0,
      $7_1 = 0,
      $10_1 = 0,
      $6_1 = 0,
      i64toi32_i32$6 = 0,
      $12$hi = 0,
      $11$hi = 0,
      $11_1 = 0,
      $8_1 = 0,
      $215 = 0,
      $215$hi = 0,
      $12_1 = 0,
      $127 = 0,
      $128 = 0,
      $129 = 0,
      $130 = 0,
      $131 = 0,
      $132 = 0,
      $133 = 0,
      $134 = 0,
      $135 = 0,
      $136 = 0,
      $137 = 0,
      $138 = 0,
      $139 = 0,
      $143 = 0,
      $144 = 0,
      $145 = 0,
      $146 = 0,
      $147 = 0,
      $148 = 0,
      $149 = 0,
      $150 = 0,
      $26_1 = 0,
      $32_1 = 0,
      $36_1 = 0,
      $42_1 = 0,
      $51_1 = 0,
      $53_1 = 0,
      $62_1 = 0,
      $62$hi = 0,
      $68_1 = 0,
      $68$hi = 0,
      $72_1 = 0,
      $72$hi = 0,
      $82 = 0,
      $82$hi = 0,
      $109 = 0,
      $112 = 0,
      $140 = 0,
      $141 = 0,
      $141$hi = 0,
      $142 = 0,
      $142$hi = 0,
      $149$hi = 0,
      $152$hi = 0,
      $172 = 0,
      $173 = 0,
      $173$hi = 0,
      $174 = 0,
      $174$hi = 0,
      $181$hi = 0,
      $184$hi = 0,
      $196 = 0,
      $196$hi = 0,
      $198$hi = 0,
      $202 = 0,
      $202$hi = 0,
      $204$hi = 0,
      $13_1 = 0,
      $13$hi = 0,
      $236 = 0,
      $236$hi = 0,
      $238 = 0,
      $238$hi = 0,
      $240 = 0,
      $240$hi = 0,
      $242 = 0,
      $243$hi = 0,
      $254 = 0,
      $254$hi = 0,
      $257 = 0,
      $257$hi = 0,
      $265$hi = 0,
      $268 = 0,
      $269$hi = 0,
      $274 = 0,
      $275 = 0,
      $275$hi = 0,
      $276 = 0,
      $276$hi = 0,
      $283$hi = 0,
      $286$hi = 0,
      $303 = 0,
      $304 = 0,
      $304$hi = 0,
      $307$hi = 0,
      $313 = 0,
      $313$hi = 0,
      $315 = 0,
      $315$hi = 0,
      $317$hi = 0,
      $318 = 0,
      $318$hi = 0,
      $345 = 0,
      $345$hi = 0,
      $347 = 0,
      $347$hi = 0,
      $349 = 0,
      $349$hi = 0,
      $351 = 0,
      $352$hi = 0,
      $361 = 0,
      $361$hi = 0,
      $363 = 0,
      $363$hi = 0,
      $365$hi = 0,
      $371 = 0,
      $372 = 0,
      $372$hi = 0,
      $375 = 0,
      $375$hi = 0,
      $378$hi = 0,
      $379$hi = 0,
      $381 = 0,
      $381$hi = 0,
      $385 = 0,
      $385$hi = 0,
      $393 = 0,
      $394$hi = 0;
    $6_1 = global$0 - 112 | 0;
    global$0 = $6_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $9$hi = i64toi32_i32$1;
    block1: {
      block: {
        i64toi32_i32$1 = $1$hi;
        $5_1 = !($1_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$2 = 2147483647;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        $10$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$0 = 2147418112;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        i64toi32_i32$2 = i64toi32_i32$4;
        i64toi32_i32$1 = -2147418112;
        i64toi32_i32$3 = 0;
        $26_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$2 = $10$hi;
        if (!(!($10_1 | i64toi32_i32$2 | 0) ? $5_1 : $26_1)) {
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$3 = $3_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = 0;
          $32_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$1 = $9_1;
          i64toi32_i32$2 = 2147418112;
          i64toi32_i32$5 = 0;
          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
          i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
          i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$4;
          i64toi32_i32$3 = i64toi32_i32$0;
          i64toi32_i32$1 = -2147418112;
          i64toi32_i32$5 = 0;
          $36_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$4 = -2147418112;
          i64toi32_i32$1 = 0;
          if ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $32_1 : $36_1) {
            break block;
          }
        }
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$4 = 0;
        $42_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$4 = $10_1;
        i64toi32_i32$5 = 2147418112;
        i64toi32_i32$3 = 0;
        if (!((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $5_1 : $42_1)) {
          i64toi32_i32$4 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$1 = 32768;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
          $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
          $4$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $1$hi;
          $3_1 = $1_1;
          $3$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $3$hi;
        $51_1 = !($3_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$4 = $9_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$5 = 0;
        $53_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$5 = $9_1;
        i64toi32_i32$1 = 2147418112;
        i64toi32_i32$3 = 0;
        if (!((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $53_1)) {
          i64toi32_i32$5 = $4$hi;
          i64toi32_i32$3 = $4_1;
          i64toi32_i32$4 = 32768;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
          $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
          $4$hi = i64toi32_i32$4;
          break block1;
        }
        i64toi32_i32$4 = $1$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$5 = $10_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
        $62_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
        $62$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$5 = $62$hi;
        i64toi32_i32$1 = $62_1;
        i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
        if (!(i64toi32_i32$4 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
          i64toi32_i32$5 = $2$hi;
          i64toi32_i32$5 = i64toi32_i32$3;
          i64toi32_i32$5 = $3$hi;
          i64toi32_i32$5 = i64toi32_i32$3;
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
          $68_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
          $68$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $2$hi;
          i64toi32_i32$4 = $4$hi;
          i64toi32_i32$4 = $2$hi;
          i64toi32_i32$5 = $2_1;
          i64toi32_i32$3 = $4$hi;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$1 = 0;
          i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
          $72_1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
          $72$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $68$hi;
          i64toi32_i32$3 = $68_1;
          i64toi32_i32$4 = $72$hi;
          i64toi32_i32$1 = $72_1;
          i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
          $5_1 = !(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$4 | 0);
          i64toi32_i32$2 = $5_1;
          i64toi32_i32$4 = 2147450880;
          i64toi32_i32$3 = $2$hi;
          i64toi32_i32$1 = i64toi32_i32$2 ? 0 : $2_1;
          i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$3;
          $4_1 = i64toi32_i32$1;
          $4$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$3 = i64toi32_i32$2 ? 0 : $1_1;
          i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
          $3_1 = i64toi32_i32$3;
          $3$hi = i64toi32_i32$2;
          break block1;
        }
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$4 = $9_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
        $82 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
        $82$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = $82$hi;
        i64toi32_i32$1 = $82;
        i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
        if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$4 | 0)) {
          break block1;
        }
        i64toi32_i32$4 = $1$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        if (!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$2 = $9$hi;
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$4 = $3_1;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$1 = $9_1;
          i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
          i64toi32_i32$4 = 0;
          i64toi32_i32$1 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0) {
            break block1;
          }
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$3 = $3$hi;
          i64toi32_i32$4 = $3_1;
          i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $3_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
          $3$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $2$hi;
          i64toi32_i32$3 = $4$hi;
          i64toi32_i32$3 = $2$hi;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$4 = $4_1;
          i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
          $4_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
          $4$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$4 = $9_1;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
          break block;
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $2$hi;
        $4_1 = $2_1;
        $4$hi = i64toi32_i32$1;
        break block1;
      }
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3_1;
      $109 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$2 = $10_1;
      $112 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = $10_1;
      $8_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $109 : $112;
      i64toi32_i32$5 = $8_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = i64toi32_i32$5 ? $3_1 : $1_1;
      i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
      $10_1 = i64toi32_i32$4;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2 ? $4_1 : $2_1;
      i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$4;
      $11_1 = i64toi32_i32$3;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$4 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $9_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $9$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? $2_1 : $4_1;
      i64toi32_i32$5 = i64toi32_i32$1 ? i64toi32_i32$3 : i64toi32_i32$2;
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 48;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $127 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        $127 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $7_1 = $127 & 32767 | 0;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 48;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $128 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $128 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $5_1 = $128 & 32767 | 0;
      if (!$5_1) {
        $140 = $6_1 + 96 | 0;
        i64toi32_i32$1 = $10$hi;
        $141 = $10_1;
        $141$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $9$hi;
        $142 = $9_1;
        $142$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $9$hi;
        $5_1 = !($9_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$2 = i64toi32_i32$3 ? $10_1 : $9_1;
        i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$5;
        i64toi32_i32$5 = Math_clz32(i64toi32_i32$4);
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$5 | 0) == (32 | 0)) {
          $129 = Math_clz32(i64toi32_i32$2) + 32 | 0;
        } else {
          $129 = i64toi32_i32$5;
        }
        $149$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $152$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $149$hi;
        i64toi32_i32$2 = $129;
        i64toi32_i32$4 = $152$hi;
        i64toi32_i32$5 = $5_1 << 6 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $5_1 = i64toi32_i32$1;
        i64toi32_i32$0 = $141$hi;
        i64toi32_i32$2 = $142$hi;
        $5($140 | 0, $141 | 0, i64toi32_i32$0 | 0, $142 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 - 15 | 0 | 0);
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
        $9_1 = i64toi32_i32$2;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$0;
        $10$hi = i64toi32_i32$2;
        $5_1 = 16 - i64toi32_i32$1 | 0;
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $1_1 : $3_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
      $3_1 = i64toi32_i32$5;
      $3$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$5 = 65535;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4$hi = i64toi32_i32$5;
      if (!$7_1) {
        $172 = $6_1 + 80 | 0;
        i64toi32_i32$5 = $3$hi;
        $173 = $3_1;
        $173$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $4$hi;
        $174 = $4_1;
        $174$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $4$hi;
        $7_1 = !($4_1 | i64toi32_i32$5 | 0);
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$0 = i64toi32_i32$2 ? $3_1 : $4_1;
        i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
        i64toi32_i32$4 = Math_clz32(i64toi32_i32$3);
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$4 | 0) == (32 | 0)) {
          $130 = Math_clz32(i64toi32_i32$0) + 32 | 0;
        } else {
          $130 = i64toi32_i32$4;
        }
        $181$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $184$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $181$hi;
        i64toi32_i32$0 = $130;
        i64toi32_i32$3 = $184$hi;
        i64toi32_i32$4 = $7_1 << 6 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $7_1 = i64toi32_i32$5;
        i64toi32_i32$1 = $173$hi;
        i64toi32_i32$0 = $174$hi;
        $5($172 | 0, $173 | 0, i64toi32_i32$1 | 0, $174 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 - 15 | 0 | 0);
        $7_1 = 16 - i64toi32_i32$5 | 0;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$0;
        $4$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
        $3_1 = i64toi32_i32$1;
        $3$hi = i64toi32_i32$0;
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 3;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $131 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
        $131 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $196 = $131;
      $196$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 61;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $132 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $132 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $198$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $196$hi;
      i64toi32_i32$1 = $196;
      i64toi32_i32$0 = $198$hi;
      i64toi32_i32$4 = $132;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      i64toi32_i32$1 = 524288;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $1$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 3;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        $133 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
        $133 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      }
      $202 = $133;
      $202$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 61;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $134 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
        $134 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
      }
      $204$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $202$hi;
      i64toi32_i32$2 = $202;
      i64toi32_i32$1 = $204$hi;
      i64toi32_i32$4 = $134;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $13_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
      $13$hi = i64toi32_i32$2;
      block2: {
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 3;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
          $135 = 0;
        } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
          $135 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
        }
        $2_1 = $135;
        $2$hi = i64toi32_i32$0;
        $215 = $2_1;
        $215$hi = i64toi32_i32$0;
        if (($5_1 | 0) == ($7_1 | 0)) {
          break block2;
        }
        $7_1 = $5_1 - $7_1 | 0;
        if ($7_1 >>> 0 > 127 >>> 0) {
          i64toi32_i32$0 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $215 = 1;
          $215$hi = i64toi32_i32$0;
          break block2;
        }
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$1 = $1$hi;
        $5($6_1 - -64 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, 128 - $7_1 | 0 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1$hi;
        $20($6_1 + 48 | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
        $1_1 = i64toi32_i32$0;
        $1$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $236 = i64toi32_i32$1;
        $236$hi = i64toi32_i32$0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
        $238 = i64toi32_i32$0;
        $238$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
        $240 = i64toi32_i32$1;
        $240$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $238$hi;
        i64toi32_i32$2 = $238;
        i64toi32_i32$1 = $240$hi;
        i64toi32_i32$4 = $240;
        i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 0;
        $242 = (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$0 = 0;
        $243$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $236$hi;
        i64toi32_i32$4 = $236;
        i64toi32_i32$1 = $243$hi;
        i64toi32_i32$2 = $242;
        i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
        $215 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        $215$hi = i64toi32_i32$1;
      }
      i64toi32_i32$1 = $215$hi;
      $9_1 = $215;
      $9$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$4 = 524288;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 3;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
        $136 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
        $136 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $10_1 = $136;
      $10$hi = i64toi32_i32$0;
      block3: {
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$4 = $13_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
          $137 = 1;
        } else {
          if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
            if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
              $138 = 0;
            } else {
              $138 = 1;
            }
            $139 = $138;
          } else {
            $139 = 0;
          }
          $137 = $139;
        }
        if ($137) {
          i64toi32_i32$4 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          $4_1 = 0;
          $4$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $9$hi;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$4 = $9$hi;
          i64toi32_i32$2 = $9_1;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$1 = $10_1;
          i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
          $254 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
          $254$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$4 = $1_1;
          i64toi32_i32$2 = $12$hi;
          i64toi32_i32$1 = $12_1;
          i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
          $257 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
          $257$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $254$hi;
          i64toi32_i32$0 = $254;
          i64toi32_i32$4 = $257$hi;
          i64toi32_i32$1 = $257;
          i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
          if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$4 | 0)) {
            break block1;
          }
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$4 = $9$hi;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$1 = $9_1;
          i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
          $2_1 = i64toi32_i32$3;
          $2$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $12$hi;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $12$hi;
          i64toi32_i32$4 = $12_1;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
          i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
          i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
          i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
          $265$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$3 = $10$hi;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$5 = $9_1;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$1 = $10_1;
          $268 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
          i64toi32_i32$5 = 0;
          $269$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $265$hi;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$3 = $269$hi;
          i64toi32_i32$4 = $268;
          i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
          i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
          i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
          $4_1 = i64toi32_i32$2;
          $4$hi = i64toi32_i32$0;
          i64toi32_i32$5 = i64toi32_i32$2;
          i64toi32_i32$1 = 524287;
          i64toi32_i32$4 = -1;
          if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
            break block3;
          }
          $274 = $6_1 + 32 | 0;
          i64toi32_i32$5 = $2$hi;
          $275 = $2_1;
          $275$hi = i64toi32_i32$5;
          i64toi32_i32$5 = i64toi32_i32$0;
          $276 = i64toi32_i32$2;
          $276$hi = i64toi32_i32$0;
          i64toi32_i32$5 = $2$hi;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$5 = i64toi32_i32$0;
          $7_1 = !(i64toi32_i32$2 | i64toi32_i32$0 | 0);
          i64toi32_i32$3 = $7_1;
          i64toi32_i32$5 = $2$hi;
          i64toi32_i32$1 = i64toi32_i32$3 ? $2_1 : i64toi32_i32$2;
          i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$0;
          i64toi32_i32$0 = Math_clz32(i64toi32_i32$4);
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$0 | 0) == (32 | 0)) {
            $143 = Math_clz32(i64toi32_i32$1) + 32 | 0;
          } else {
            $143 = i64toi32_i32$0;
          }
          $283$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          $286$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $283$hi;
          i64toi32_i32$1 = $143;
          i64toi32_i32$4 = $286$hi;
          i64toi32_i32$0 = $7_1 << 6 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
          }
          $7_1 = i64toi32_i32$5 - 12 | 0;
          i64toi32_i32$2 = $275$hi;
          i64toi32_i32$1 = $276$hi;
          $5($274 | 0, $275 | 0, i64toi32_i32$2 | 0, $276 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
          $5_1 = $5_1 - $7_1 | 0;
          i64toi32_i32$3 = $6_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
          $4_1 = i64toi32_i32$1;
          $4$hi = i64toi32_i32$2;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
          $2_1 = i64toi32_i32$2;
          $2$hi = i64toi32_i32$1;
          break block3;
        }
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$0 = $9_1;
        $303 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $304 = $303;
        $304$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $307$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $304$hi;
        i64toi32_i32$1 = $304;
        i64toi32_i32$0 = $307$hi;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$1 = 1048576;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
        if (!(i64toi32_i32$4 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
          break block3;
        }
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$2 = $9_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
        $313 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $313$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 63;
        i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
          $144 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
          $144 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
        }
        $315 = $144;
        $315$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$4 = $2_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $145 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
          $145 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
        }
        $317$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $315$hi;
        i64toi32_i32$2 = $315;
        i64toi32_i32$4 = $317$hi;
        i64toi32_i32$3 = $145;
        i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
        $318 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
        $318$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $313$hi;
        i64toi32_i32$1 = $313;
        i64toi32_i32$2 = $318$hi;
        i64toi32_i32$3 = $318;
        i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        $2$hi = i64toi32_i32$2;
        $5_1 = $5_1 + 1 | 0;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$4 = $4_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $146 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
          $146 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
        }
        $4_1 = $146;
        $4$hi = i64toi32_i32$1;
      }
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$4 = -2147483648;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $1$hi = i64toi32_i32$4;
      if (($5_1 | 0) >= (32767 | 0)) {
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$2 = 2147418112;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$2;
        break block1;
      }
      $7_1 = 0;
      block4: {
        if (($5_1 | 0) > (0 | 0)) {
          $7_1 = $5_1;
          break block4;
        }
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$1 = $4$hi;
        $5($6_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $5_1 + 127 | 0 | 0);
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$2 = $4$hi;
        $20($6_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 1 - $5_1 | 0 | 0);
        i64toi32_i32$4 = $6_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
        $345 = i64toi32_i32$2;
        $345$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
        $347 = i64toi32_i32$1;
        $347$hi = i64toi32_i32$2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
        $349 = i64toi32_i32$2;
        $349$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $347$hi;
        i64toi32_i32$4 = $347;
        i64toi32_i32$2 = $349$hi;
        i64toi32_i32$3 = $349;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$3 = 0;
        $351 = (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$1 = 0;
        $352$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $345$hi;
        i64toi32_i32$3 = $345;
        i64toi32_i32$2 = $352$hi;
        i64toi32_i32$4 = $351;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
        $2$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$2;
        $4$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = $2$hi;
      $5_1 = $2_1 & 7 | 0;
      i64toi32_i32$3 = 0;
      $361 = $5_1 >>> 0 > 4 >>> 0;
      $361$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 61;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
        $147 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
        $147 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      }
      $363 = $147;
      $363$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 3;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $148 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $148 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $365$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $363$hi;
      i64toi32_i32$2 = $363;
      i64toi32_i32$3 = $365$hi;
      i64toi32_i32$4 = $148;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $361$hi;
      i64toi32_i32$1 = $361;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $3_1 = i64toi32_i32$0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$4 = $2_1;
      $371 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $372 = $371;
      $372$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 3;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $149 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
        $149 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      i64toi32_i32$3 = $149;
      i64toi32_i32$4 = 65535;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
      $375 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $375$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 48;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
        $150 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
        $150 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $378$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $375$hi;
      i64toi32_i32$4 = $375;
      i64toi32_i32$5 = $378$hi;
      i64toi32_i32$1 = $150;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      $379$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $379$hi;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $381 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $381$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $372$hi;
      i64toi32_i32$5 = $372;
      i64toi32_i32$3 = $381$hi;
      i64toi32_i32$1 = $381;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
      }
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$0;
      block5: {
        if (($5_1 | 0) == (4 | 0)) {
          $385 = i64toi32_i32$2;
          $385$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$4 = $3_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = 1;
          i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
          $1_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
          $1$hi = i64toi32_i32$5;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
          }
          $3_1 = i64toi32_i32$3;
          $3$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$2 = $3$hi;
          i64toi32_i32$5 = i64toi32_i32$3;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$1 = $1_1;
          $393 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
          i64toi32_i32$5 = 0;
          $394$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $385$hi;
          i64toi32_i32$1 = $385;
          i64toi32_i32$2 = $394$hi;
          i64toi32_i32$0 = $393;
          i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
            i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
          }
          $4_1 = i64toi32_i32$4;
          $4$hi = i64toi32_i32$3;
          break block5;
        }
        if (!$5_1) {
          break block1;
        }
      }
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $3_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
    global$0 = $6_1 + 112 | 0;
  }
  function $10($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$3 = 0,
      $2_1 = 0,
      i64toi32_i32$4 = 0,
      $3_1 = 0,
      $11_1 = 0,
      $11$hi = 0,
      $22_1 = 0,
      $23_1 = 0,
      $8_1 = 0,
      $21_1 = 0,
      $28_1 = 0,
      $28$hi = 0,
      $32$hi = 0,
      $33_1 = 0,
      $33$hi = 0,
      $37$hi = 0,
      $4_1 = 0,
      $4$hi = 0;
    $3_1 = global$0 - 16 | 0;
    global$0 = $3_1;
    $8_1 = $0_1;
    block: {
      if (!$1_1) {
        i64toi32_i32$0 = 0;
        $11_1 = 0;
        $11$hi = i64toi32_i32$0;
        break block;
      }
      $2_1 = $1_1 >> 31 | 0;
      $2_1 = ($1_1 ^ $2_1 | 0) - $2_1 | 0;
      i64toi32_i32$0 = 0;
      $21_1 = $2_1;
      $2_1 = Math_clz32($2_1);
      i64toi32_i32$1 = 0;
      $5($3_1 | 0, $21_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $2_1 + 81 | 0 | 0);
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
      $28_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
      $28$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 16414 - $2_1 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $22_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $32$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $28$hi;
      i64toi32_i32$1 = $28_1;
      i64toi32_i32$0 = $32$hi;
      i64toi32_i32$3 = $22_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $33_1 = i64toi32_i32$4;
      $33$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $1_1 & -2147483648 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
        $23_1 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
        $23_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $37$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $33$hi;
      i64toi32_i32$5 = $33_1;
      i64toi32_i32$2 = $37$hi;
      i64toi32_i32$3 = $23_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$2;
      $11$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$2 = $8_1;
    HEAP32[i64toi32_i32$2 >> 2] = $11_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $0_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
    global$0 = $3_1 + 16 | 0;
  }
  function $11($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $4_1 = $3_1 + ($2_1 << 3 | 0) | 0;
    HEAP32[$0_1 >> 2] = $4_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($3_1 >>> 0 > $4_1 >>> 0) | 0) + ($2_1 >>> 29 | 0) | 0;
    block: {
      $5_1 = ($3_1 >>> 3 | 0) & 63 | 0;
      $3_1 = 64 - $5_1 | 0;
      if ($2_1 >>> 0 < $3_1 >>> 0) {
        $3_1 = 0;
        break block;
      }
      $4_1 = $0_1 + 24 | 0;
      $7($4_1 + $5_1 | 0 | 0, $1_1 | 0, $3_1 | 0) | 0;
      $6_1 = $0_1 + 8 | 0;
      $30($6_1 | 0, $4_1 | 0);
      $4_1 = 128 - $5_1 | 0;
      $5_1 = 0;
      if ($2_1 >>> 0 < $4_1 >>> 0) {
        break block;
      }
      label: while (1) {
        $30($6_1 | 0, $1_1 + $3_1 | 0 | 0);
        $3_1 = $4_1;
        $4_1 = $3_1 - -64 | 0;
        if ($4_1 >>> 0 <= $2_1 >>> 0) {
          continue label;
        }
        break label;
      }
    }
    $7(($0_1 + $5_1 | 0) + 24 | 0 | 0, $1_1 + $3_1 | 0 | 0, $2_1 - $3_1 | 0 | 0) | 0;
  }
  function $12($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $5_1 = 0,
      $92 = 0,
      $5$hi = 0;
    block: {
      if (!$2_1) {
        break block;
      }
      HEAP8[$0_1 >> 0] = $1_1;
      $3_1 = $0_1 + $2_1 | 0;
      HEAP8[($3_1 - 1 | 0) >> 0] = $1_1;
      if ($2_1 >>> 0 < 3 >>> 0) {
        break block;
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
      HEAP8[($3_1 - 3 | 0) >> 0] = $1_1;
      HEAP8[($3_1 - 2 | 0) >> 0] = $1_1;
      if ($2_1 >>> 0 < 7 >>> 0) {
        break block;
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
      HEAP8[($3_1 - 4 | 0) >> 0] = $1_1;
      if ($2_1 >>> 0 < 9 >>> 0) {
        break block;
      }
      $4_1 = (0 - $0_1 | 0) & 3 | 0;
      $3_1 = $0_1 + $4_1 | 0;
      $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
      HEAP32[$3_1 >> 2] = $1_1;
      $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
      $2_1 = $3_1 + $4_1 | 0;
      HEAP32[($2_1 - 4 | 0) >> 2] = $1_1;
      if ($4_1 >>> 0 < 9 >>> 0) {
        break block;
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[($2_1 - 8 | 0) >> 2] = $1_1;
      HEAP32[($2_1 - 12 | 0) >> 2] = $1_1;
      if ($4_1 >>> 0 < 25 >>> 0) {
        break block;
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
      HEAP32[($2_1 - 16 | 0) >> 2] = $1_1;
      HEAP32[($2_1 - 20 | 0) >> 2] = $1_1;
      HEAP32[($2_1 - 24 | 0) >> 2] = $1_1;
      HEAP32[($2_1 - 28 | 0) >> 2] = $1_1;
      $92 = $4_1;
      $4_1 = $3_1 & 4 | 0 | 24 | 0;
      $2_1 = $92 - $4_1 | 0;
      if ($2_1 >>> 0 < 32 >>> 0) {
        break block;
      }
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $5_1 = i64toi32_i32$1;
      $5$hi = i64toi32_i32$0;
      $1_1 = $3_1 + $4_1 | 0;
      label: while (1) {
        i64toi32_i32$0 = $5$hi;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 24 | 0) >> 2] = $5_1;
        HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $1_1;
        HEAP32[$1_1 >> 2] = $5_1;
        HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $1_1 = $1_1 + 32 | 0;
        $2_1 = $2_1 - 32 | 0;
        if ($2_1 >>> 0 > 31 >>> 0) {
          continue label;
        }
        break label;
      }
    }
    return $0_1 | 0;
  }
  function $13($0_1) {
    $0_1 = $0_1 | 0;
    if ($0_1) {
      $12(HEAP32[$0_1 >> 2] | 0 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      $8($0_1 | 0);
    }
  }
  function $14($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $7_1 = 0,
      $8_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $9_1 = 0,
      $337 = 0,
      i64toi32_i32$2 = 0,
      $10_1 = 0,
      $11_1 = 0,
      $185 = 0,
      $514 = 0,
      $628 = 0,
      $1136 = 0,
      $1354 = 0,
      $1564 = 0,
      $1771 = 0,
      $90 = 0,
      $101 = 0,
      $109 = 0,
      $117 = 0,
      $209 = 0,
      $220 = 0,
      $228 = 0,
      $236 = 0,
      $271 = 0,
      $344 = 0,
      $351 = 0,
      $358 = 0,
      $447 = 0,
      $458 = 0,
      $466 = 0,
      $474 = 0,
      $625 = 0,
      $1087 = 0,
      $1089 = 0,
      $1152 = 0,
      $1159 = 0,
      $1166 = 0,
      $1370 = 0,
      $1377 = 0,
      $1384 = 0,
      $1580 = 0,
      $1587 = 0,
      $1594 = 0;
    $11_1 = global$0 - 16 | 0;
    global$0 = $11_1;
    block1: {
      block6: {
        block13: {
          block29: {
            block30: {
              block31: {
                block32: {
                  block33: {
                    block22: {
                      block25: {
                        block24: {
                          block14: {
                            block7: {
                              block2: {
                                if ($0_1 >>> 0 <= 244 >>> 0) {
                                  $5_1 = HEAP32[5244 >> 2] | 0;
                                  $6_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                                  $0_1 = $6_1 >>> 3 | 0;
                                  $1_1 = $5_1 >>> $0_1 | 0;
                                  if ($1_1 & 3 | 0) {
                                    block: {
                                      $2_1 = (($1_1 ^ -1 | 0) & 1 | 0) + $0_1 | 0;
                                      $1_1 = $2_1 << 3 | 0;
                                      $0_1 = $1_1 + 5284 | 0;
                                      $1_1 = HEAP32[($1_1 + 5292 | 0) >> 2] | 0;
                                      $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                                      if (($0_1 | 0) == ($3_1 | 0)) {
                                        HEAP32[5244 >> 2] = $5_1 & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
                                        break block;
                                      }
                                      HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
                                      HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
                                    }
                                    $0_1 = $1_1 + 8 | 0;
                                    $2_1 = $2_1 << 3 | 0;
                                    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
                                    $1_1 = $1_1 + $2_1 | 0;
                                    HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                                    break block1;
                                  }
                                  $7_1 = HEAP32[5252 >> 2] | 0;
                                  if ($6_1 >>> 0 <= $7_1 >>> 0) {
                                    break block2;
                                  }
                                  if ($1_1) {
                                    block3: {
                                      $2_1 = 2 << $0_1 | 0;
                                      $0_1 = ($2_1 | (0 - $2_1 | 0) | 0) & ($1_1 << $0_1 | 0) | 0;
                                      $0_1 = ($0_1 - 1 | 0) & ($0_1 ^ -1 | 0) | 0;
                                      $90 = $0_1;
                                      $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                                      $1_1 = $90 >>> $0_1 | 0;
                                      $2_1 = ($1_1 >>> 5 | 0) & 8 | 0;
                                      $101 = $2_1 | $0_1 | 0;
                                      $0_1 = $1_1 >>> $2_1 | 0;
                                      $1_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                                      $109 = $101 | $1_1 | 0;
                                      $0_1 = $0_1 >>> $1_1 | 0;
                                      $1_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                                      $117 = $109 | $1_1 | 0;
                                      $0_1 = $0_1 >>> $1_1 | 0;
                                      $1_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                                      $1_1 = ($117 | $1_1 | 0) + ($0_1 >>> $1_1 | 0) | 0;
                                      $0_1 = $1_1 << 3 | 0;
                                      $2_1 = $0_1 + 5284 | 0;
                                      $0_1 = HEAP32[($0_1 + 5292 | 0) >> 2] | 0;
                                      $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                      if (($2_1 | 0) == ($3_1 | 0)) {
                                        $5_1 = $5_1 & (__wasm_rotl_i32(-2 | 0, $1_1 | 0) | 0) | 0;
                                        HEAP32[5244 >> 2] = $5_1;
                                        break block3;
                                      }
                                      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
                                      HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
                                    }
                                    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                                    $8_1 = $0_1 + $6_1 | 0;
                                    $1_1 = $1_1 << 3 | 0;
                                    $3_1 = $1_1 - $6_1 | 0;
                                    HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
                                    HEAP32[($0_1 + $1_1 | 0) >> 2] = $3_1;
                                    if ($7_1) {
                                      $1_1 = ($7_1 & -8 | 0) + 5284 | 0;
                                      $2_1 = HEAP32[5264 >> 2] | 0;
                                      block4: {
                                        $4_1 = 1 << ($7_1 >>> 3 | 0) | 0;
                                        if (!($5_1 & $4_1 | 0)) {
                                          HEAP32[5244 >> 2] = $4_1 | $5_1 | 0;
                                          $185 = $1_1;
                                          break block4;
                                        }
                                        $185 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                                      }
                                      $4_1 = $185;
                                      HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
                                      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
                                      HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
                                      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
                                    }
                                    $0_1 = $0_1 + 8 | 0;
                                    HEAP32[5264 >> 2] = $8_1;
                                    HEAP32[5252 >> 2] = $3_1;
                                    break block1;
                                  }
                                  $10_1 = HEAP32[5248 >> 2] | 0;
                                  if (!$10_1) {
                                    break block2;
                                  }
                                  $0_1 = ($10_1 - 1 | 0) & ($10_1 ^ -1 | 0) | 0;
                                  $209 = $0_1;
                                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                                  $1_1 = $209 >>> $0_1 | 0;
                                  $2_1 = ($1_1 >>> 5 | 0) & 8 | 0;
                                  $220 = $2_1 | $0_1 | 0;
                                  $0_1 = $1_1 >>> $2_1 | 0;
                                  $1_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                                  $228 = $220 | $1_1 | 0;
                                  $0_1 = $0_1 >>> $1_1 | 0;
                                  $1_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                                  $236 = $228 | $1_1 | 0;
                                  $0_1 = $0_1 >>> $1_1 | 0;
                                  $1_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                                  $2_1 = HEAP32[(((($236 | $1_1 | 0) + ($0_1 >>> $1_1 | 0) | 0) << 2 | 0) + 5548 | 0) >> 2] | 0;
                                  $4_1 = ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $6_1 | 0;
                                  $1_1 = $2_1;
                                  label: while (1) {
                                    block5: {
                                      $0_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
                                      if (!$0_1) {
                                        $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                                        if (!$0_1) {
                                          break block5;
                                        }
                                      }
                                      $1_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $6_1 | 0;
                                      $271 = $1_1;
                                      $1_1 = $1_1 >>> 0 < $4_1 >>> 0;
                                      $4_1 = $1_1 ? $271 : $4_1;
                                      $2_1 = $1_1 ? $0_1 : $2_1;
                                      $1_1 = $0_1;
                                      continue label;
                                    }
                                    break label;
                                  }
                                  $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
                                  $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
                                  if (($2_1 | 0) != ($3_1 | 0)) {
                                    $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                                    HEAP32[5260 >> 2] | 0;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
                                    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
                                    break block6;
                                  }
                                  $1_1 = $2_1 + 20 | 0;
                                  $0_1 = HEAP32[$1_1 >> 2] | 0;
                                  if (!$0_1) {
                                    $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                                    if (!$0_1) {
                                      break block7;
                                    }
                                    $1_1 = $2_1 + 16 | 0;
                                  }
                                  label1: while (1) {
                                    $8_1 = $1_1;
                                    $3_1 = $0_1;
                                    $1_1 = $0_1 + 20 | 0;
                                    $0_1 = HEAP32[$1_1 >> 2] | 0;
                                    if ($0_1) {
                                      continue label1;
                                    }
                                    $1_1 = $3_1 + 16 | 0;
                                    $0_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                                    if ($0_1) {
                                      continue label1;
                                    }
                                    break label1;
                                  }
                                  HEAP32[$8_1 >> 2] = 0;
                                  break block6;
                                }
                                $6_1 = -1;
                                if ($0_1 >>> 0 > -65 >>> 0) {
                                  break block2;
                                }
                                $0_1 = $0_1 + 11 | 0;
                                $6_1 = $0_1 & -8 | 0;
                                $8_1 = HEAP32[5248 >> 2] | 0;
                                if (!$8_1) {
                                  break block2;
                                }
                                $4_1 = 0 - $6_1 | 0;
                                block12: {
                                  block11: {
                                    block9: {
                                      block8: {
                                        $337 = 0;
                                        if ($6_1 >>> 0 < 256 >>> 0) {
                                          break block8;
                                        }
                                        $337 = 31;
                                        if ($6_1 >>> 0 > 16777215 >>> 0) {
                                          break block8;
                                        }
                                        $0_1 = $0_1 >>> 8 | 0;
                                        $344 = $0_1;
                                        $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
                                        $1_1 = $344 << $0_1 | 0;
                                        $351 = $1_1;
                                        $1_1 = (($1_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
                                        $2_1 = $351 << $1_1 | 0;
                                        $358 = $2_1;
                                        $2_1 = (($2_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
                                        $0_1 = (($358 << $2_1 | 0) >>> 15 | 0) - ($0_1 | $1_1 | 0 | $2_1 | 0) | 0;
                                        $337 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
                                      }
                                      $7_1 = $337;
                                      $1_1 = HEAP32[(($7_1 << 2 | 0) + 5548 | 0) >> 2] | 0;
                                      if (!$1_1) {
                                        $0_1 = 0;
                                        break block9;
                                      }
                                      $0_1 = 0;
                                      $2_1 = $6_1 << (($7_1 | 0) != (31 | 0) ? 25 - ($7_1 >>> 1 | 0) | 0 : 0) | 0;
                                      label2: while (1) {
                                        block10: {
                                          $5_1 = ((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $6_1 | 0;
                                          if ($5_1 >>> 0 >= $4_1 >>> 0) {
                                            break block10;
                                          }
                                          $3_1 = $1_1;
                                          $4_1 = $5_1;
                                          if ($4_1) {
                                            break block10;
                                          }
                                          $4_1 = 0;
                                          $0_1 = $1_1;
                                          break block11;
                                        }
                                        $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                                        $1_1 = HEAP32[(($1_1 + (($2_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                                        $0_1 = $5_1 ? ($5_1 | 0) == ($1_1 | 0) ? $0_1 : $5_1 : $0_1;
                                        $2_1 = $2_1 << 1 | 0;
                                        if ($1_1) {
                                          continue label2;
                                        }
                                        break label2;
                                      }
                                    }
                                    if (!($0_1 | $3_1 | 0)) {
                                      $3_1 = 0;
                                      $0_1 = 2 << $7_1 | 0;
                                      $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $8_1 | 0;
                                      if (!$0_1) {
                                        break block2;
                                      }
                                      $0_1 = ($0_1 - 1 | 0) & ($0_1 ^ -1 | 0) | 0;
                                      $447 = $0_1;
                                      $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                                      $1_1 = $447 >>> $0_1 | 0;
                                      $2_1 = ($1_1 >>> 5 | 0) & 8 | 0;
                                      $458 = $2_1 | $0_1 | 0;
                                      $0_1 = $1_1 >>> $2_1 | 0;
                                      $1_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                                      $466 = $458 | $1_1 | 0;
                                      $0_1 = $0_1 >>> $1_1 | 0;
                                      $1_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                                      $474 = $466 | $1_1 | 0;
                                      $0_1 = $0_1 >>> $1_1 | 0;
                                      $1_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                                      $0_1 = HEAP32[(((($474 | $1_1 | 0) + ($0_1 >>> $1_1 | 0) | 0) << 2 | 0) + 5548 | 0) >> 2] | 0;
                                    }
                                    if (!$0_1) {
                                      break block12;
                                    }
                                  }
                                  label3: while (1) {
                                    $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $6_1 | 0;
                                    $1_1 = $2_1 >>> 0 < $4_1 >>> 0;
                                    $4_1 = $1_1 ? $2_1 : $4_1;
                                    $3_1 = $1_1 ? $0_1 : $3_1;
                                    $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                                    if ($1_1) {
                                      $514 = $1_1;
                                    } else {
                                      $514 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                                    }
                                    $0_1 = $514;
                                    if ($0_1) {
                                      continue label3;
                                    }
                                    break label3;
                                  }
                                }
                                if (!$3_1) {
                                  break block2;
                                }
                                if ($4_1 >>> 0 >= ((HEAP32[5252 >> 2] | 0) - $6_1 | 0) >>> 0) {
                                  break block2;
                                }
                                $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                                $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
                                if (($3_1 | 0) != ($2_1 | 0)) {
                                  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                                  HEAP32[5260 >> 2] | 0;
                                  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
                                  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
                                  break block13;
                                }
                                $1_1 = $3_1 + 20 | 0;
                                $0_1 = HEAP32[$1_1 >> 2] | 0;
                                if (!$0_1) {
                                  $0_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                                  if (!$0_1) {
                                    break block14;
                                  }
                                  $1_1 = $3_1 + 16 | 0;
                                }
                                label4: while (1) {
                                  $5_1 = $1_1;
                                  $2_1 = $0_1;
                                  $1_1 = $0_1 + 20 | 0;
                                  $0_1 = HEAP32[$1_1 >> 2] | 0;
                                  if ($0_1) {
                                    continue label4;
                                  }
                                  $1_1 = $2_1 + 16 | 0;
                                  $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                                  if ($0_1) {
                                    continue label4;
                                  }
                                  break label4;
                                }
                                HEAP32[$5_1 >> 2] = 0;
                                break block13;
                              }
                              $1_1 = HEAP32[5252 >> 2] | 0;
                              if ($6_1 >>> 0 <= $1_1 >>> 0) {
                                $0_1 = HEAP32[5264 >> 2] | 0;
                                block15: {
                                  $2_1 = $1_1 - $6_1 | 0;
                                  if ($2_1 >>> 0 >= 16 >>> 0) {
                                    HEAP32[5252 >> 2] = $2_1;
                                    $3_1 = $0_1 + $6_1 | 0;
                                    HEAP32[5264 >> 2] = $3_1;
                                    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
                                    HEAP32[($0_1 + $1_1 | 0) >> 2] = $2_1;
                                    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                                    break block15;
                                  }
                                  HEAP32[5264 >> 2] = 0;
                                  HEAP32[5252 >> 2] = 0;
                                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
                                  $1_1 = $0_1 + $1_1 | 0;
                                  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                                }
                                $0_1 = $0_1 + 8 | 0;
                                break block1;
                              }
                              $2_1 = HEAP32[5256 >> 2] | 0;
                              if ($6_1 >>> 0 < $2_1 >>> 0) {
                                $1_1 = $2_1 - $6_1 | 0;
                                HEAP32[5256 >> 2] = $1_1;
                                $0_1 = HEAP32[5268 >> 2] | 0;
                                $2_1 = $0_1 + $6_1 | 0;
                                HEAP32[5268 >> 2] = $2_1;
                                HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                                HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                                $0_1 = $0_1 + 8 | 0;
                                break block1;
                              }
                              $0_1 = 0;
                              $4_1 = $6_1 + 47 | 0;
                              $625 = $4_1;
                              block16: {
                                if (HEAP32[5716 >> 2] | 0) {
                                  $628 = HEAP32[5724 >> 2] | 0;
                                  break block16;
                                }
                                i64toi32_i32$1 = 5728;
                                i64toi32_i32$0 = -1;
                                HEAP32[i64toi32_i32$1 >> 2] = -1;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                i64toi32_i32$1 = 5720;
                                i64toi32_i32$0 = 4096;
                                HEAP32[i64toi32_i32$1 >> 2] = 4096;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                HEAP32[5716 >> 2] = (($11_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
                                HEAP32[5736 >> 2] = 0;
                                HEAP32[5688 >> 2] = 0;
                                $628 = 4096;
                              }
                              $1_1 = $628;
                              $5_1 = $625 + $1_1 | 0;
                              $8_1 = 0 - $1_1 | 0;
                              $1_1 = $5_1 & $8_1 | 0;
                              if ($1_1 >>> 0 <= $6_1 >>> 0) {
                                break block1;
                              }
                              $3_1 = HEAP32[5684 >> 2] | 0;
                              if ($3_1) {
                                $7_1 = HEAP32[5676 >> 2] | 0;
                                $9_1 = $7_1 + $1_1 | 0;
                                if ($9_1 >>> 0 <= $7_1 >>> 0) {
                                  break block1;
                                }
                                if ($3_1 >>> 0 < $9_1 >>> 0) {
                                  break block1;
                                }
                              }
                              block20: {
                                if (!((HEAPU8[5688 >> 0] | 0) & 4 | 0)) {
                                  block18: {
                                    block21: {
                                      block19: {
                                        block17: {
                                          $3_1 = HEAP32[5268 >> 2] | 0;
                                          if ($3_1) {
                                            $0_1 = 5692;
                                            label5: while (1) {
                                              $7_1 = HEAP32[$0_1 >> 2] | 0;
                                              if ($3_1 >>> 0 >= $7_1 >>> 0) {
                                                if (($7_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $3_1 >>> 0) {
                                                  break block17;
                                                }
                                              }
                                              $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                              if ($0_1) {
                                                continue label5;
                                              }
                                              break label5;
                                            }
                                          }
                                          $2_1 = $23(0 | 0) | 0;
                                          if (($2_1 | 0) == (-1 | 0)) {
                                            break block18;
                                          }
                                          $5_1 = $1_1;
                                          $0_1 = HEAP32[5720 >> 2] | 0;
                                          $3_1 = $0_1 - 1 | 0;
                                          if ($3_1 & $2_1 | 0) {
                                            $5_1 = ($1_1 - $2_1 | 0) + (($2_1 + $3_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
                                          }
                                          if ($5_1 >>> 0 <= $6_1 >>> 0) {
                                            break block18;
                                          }
                                          $0_1 = HEAP32[5684 >> 2] | 0;
                                          if ($0_1) {
                                            $3_1 = HEAP32[5676 >> 2] | 0;
                                            $8_1 = $3_1 + $5_1 | 0;
                                            if ($8_1 >>> 0 <= $3_1 >>> 0) {
                                              break block18;
                                            }
                                            if ($0_1 >>> 0 < $8_1 >>> 0) {
                                              break block18;
                                            }
                                          }
                                          $0_1 = $23($5_1 | 0) | 0;
                                          if (($0_1 | 0) != ($2_1 | 0)) {
                                            break block19;
                                          }
                                          break block20;
                                        }
                                        $5_1 = ($5_1 - $2_1 | 0) & $8_1 | 0;
                                        $2_1 = $23($5_1 | 0) | 0;
                                        if (($2_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                                          break block21;
                                        }
                                        $0_1 = $2_1;
                                      }
                                      if (($0_1 | 0) == (-1 | 0)) {
                                        break block18;
                                      }
                                      if ($5_1 >>> 0 >= ($6_1 + 48 | 0) >>> 0) {
                                        $2_1 = $0_1;
                                        break block20;
                                      }
                                      $2_1 = HEAP32[5724 >> 2] | 0;
                                      $2_1 = ($2_1 + ($4_1 - $5_1 | 0) | 0) & (0 - $2_1 | 0) | 0;
                                      if (($23($2_1 | 0) | 0 | 0) == (-1 | 0)) {
                                        break block18;
                                      }
                                      $5_1 = $2_1 + $5_1 | 0;
                                      $2_1 = $0_1;
                                      break block20;
                                    }
                                    if (($2_1 | 0) != (-1 | 0)) {
                                      break block20;
                                    }
                                  }
                                  HEAP32[5688 >> 2] = HEAP32[5688 >> 2] | 0 | 4 | 0;
                                }
                                $2_1 = $23($1_1 | 0) | 0;
                                $0_1 = $23(0 | 0) | 0;
                                if (($2_1 | 0) == (-1 | 0)) {
                                  break block22;
                                }
                                if (($0_1 | 0) == (-1 | 0)) {
                                  break block22;
                                }
                                if ($0_1 >>> 0 <= $2_1 >>> 0) {
                                  break block22;
                                }
                                $5_1 = $0_1 - $2_1 | 0;
                                if ($5_1 >>> 0 <= ($6_1 + 40 | 0) >>> 0) {
                                  break block22;
                                }
                              }
                              $0_1 = (HEAP32[5676 >> 2] | 0) + $5_1 | 0;
                              HEAP32[5676 >> 2] = $0_1;
                              if ((HEAP32[5680 >> 2] | 0) >>> 0 < $0_1 >>> 0) {
                                HEAP32[5680 >> 2] = $0_1;
                              }
                              block23: {
                                $4_1 = HEAP32[5268 >> 2] | 0;
                                if ($4_1) {
                                  $0_1 = 5692;
                                  label6: while (1) {
                                    $1_1 = HEAP32[$0_1 >> 2] | 0;
                                    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                    if (($2_1 | 0) == ($1_1 + $3_1 | 0 | 0)) {
                                      break block23;
                                    }
                                    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                    if ($0_1) {
                                      continue label6;
                                    }
                                    break label6;
                                  }
                                  break block24;
                                }
                                $0_1 = HEAP32[5260 >> 2] | 0;
                                if (!($0_1 >>> 0 <= $2_1 >>> 0 ? $0_1 : 0)) {
                                  HEAP32[5260 >> 2] = $2_1;
                                }
                                $0_1 = 0;
                                HEAP32[5696 >> 2] = $5_1;
                                HEAP32[5692 >> 2] = $2_1;
                                HEAP32[5276 >> 2] = -1;
                                HEAP32[5280 >> 2] = HEAP32[5716 >> 2] | 0;
                                HEAP32[5704 >> 2] = 0;
                                label7: while (1) {
                                  $1_1 = $0_1 << 3 | 0;
                                  $3_1 = $1_1 + 5284 | 0;
                                  HEAP32[($1_1 + 5292 | 0) >> 2] = $3_1;
                                  HEAP32[($1_1 + 5296 | 0) >> 2] = $3_1;
                                  $0_1 = $0_1 + 1 | 0;
                                  if (($0_1 | 0) != (32 | 0)) {
                                    continue label7;
                                  }
                                  break label7;
                                }
                                $0_1 = $5_1 - 40 | 0;
                                $1_1 = ($2_1 + 8 | 0) & 7 | 0 ? (-8 - $2_1 | 0) & 7 | 0 : 0;
                                $3_1 = $0_1 - $1_1 | 0;
                                HEAP32[5256 >> 2] = $3_1;
                                $1_1 = $1_1 + $2_1 | 0;
                                HEAP32[5268 >> 2] = $1_1;
                                HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
                                HEAP32[(($0_1 + $2_1 | 0) + 4 | 0) >> 2] = 40;
                                HEAP32[5272 >> 2] = HEAP32[5732 >> 2] | 0;
                                break block25;
                              }
                              if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
                                break block24;
                              }
                              if ($1_1 >>> 0 > $4_1 >>> 0) {
                                break block24;
                              }
                              if ($2_1 >>> 0 <= $4_1 >>> 0) {
                                break block24;
                              }
                              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $5_1 | 0;
                              $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
                              $1_1 = $4_1 + $0_1 | 0;
                              HEAP32[5268 >> 2] = $1_1;
                              $2_1 = (HEAP32[5256 >> 2] | 0) + $5_1 | 0;
                              $0_1 = $2_1 - $0_1 | 0;
                              HEAP32[5256 >> 2] = $0_1;
                              HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                              HEAP32[(($2_1 + $4_1 | 0) + 4 | 0) >> 2] = 40;
                              HEAP32[5272 >> 2] = HEAP32[5732 >> 2] | 0;
                              break block25;
                            }
                            $3_1 = 0;
                            break block6;
                          }
                          $2_1 = 0;
                          break block13;
                        }
                        if ((HEAP32[5260 >> 2] | 0) >>> 0 > $2_1 >>> 0) {
                          HEAP32[5260 >> 2] = $2_1;
                        }
                        $1_1 = $2_1 + $5_1 | 0;
                        $0_1 = 5692;
                        block28: {
                          block27: {
                            block26: {
                              label8: while (1) {
                                if (($1_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
                                  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                  if ($0_1) {
                                    continue label8;
                                  }
                                  break block26;
                                }
                                break label8;
                              }
                              if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
                                break block27;
                              }
                            }
                            $0_1 = 5692;
                            label9: while (1) {
                              $1_1 = HEAP32[$0_1 >> 2] | 0;
                              if ($4_1 >>> 0 >= $1_1 >>> 0) {
                                $3_1 = $1_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
                                if ($3_1 >>> 0 > $4_1 >>> 0) {
                                  break block28;
                                }
                              }
                              $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                              continue label9;
                            }
                          }
                          HEAP32[$0_1 >> 2] = $2_1;
                          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $5_1 | 0;
                          $7_1 = $2_1 + (($2_1 + 8 | 0) & 7 | 0 ? (-8 - $2_1 | 0) & 7 | 0 : 0) | 0;
                          HEAP32[($7_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                          $5_1 = $1_1 + (($1_1 + 8 | 0) & 7 | 0 ? (-8 - $1_1 | 0) & 7 | 0 : 0) | 0;
                          $6_1 = $6_1 + $7_1 | 0;
                          $0_1 = $5_1 - $6_1 | 0;
                          if (($4_1 | 0) == ($5_1 | 0)) {
                            HEAP32[5268 >> 2] = $6_1;
                            $0_1 = (HEAP32[5256 >> 2] | 0) + $0_1 | 0;
                            HEAP32[5256 >> 2] = $0_1;
                            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                            break block29;
                          }
                          if ((HEAP32[5264 >> 2] | 0 | 0) == ($5_1 | 0)) {
                            HEAP32[5264 >> 2] = $6_1;
                            $0_1 = (HEAP32[5252 >> 2] | 0) + $0_1 | 0;
                            HEAP32[5252 >> 2] = $0_1;
                            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                            HEAP32[($0_1 + $6_1 | 0) >> 2] = $0_1;
                            break block29;
                          }
                          $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
                          if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
                            break block30;
                          }
                          $9_1 = $4_1 & -8 | 0;
                          if ($4_1 >>> 0 <= 255 >>> 0) {
                            $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                            $3_1 = $4_1 >>> 3 | 0;
                            $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                            if (($1_1 | 0) == ($2_1 | 0)) {
                              HEAP32[5244 >> 2] = (HEAP32[5244 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                              break block31;
                            }
                            HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
                            HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
                            break block31;
                          }
                          $8_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
                          $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                          if (($5_1 | 0) != ($2_1 | 0)) {
                            $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                            HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
                            HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
                            break block32;
                          }
                          $1_1 = $5_1 + 20 | 0;
                          $4_1 = HEAP32[$1_1 >> 2] | 0;
                          if (!$4_1) {
                            $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                            if (!$4_1) {
                              break block33;
                            }
                            $1_1 = $5_1 + 16 | 0;
                          }
                          label10: while (1) {
                            $3_1 = $1_1;
                            $2_1 = $4_1;
                            $1_1 = $2_1 + 20 | 0;
                            $4_1 = HEAP32[$1_1 >> 2] | 0;
                            if ($4_1) {
                              continue label10;
                            }
                            $1_1 = $2_1 + 16 | 0;
                            $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                            if ($4_1) {
                              continue label10;
                            }
                            break label10;
                          }
                          HEAP32[$3_1 >> 2] = 0;
                          break block32;
                        }
                        $0_1 = $5_1 - 40 | 0;
                        $1_1 = ($2_1 + 8 | 0) & 7 | 0 ? (-8 - $2_1 | 0) & 7 | 0 : 0;
                        $8_1 = $0_1 - $1_1 | 0;
                        HEAP32[5256 >> 2] = $8_1;
                        $1_1 = $1_1 + $2_1 | 0;
                        HEAP32[5268 >> 2] = $1_1;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 1 | 0;
                        HEAP32[(($0_1 + $2_1 | 0) + 4 | 0) >> 2] = 40;
                        HEAP32[5272 >> 2] = HEAP32[5732 >> 2] | 0;
                        $0_1 = ($3_1 + (($3_1 - 39 | 0) & 7 | 0 ? (39 - $3_1 | 0) & 7 | 0 : 0) | 0) - 47 | 0;
                        $1_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
                        HEAP32[($1_1 + 4 | 0) >> 2] = 27;
                        i64toi32_i32$2 = 5700;
                        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                        $1087 = i64toi32_i32$0;
                        i64toi32_i32$0 = $1_1;
                        HEAP32[($1_1 + 16 | 0) >> 2] = $1087;
                        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
                        i64toi32_i32$2 = 5692;
                        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                        $1089 = i64toi32_i32$1;
                        i64toi32_i32$1 = $1_1;
                        HEAP32[($1_1 + 8 | 0) >> 2] = $1089;
                        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
                        HEAP32[5700 >> 2] = $1_1 + 8 | 0;
                        HEAP32[5696 >> 2] = $5_1;
                        HEAP32[5692 >> 2] = $2_1;
                        HEAP32[5704 >> 2] = 0;
                        $0_1 = $1_1 + 24 | 0;
                        label11: while (1) {
                          HEAP32[($0_1 + 4 | 0) >> 2] = 7;
                          $2_1 = $0_1 + 8 | 0;
                          $0_1 = $0_1 + 4 | 0;
                          if ($2_1 >>> 0 < $3_1 >>> 0) {
                            continue label11;
                          }
                          break label11;
                        }
                        if (($1_1 | 0) == ($4_1 | 0)) {
                          break block25;
                        }
                        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -2 | 0;
                        $2_1 = $1_1 - $4_1 | 0;
                        HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
                        HEAP32[$1_1 >> 2] = $2_1;
                        if ($2_1 >>> 0 <= 255 >>> 0) {
                          $0_1 = ($2_1 & -8 | 0) + 5284 | 0;
                          block34: {
                            $1_1 = HEAP32[5244 >> 2] | 0;
                            $2_1 = 1 << ($2_1 >>> 3 | 0) | 0;
                            if (!($1_1 & $2_1 | 0)) {
                              HEAP32[5244 >> 2] = $1_1 | $2_1 | 0;
                              $1136 = $0_1;
                              break block34;
                            }
                            $1136 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                          }
                          $1_1 = $1136;
                          HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
                          HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
                          HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
                          HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
                          break block25;
                        }
                        $0_1 = 31;
                        if ($2_1 >>> 0 <= 16777215 >>> 0) {
                          $0_1 = $2_1 >>> 8 | 0;
                          $1152 = $0_1;
                          $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
                          $1_1 = $1152 << $0_1 | 0;
                          $1159 = $1_1;
                          $1_1 = (($1_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
                          $3_1 = $1159 << $1_1 | 0;
                          $1166 = $3_1;
                          $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
                          $0_1 = (($1166 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $1_1 | 0 | $3_1 | 0) | 0;
                          $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
                        }
                        HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
                        i64toi32_i32$1 = $4_1;
                        i64toi32_i32$0 = 0;
                        HEAP32[($4_1 + 16 | 0) >> 2] = 0;
                        HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
                        $1_1 = ($0_1 << 2 | 0) + 5548 | 0;
                        block36: {
                          block35: {
                            $3_1 = HEAP32[5248 >> 2] | 0;
                            $5_1 = 1 << $0_1 | 0;
                            if (!($3_1 & $5_1 | 0)) {
                              HEAP32[5248 >> 2] = $3_1 | $5_1 | 0;
                              HEAP32[$1_1 >> 2] = $4_1;
                              break block35;
                            }
                            $0_1 = $2_1 << (($0_1 | 0) != (31 | 0) ? 25 - ($0_1 >>> 1 | 0) | 0 : 0) | 0;
                            $3_1 = HEAP32[$1_1 >> 2] | 0;
                            label12: while (1) {
                              $1_1 = $3_1;
                              if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
                                break block36;
                              }
                              $3_1 = $0_1 >>> 29 | 0;
                              $0_1 = $0_1 << 1 | 0;
                              $5_1 = $1_1 + ($3_1 & 4 | 0) | 0;
                              $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                              if ($3_1) {
                                continue label12;
                              }
                              break label12;
                            }
                            HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
                          }
                          HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
                          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
                          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
                          break block25;
                        }
                        $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                        HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
                        HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
                        HEAP32[($4_1 + 24 | 0) >> 2] = 0;
                        HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
                        HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
                      }
                      $0_1 = HEAP32[5256 >> 2] | 0;
                      if ($0_1 >>> 0 <= $6_1 >>> 0) {
                        break block22;
                      }
                      $1_1 = $0_1 - $6_1 | 0;
                      HEAP32[5256 >> 2] = $1_1;
                      $0_1 = HEAP32[5268 >> 2] | 0;
                      $2_1 = $0_1 + $6_1 | 0;
                      HEAP32[5268 >> 2] = $2_1;
                      HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                      HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                      $0_1 = $0_1 + 8 | 0;
                      break block1;
                    }
                    HEAP32[5060 >> 2] = 48;
                    $0_1 = 0;
                    break block1;
                  }
                  $2_1 = 0;
                }
                if (!$8_1) {
                  break block31;
                }
                block37: {
                  $1_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
                  $3_1 = ($1_1 << 2 | 0) + 5548 | 0;
                  if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                    HEAP32[$3_1 >> 2] = $2_1;
                    if ($2_1) {
                      break block37;
                    }
                    HEAP32[5248 >> 2] = (HEAP32[5248 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $1_1 | 0) | 0) | 0;
                    break block31;
                  }
                  HEAP32[($8_1 + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
                  if (!$2_1) {
                    break block31;
                  }
                }
                HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
                $1_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if ($1_1) {
                  HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
                  HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
                }
                $1_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                if (!$1_1) {
                  break block31;
                }
                HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
                HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
              }
              $0_1 = $0_1 + $9_1 | 0;
              $5_1 = $5_1 + $9_1 | 0;
              $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            }
            HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($0_1 + $6_1 | 0) >> 2] = $0_1;
            if ($0_1 >>> 0 <= 255 >>> 0) {
              $1_1 = ($0_1 & -8 | 0) + 5284 | 0;
              block38: {
                $2_1 = HEAP32[5244 >> 2] | 0;
                $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
                if (!($2_1 & $0_1 | 0)) {
                  HEAP32[5244 >> 2] = $0_1 | $2_1 | 0;
                  $1354 = $1_1;
                  break block38;
                }
                $1354 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
              }
              $0_1 = $1354;
              HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
              HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
              break block29;
            }
            $4_1 = 31;
            if ($0_1 >>> 0 <= 16777215 >>> 0) {
              $1_1 = $0_1 >>> 8 | 0;
              $1370 = $1_1;
              $1_1 = (($1_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $2_1 = $1370 << $1_1 | 0;
              $1377 = $2_1;
              $2_1 = (($2_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $3_1 = $1377 << $2_1 | 0;
              $1384 = $3_1;
              $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $1_1 = (($1384 << $3_1 | 0) >>> 15 | 0) - ($1_1 | $2_1 | 0 | $3_1 | 0) | 0;
              $4_1 = ($1_1 << 1 | 0 | (($0_1 >>> ($1_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
            }
            HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
            i64toi32_i32$1 = $6_1;
            i64toi32_i32$0 = 0;
            HEAP32[($6_1 + 16 | 0) >> 2] = 0;
            HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
            $1_1 = ($4_1 << 2 | 0) + 5548 | 0;
            block40: {
              block39: {
                $2_1 = HEAP32[5248 >> 2] | 0;
                $3_1 = 1 << $4_1 | 0;
                if (!($2_1 & $3_1 | 0)) {
                  HEAP32[5248 >> 2] = $2_1 | $3_1 | 0;
                  HEAP32[$1_1 >> 2] = $6_1;
                  break block39;
                }
                $4_1 = $0_1 << (($4_1 | 0) != (31 | 0) ? 25 - ($4_1 >>> 1 | 0) | 0 : 0) | 0;
                $2_1 = HEAP32[$1_1 >> 2] | 0;
                label13: while (1) {
                  $1_1 = $2_1;
                  if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
                    break block40;
                  }
                  $2_1 = $4_1 >>> 29 | 0;
                  $4_1 = $4_1 << 1 | 0;
                  $3_1 = $1_1 + ($2_1 & 4 | 0) | 0;
                  $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                  if ($2_1) {
                    continue label13;
                  }
                  break label13;
                }
                HEAP32[($3_1 + 16 | 0) >> 2] = $6_1;
              }
              HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
              HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
              break block29;
            }
            $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
            HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = 0;
            HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
          }
          $0_1 = $7_1 + 8 | 0;
          break block1;
        }
        block41: {
          if (!$7_1) {
            break block41;
          }
          block42: {
            $0_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
            $1_1 = ($0_1 << 2 | 0) + 5548 | 0;
            if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
              HEAP32[$1_1 >> 2] = $2_1;
              if ($2_1) {
                break block42;
              }
              $8_1 = $8_1 & (__wasm_rotl_i32(-2 | 0, $0_1 | 0) | 0) | 0;
              HEAP32[5248 >> 2] = $8_1;
              break block41;
            }
            HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
            if (!$2_1) {
              break block41;
            }
          }
          HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
          $0_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($0_1) {
            HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
            HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
          }
          $0_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if (!$0_1) {
            break block41;
          }
          HEAP32[($2_1 + 20 | 0) >> 2] = $0_1;
          HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
        }
        block43: {
          if ($4_1 >>> 0 <= 15 >>> 0) {
            $0_1 = $4_1 + $6_1 | 0;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
            $0_1 = $0_1 + $3_1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
            break block43;
          }
          HEAP32[($3_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
          $2_1 = $3_1 + $6_1 | 0;
          HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
          HEAP32[($2_1 + $4_1 | 0) >> 2] = $4_1;
          if ($4_1 >>> 0 <= 255 >>> 0) {
            $0_1 = ($4_1 & -8 | 0) + 5284 | 0;
            block44: {
              $1_1 = HEAP32[5244 >> 2] | 0;
              $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
              if (!($1_1 & $4_1 | 0)) {
                HEAP32[5244 >> 2] = $1_1 | $4_1 | 0;
                $1564 = $0_1;
                break block44;
              }
              $1564 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            $1_1 = $1564;
            HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
            HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
            HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
            break block43;
          }
          $0_1 = 31;
          if ($4_1 >>> 0 <= 16777215 >>> 0) {
            $0_1 = $4_1 >>> 8 | 0;
            $1580 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $1_1 = $1580 << $0_1 | 0;
            $1587 = $1_1;
            $1_1 = (($1_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1587 << $1_1 | 0;
            $1594 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1594 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $1_1 | 0 | $5_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          HEAP32[($2_1 + 28 | 0) >> 2] = $0_1;
          i64toi32_i32$1 = $2_1;
          i64toi32_i32$0 = 0;
          HEAP32[($2_1 + 16 | 0) >> 2] = 0;
          HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          $1_1 = ($0_1 << 2 | 0) + 5548 | 0;
          block46: {
            block45: {
              $5_1 = 1 << $0_1 | 0;
              if (!($8_1 & $5_1 | 0)) {
                HEAP32[5248 >> 2] = $5_1 | $8_1 | 0;
                HEAP32[$1_1 >> 2] = $2_1;
                break block45;
              }
              $0_1 = $4_1 << (($0_1 | 0) != (31 | 0) ? 25 - ($0_1 >>> 1 | 0) | 0 : 0) | 0;
              $6_1 = HEAP32[$1_1 >> 2] | 0;
              label14: while (1) {
                $1_1 = $6_1;
                if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
                  break block46;
                }
                $5_1 = $0_1 >>> 29 | 0;
                $0_1 = $0_1 << 1 | 0;
                $5_1 = $1_1 + ($5_1 & 4 | 0) | 0;
                $6_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if ($6_1) {
                  continue label14;
                }
                break label14;
              }
              HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
            }
            HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + 12 | 0) >> 2] = $2_1;
            HEAP32[($2_1 + 8 | 0) >> 2] = $2_1;
            break block43;
          }
          $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
          HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
          HEAP32[($2_1 + 24 | 0) >> 2] = 0;
          HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $3_1 + 8 | 0;
        break block1;
      }
      block47: {
        if (!$9_1) {
          break block47;
        }
        block48: {
          $0_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
          $1_1 = ($0_1 << 2 | 0) + 5548 | 0;
          if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($2_1 | 0)) {
            HEAP32[$1_1 >> 2] = $3_1;
            if ($3_1) {
              break block48;
            }
            HEAP32[5248 >> 2] = $10_1 & (__wasm_rotl_i32(-2 | 0, $0_1 | 0) | 0) | 0;
            break block47;
          }
          HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
          if (!$3_1) {
            break block47;
          }
        }
        HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
        $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if ($0_1) {
          HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
          HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
        }
        $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if (!$0_1) {
          break block47;
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
        HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
      }
      block49: {
        if ($4_1 >>> 0 <= 15 >>> 0) {
          $0_1 = $4_1 + $6_1 | 0;
          HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
          $0_1 = $0_1 + $2_1 | 0;
          HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
          break block49;
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
        $3_1 = $2_1 + $6_1 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
        HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
        if ($7_1) {
          $0_1 = ($7_1 & -8 | 0) + 5284 | 0;
          $1_1 = HEAP32[5264 >> 2] | 0;
          block50: {
            $6_1 = 1 << ($7_1 >>> 3 | 0) | 0;
            if (!($6_1 & $5_1 | 0)) {
              HEAP32[5244 >> 2] = $5_1 | $6_1 | 0;
              $1771 = $0_1;
              break block50;
            }
            $1771 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          }
          $5_1 = $1771;
          HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
          HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
          HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
          HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
        }
        HEAP32[5264 >> 2] = $3_1;
        HEAP32[5252 >> 2] = $4_1;
      }
      $0_1 = $2_1 + 8 | 0;
    }
    global$0 = $11_1 + 16 | 0;
    return $0_1 | 0;
  }
  function $15($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0;
    block: {
      if (!$2_1) {
        break block;
      }
      $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $4_1 = $3_1 + $2_1 | 0;
      if ($4_1 >>> 0 < $3_1 >>> 0) {
        break block;
      }
      if ($4_1 >>> 0 > (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
        break block;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
      $7((HEAP32[$0_1 >> 2] | 0) + $3_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    }
  }
  function $16($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = +$1_1;
    var i64toi32_i32$3 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$2 = 0,
      $2_1 = 0,
      $2$hi = 0,
      $3_1 = 0,
      $5_1 = 0,
      $3$hi = 0,
      $22_1 = 0,
      $22$hi = 0,
      $4_1 = 0,
      $4$hi = 0,
      $28_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $31_1 = 0,
      $34_1 = 0,
      $6_1 = 0,
      $35_1 = 0,
      $32_1 = 0,
      $33_1 = 0,
      $33$hi = 0,
      $37_1 = 0,
      $51_1 = 0,
      $51$hi = 0,
      $55$hi = 0,
      $63_1 = 0,
      $63$hi = 0,
      $64_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    block: {
      wasm2js_scratch_store_f64(+$1_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = 1048576;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$0 = 2145386495;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 60;
        i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
          $28_1 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
          $28_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
        }
        $4_1 = $28_1;
        $4$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 4;
        i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = 0;
          $29_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
        } else {
          i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
          $29_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
        }
        i64toi32_i32$5 = $29_1;
        i64toi32_i32$1 = 1006632960;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $22_1 = i64toi32_i32$2;
        $22$hi = i64toi32_i32$4;
        break block;
      }
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 2146435072;
      i64toi32_i32$0 = 0;
      if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 60;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
          $30_1 = 0;
        } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
          $30_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
        }
        $4_1 = $30_1;
        $4$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$5 = 4;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $31_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
          $31_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
        }
        i64toi32_i32$4 = $31_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $22_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
        $22$hi = i64toi32_i32$3;
        break block;
      }
      i64toi32_i32$3 = $2$hi;
      if (!($2_1 | i64toi32_i32$3 | 0)) {
        i64toi32_i32$3 = 0;
        $22_1 = 0;
        $22$hi = i64toi32_i32$3;
        break block;
      }
      $32_1 = $5_1;
      i64toi32_i32$3 = $2$hi;
      $33_1 = $2_1;
      $33$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      $37_1 = Math_clz32($3_1) + 32 | 0;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $34_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      } else {
        i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $34_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$0 = 1;
      i64toi32_i32$5 = 0;
      $6_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($34_1);
      i64toi32_i32$3 = $33$hi;
      i64toi32_i32$4 = 0;
      $5($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $6_1 + 49 | 0 | 0);
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$3 = 65536;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
      $51_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
      $51$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 15372 - $6_1 | 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 48;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
        $35_1 = 0;
      } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
        $35_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $55$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $51$hi;
      i64toi32_i32$3 = $51_1;
      i64toi32_i32$4 = $55$hi;
      i64toi32_i32$0 = $35_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $22_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $22$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $22$hi;
    $2_1 = $22_1;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $0_1;
    HEAP32[i64toi32_i32$3 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $63$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$5 = $63$hi;
    i64toi32_i32$0 = $63_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = $0_1;
    HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
    HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
    global$0 = $5_1 + 16 | 0;
  }
  function $17($0_1, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$1 = 0,
      i64toi32_i32$0 = 0,
      $3_1 = 0,
      $2_1 = 0,
      i64toi32_i32$2 = 0,
      $11_1 = 0,
      $12_1 = 0,
      $14_1 = 0,
      $13_1 = 0,
      $21$hi = 0,
      i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
    $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $13_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
    HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    block: {
      i64toi32_i32$0 = $1$hi;
      if (!($1_1 | $1$hi | 0)) {
        break block;
      }
      i64toi32_i32$1 = $2_1 - $3_1 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$3 = $1_1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $11_1 = 1;
      } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
            $12_1 = 0;
          } else {
            $12_1 = 1;
          }
          $14_1 = $12_1;
        } else {
          $14_1 = 0;
        }
        $11_1 = $14_1;
      }
      if ($11_1) {
        break block;
      }
      i64toi32_i32$2 = $1$hi;
      $2_1 = $3_1 + $1_1 | 0;
    }
    HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  }
  function $18($0_1, $1_1, $2_1, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    var $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      i64toi32_i32$0 = 0,
      $86 = 0,
      $113 = 0;
    $6_1 = global$0 - 16 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
    $4_1 = global$0 - 160 | 0;
    global$0 = $4_1;
    HEAP32[($4_1 + 148 | 0) >> 2] = $1_1 ? $1_1 - 1 | 0 : 0;
    $5_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
    HEAP32[($4_1 + 144 | 0) >> 2] = $5_1;
    $0_1 = $12($4_1 | 0, 0 | 0, 144 | 0) | 0;
    HEAP32[($0_1 + 76 | 0) >> 2] = -1;
    HEAP32[($0_1 + 36 | 0) >> 2] = 3;
    HEAP32[($0_1 + 80 | 0) >> 2] = -1;
    HEAP32[($0_1 + 44 | 0) >> 2] = $0_1 + 159 | 0;
    HEAP32[($0_1 + 84 | 0) >> 2] = $0_1 + 144 | 0;
    block: {
      if (($1_1 | 0) < (0 | 0)) {
        HEAP32[5060 >> 2] = 61;
        break block;
      }
      HEAP8[$5_1 >> 0] = 0;
      $4_1 = 0;
      $1_1 = global$0 - 208 | 0;
      global$0 = $1_1;
      HEAP32[($1_1 + 204 | 0) >> 2] = $3_1;
      $3_1 = $1_1 + 160 | 0;
      $12($3_1 | 0, 0 | 0, 40 | 0) | 0;
      HEAP32[($1_1 + 200 | 0) >> 2] = HEAP32[($1_1 + 204 | 0) >> 2] | 0;
      block1: {
        if (($56(0 | 0, $2_1 | 0, $1_1 + 200 | 0 | 0, $1_1 + 80 | 0 | 0, $3_1 | 0) | 0 | 0) < (0 | 0)) {
          break block1;
        }
        $5_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0);
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
          HEAP32[$0_1 >> 2] = $3_1 & -33 | 0;
        }
        block4: {
          block3: {
            block2: {
              if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
                HEAP32[($0_1 + 48 | 0) >> 2] = 80;
                HEAP32[($0_1 + 28 | 0) >> 2] = 0;
                i64toi32_i32$0 = 0;
                HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
                $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
                HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
                break block2;
              }
              if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
                break block3;
              }
            }
            $86 = -1;
            if ($59($0_1 | 0) | 0) {
              break block4;
            }
          }
          $86 = $56($0_1 | 0, $2_1 | 0, $1_1 + 200 | 0 | 0, $1_1 + 80 | 0 | 0, $1_1 + 160 | 0 | 0) | 0;
        }
        $2_1 = $86;
        if ($4_1) {
          FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
          HEAP32[($0_1 + 48 | 0) >> 2] = 0;
          HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
          HEAP32[($0_1 + 28 | 0) >> 2] = 0;
          HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          i64toi32_i32$0 = 0;
          HEAP32[($0_1 + 16 | 0) >> 2] = 0;
          HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          $113 = 0;
        } else {
          $113 = $2_1;
        }
        HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | ($3_1 & 32 | 0) | 0;
        if (!$5_1) {
          break block1;
        }
      }
      global$0 = $1_1 + 208 | 0;
    }
    global$0 = $0_1 + 160 | 0;
    global$0 = $6_1 + 16 | 0;
  }
  function $19($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $41_1 = 0;
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) ^ (HEAPU8[((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) ^ (HEAPU8[((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = (HEAPU8[($0_1 + 3 | 0) >> 0] | 0) ^ (HEAPU8[((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[$0_1 >> 0] = (HEAPU8[$0_1 >> 0] | 0) ^ ($2_1 ^ (HEAPU8[((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) + 1856 | 0) >> 0] | 0) | 0) | 0;
    $41_1 = $1_1;
    $1_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$41_1 >> 0] = (($1_1 >>> 7 | 0) & 27 | 0) ^ ($1_1 << 1 | 0) | 0;
    $1_1 = (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) ^ (HEAPU8[$0_1 >> 0] | 0) | 0;
    HEAP8[($0_1 + 4 | 0) >> 0] = $1_1;
    $2_1 = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) ^ (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 5 | 0) >> 0] = $2_1;
    $3_1 = (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) ^ (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 6 | 0) >> 0] = $3_1;
    $4_1 = (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) ^ (HEAPU8[($0_1 + 3 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 7 | 0) >> 0] = $4_1;
    $1_1 = (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) ^ $1_1 | 0;
    HEAP8[($0_1 + 8 | 0) >> 0] = $1_1;
    $2_1 = (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) ^ $2_1 | 0;
    HEAP8[($0_1 + 9 | 0) >> 0] = $2_1;
    $3_1 = (HEAPU8[($0_1 + 10 | 0) >> 0] | 0) ^ $3_1 | 0;
    HEAP8[($0_1 + 10 | 0) >> 0] = $3_1;
    $4_1 = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) ^ $4_1 | 0;
    HEAP8[($0_1 + 11 | 0) >> 0] = $4_1;
    $1_1 = (HEAPU8[($0_1 + 12 | 0) >> 0] | 0) ^ $1_1 | 0;
    HEAP8[($0_1 + 12 | 0) >> 0] = $1_1;
    $2_1 = (HEAPU8[($0_1 + 13 | 0) >> 0] | 0) ^ $2_1 | 0;
    HEAP8[($0_1 + 13 | 0) >> 0] = $2_1;
    $3_1 = (HEAPU8[($0_1 + 14 | 0) >> 0] | 0) ^ $3_1 | 0;
    HEAP8[($0_1 + 14 | 0) >> 0] = $3_1;
    $4_1 = (HEAPU8[($0_1 + 15 | 0) >> 0] | 0) ^ $4_1 | 0;
    HEAP8[($0_1 + 15 | 0) >> 0] = $4_1;
    $1_1 = (HEAPU8[($0_1 + 16 | 0) >> 0] | 0) ^ (HEAPU8[(($1_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 16 | 0) >> 0] = $1_1;
    $2_1 = (HEAPU8[($0_1 + 17 | 0) >> 0] | 0) ^ (HEAPU8[(($2_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 17 | 0) >> 0] = $2_1;
    $3_1 = (HEAPU8[($0_1 + 18 | 0) >> 0] | 0) ^ (HEAPU8[(($3_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 18 | 0) >> 0] = $3_1;
    $4_1 = (HEAPU8[($0_1 + 19 | 0) >> 0] | 0) ^ (HEAPU8[(($4_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
    HEAP8[($0_1 + 19 | 0) >> 0] = $4_1;
    $1_1 = (HEAPU8[($0_1 + 20 | 0) >> 0] | 0) ^ $1_1 | 0;
    HEAP8[($0_1 + 20 | 0) >> 0] = $1_1;
    $2_1 = (HEAPU8[($0_1 + 21 | 0) >> 0] | 0) ^ $2_1 | 0;
    HEAP8[($0_1 + 21 | 0) >> 0] = $2_1;
    $3_1 = (HEAPU8[($0_1 + 22 | 0) >> 0] | 0) ^ $3_1 | 0;
    HEAP8[($0_1 + 22 | 0) >> 0] = $3_1;
    $4_1 = (HEAPU8[($0_1 + 23 | 0) >> 0] | 0) ^ $4_1 | 0;
    HEAP8[($0_1 + 23 | 0) >> 0] = $4_1;
    $1_1 = (HEAPU8[($0_1 + 24 | 0) >> 0] | 0) ^ $1_1 | 0;
    HEAP8[($0_1 + 24 | 0) >> 0] = $1_1;
    $2_1 = (HEAPU8[($0_1 + 25 | 0) >> 0] | 0) ^ $2_1 | 0;
    HEAP8[($0_1 + 25 | 0) >> 0] = $2_1;
    $3_1 = (HEAPU8[($0_1 + 26 | 0) >> 0] | 0) ^ $3_1 | 0;
    HEAP8[($0_1 + 26 | 0) >> 0] = $3_1;
    $4_1 = (HEAPU8[($0_1 + 27 | 0) >> 0] | 0) ^ $4_1 | 0;
    HEAP8[($0_1 + 27 | 0) >> 0] = $4_1;
    HEAP8[($0_1 + 28 | 0) >> 0] = (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) ^ $1_1 | 0;
    HEAP8[($0_1 + 29 | 0) >> 0] = (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) ^ $2_1 | 0;
    HEAP8[($0_1 + 30 | 0) >> 0] = (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) ^ $3_1 | 0;
    HEAP8[($0_1 + 31 | 0) >> 0] = (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) ^ $4_1 | 0;
  }
  function $20($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      $4$hi = 0,
      $19_1 = 0,
      $20_1 = 0,
      $21_1 = 0,
      $22_1 = 0,
      $10$hi = 0,
      $17$hi = 0,
      $18_1 = 0,
      $18$hi = 0,
      $4_1 = 0,
      $23$hi = 0;
    block: {
      if ($3_1 & 64 | 0) {
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = 0;
        $10$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$3 = $3_1 + -64 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $19_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        $1_1 = $19_1;
        $1$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $2_1 = 0;
        $2$hi = i64toi32_i32$1;
        break block;
      }
      if (!$3_1) {
        break block;
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = 0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$3 = 64 - $3_1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $20_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $18_1 = $20_1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = 0;
      $4_1 = $3_1;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $23$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$3 = $21_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $1$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $2_1 = $22_1;
      $2$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  function $21($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $5$hi = 0,
      $6$hi = 0,
      $35_1 = 0,
      $36_1 = 0,
      $37_1 = 0,
      $38_1 = 0,
      $40_1 = 0,
      $41_1 = 0,
      $42_1 = 0,
      $43_1 = 0,
      $44_1 = 0,
      $8_1 = 0,
      $12_1 = 0,
      $17_1 = 0,
      $21_1 = 0,
      $27_1 = 0,
      $27$hi = 0,
      $30_1 = 0,
      $30$hi = 0,
      $39_1 = 0,
      $49_1 = 0,
      $49$hi = 0,
      $52_1 = 0,
      $52$hi = 0,
      $57_1 = 0,
      $67_1 = 0,
      $67$hi = 0,
      $70_1 = 0,
      $70$hi = 0;
    $4_1 = 1;
    block: {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$0 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $5$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
        break block;
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$2 = -1;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $6$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$2 = 0;
      $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
        break block;
      }
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $27$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $30$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27_1;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$1 = $30_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
        return 0 | 0;
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
        $35_1 = 1;
      } else {
        if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
            $36_1 = 0;
          } else {
            $36_1 = 1;
          }
          $37_1 = $36_1;
        } else {
          $37_1 = 0;
        }
        $35_1 = $37_1;
      }
      if ($35_1) {
        $4_1 = -1;
        i64toi32_i32$2 = $0$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $0$hi;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$0 = $2_1;
        $39_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$3 = $3_1;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
          $38_1 = 1;
        } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $40_1 = 0;
            } else {
              $40_1 = 1;
            }
            $41_1 = $40_1;
          } else {
            $41_1 = 0;
          }
          $38_1 = $41_1;
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$2 = $3_1;
        if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $39_1 : $38_1) {
          break block;
        }
        i64toi32_i32$3 = $0$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $0$hi;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
        $49_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
        $49$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
        $52_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
        $52$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $49$hi;
        i64toi32_i32$0 = $49_1;
        i64toi32_i32$3 = $52$hi;
        i64toi32_i32$1 = $52_1;
        i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
      }
      $4_1 = -1;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $57_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3_1;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $42_1 = 1;
      } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $43_1 = 0;
          } else {
            $43_1 = 1;
          }
          $44_1 = $43_1;
        } else {
          $44_1 = 0;
        }
        $42_1 = $44_1;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$2 = $3_1;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $57_1 : $42_1) {
        break block;
      }
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
      $67_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
      $67$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
      $70_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $70$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $67$hi;
      i64toi32_i32$0 = $67_1;
      i64toi32_i32$3 = $70$hi;
      i64toi32_i32$1 = $70_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
    }
    return $4_1 | 0;
  }
  function $22($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$1 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      $2_1 = 0,
      $10_1 = 0,
      $10$hi = 0,
      $18_1 = 0,
      $7_1 = 0,
      $13_1 = 0,
      $20_1 = 0,
      $20$hi = 0,
      $24$hi = 0,
      $3_1 = 0,
      $3$hi = 0;
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $7_1 = $0_1;
    block: {
      if (!$1_1) {
        i64toi32_i32$0 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$0;
        break block;
      }
      i64toi32_i32$0 = 0;
      $13_1 = $1_1;
      $1_1 = Math_clz32($1_1);
      i64toi32_i32$1 = 0;
      $5($2_1 | 0, $13_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
      $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 16414 - $1_1 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $18_1 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $18_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$0 = $24$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$5;
      $10$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $7_1;
    HEAP32[i64toi32_i32$5 >> 2] = $10_1;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $0_1;
    HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $3_1;
    HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
    global$0 = $2_1 + 16 | 0;
  }
  function $23($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      $2_1 = 0;
    $1_1 = HEAP32[4496 >> 2] | 0;
    $2_1 = ($0_1 + 7 | 0) & -8 | 0;
    $0_1 = $1_1 + $2_1 | 0;
    block: {
      if ($0_1 >>> 0 <= $1_1 >>> 0 ? $2_1 : 0) {
        break block;
      }
      if ($0_1 >>> 0 > (__wasm_memory_size() << 16 | 0) >>> 0) {
        if (!(fimport$8($0_1 | 0) | 0)) {
          break block;
        }
      }
      HEAP32[4496 >> 2] = $0_1;
      return $1_1 | 0;
    }
    HEAP32[5060 >> 2] = 48;
    return -1 | 0;
  }
  function $24($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0;
    if ($1_1) {
      label: while (1) {
        $4_1 = $2_1 + ($3_1 << 1 | 0) | 0;
        $5_1 = $0_1 + $3_1 | 0;
        HEAP8[$4_1 >> 0] = HEAPU8[(((HEAPU8[$5_1 >> 0] | 0) >>> 4 | 0) + 1664 | 0) >> 0] | 0;
        HEAP8[($4_1 + 1 | 0) >> 0] = HEAPU8[(((HEAPU8[$5_1 >> 0] | 0) & 15 | 0) + 1664 | 0) >> 0] | 0;
        $3_1 = $3_1 + 1 | 0;
        if (($3_1 | 0) != ($1_1 | 0)) {
          continue label;
        }
        break label;
      }
    }
    HEAP8[($2_1 + ($1_1 << 1 | 0) | 0) >> 0] = 0;
  }
  function $25($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $5_1 = 0,
      $4_1 = 0,
      $7_1 = 0,
      $6_1 = 0,
      $8_1 = 0,
      $117 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP8[($5_1 + 8 | 0) >> 0] = $2_1;
    HEAP8[($5_1 + 9 | 0) >> 0] = $2_1 >>> 8 | 0;
    HEAP8[($5_1 + 10 | 0) >> 0] = $2_1 >>> 16 | 0;
    HEAP8[($5_1 + 11 | 0) >> 0] = $2_1 >>> 24 | 0;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP8[($5_1 + 12 | 0) >> 0] = $3_1;
    HEAP8[($5_1 + 13 | 0) >> 0] = $3_1 >>> 8 | 0;
    HEAP8[($5_1 + 14 | 0) >> 0] = $3_1 >>> 16 | 0;
    HEAP8[($5_1 + 15 | 0) >> 0] = $3_1 >>> 24 | 0;
    $4_1 = ($2_1 >>> 3 | 0) & 63 | 0;
    $6_1 = ($4_1 >>> 0 < 56 >>> 0 ? 56 : 120) - $4_1 | 0;
    $7_1 = $6_1 << 3 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    HEAP32[$0_1 >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + (($6_1 >>> 29 | 0) + ($2_1 >>> 0 < $7_1 >>> 0) | 0) | 0;
    $7_1 = 0;
    block: {
      $2_1 = 64 - $4_1 | 0;
      if ($6_1 >>> 0 < $2_1 >>> 0) {
        $2_1 = 0;
        break block;
      }
      $3_1 = $0_1 + 24 | 0;
      $7($3_1 + $4_1 | 0 | 0, 3408 | 0, $2_1 | 0) | 0;
      $8_1 = $0_1 + 8 | 0;
      $30($8_1 | 0, $3_1 | 0);
      $3_1 = 128 - $4_1 | 0;
      $4_1 = 0;
      if ($3_1 >>> 0 > $6_1 >>> 0) {
        break block;
      }
      label: while (1) {
        $30($8_1 | 0, $2_1 + 3408 | 0 | 0);
        $2_1 = $3_1;
        $3_1 = $2_1 - -64 | 0;
        if ($3_1 >>> 0 <= $6_1 >>> 0) {
          continue label;
        }
        break label;
      }
    }
    $7(($0_1 + $4_1 | 0) + 24 | 0 | 0, $2_1 + 3408 | 0 | 0, $6_1 - $2_1 | 0 | 0) | 0;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = $2_1 - -64 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($2_1 >>> 0 > -65 >>> 0) | 0;
    $2_1 = ($2_1 >>> 3 | 0) & 63 | 0;
    if ($2_1 >>> 0 >= 56 >>> 0) {
      $3_1 = $0_1 + 24 | 0;
      $7_1 = 64 - $2_1 | 0;
      $7($3_1 + $2_1 | 0 | 0, $5_1 + 8 | 0 | 0, $7_1 | 0) | 0;
      $30($0_1 + 8 | 0 | 0, $3_1 | 0);
      $117 = 0;
    } else {
      $117 = $2_1;
    }
    $7(($117 + $0_1 | 0) + 24 | 0 | 0, ($5_1 + 8 | 0) + $7_1 | 0 | 0, 8 - $7_1 | 0 | 0) | 0;
    HEAP8[$1_1 >> 0] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP8[($1_1 + 1 | 0) >> 0] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 8 | 0;
    HEAP8[($1_1 + 2 | 0) >> 0] = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
    HEAP8[($1_1 + 3 | 0) >> 0] = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
    HEAP8[($1_1 + 4 | 0) >> 0] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    HEAP8[($1_1 + 5 | 0) >> 0] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 8 | 0;
    HEAP8[($1_1 + 6 | 0) >> 0] = HEAPU16[($0_1 + 14 | 0) >> 1] | 0;
    HEAP8[($1_1 + 7 | 0) >> 0] = HEAPU8[($0_1 + 15 | 0) >> 0] | 0;
    HEAP8[($1_1 + 8 | 0) >> 0] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    HEAP8[($1_1 + 9 | 0) >> 0] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 8 | 0;
    HEAP8[($1_1 + 10 | 0) >> 0] = HEAPU16[($0_1 + 18 | 0) >> 1] | 0;
    HEAP8[($1_1 + 11 | 0) >> 0] = HEAPU8[($0_1 + 19 | 0) >> 0] | 0;
    HEAP8[($1_1 + 12 | 0) >> 0] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP8[($1_1 + 13 | 0) >> 0] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 8 | 0;
    HEAP8[($1_1 + 14 | 0) >> 0] = HEAPU16[($0_1 + 22 | 0) >> 1] | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = HEAPU8[($0_1 + 23 | 0) >> 0] | 0;
    global$0 = $5_1 + 16 | 0;
  }
  function $26($0_1, $0$hi, $1_1) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $2_1 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$3 = 0,
      $5_1 = 0,
      $5$hi = 0,
      $3_1 = 0,
      $16_1 = 0,
      $16$hi = 0,
      $4_1 = 0;
    block: {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        i64toi32_i32$2 = i64toi32_i32$0;
        $5_1 = $0_1;
        $5$hi = i64toi32_i32$2;
        break block;
      }
      label: while (1) {
        $1_1 = $1_1 - 1 | 0;
        i64toi32_i32$2 = $0$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $5_1 = i64toi32_i32$0;
        $5$hi = i64toi32_i32$2;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $16_1 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $0$hi;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$1 = $16_1;
        i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$3 = 9;
        i64toi32_i32$1 = -1;
        $2_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
        i64toi32_i32$2 = $5$hi;
        $0_1 = $5_1;
        $0$hi = i64toi32_i32$2;
        if ($2_1) {
          continue label;
        }
        break label;
      }
    }
    i64toi32_i32$2 = $5$hi;
    $2_1 = $5_1;
    if ($2_1) {
      label1: while (1) {
        $1_1 = $1_1 - 1 | 0;
        $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
        HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
        $4_1 = $2_1 >>> 0 > 9 >>> 0;
        $2_1 = $3_1;
        if ($4_1) {
          continue label1;
        }
        break label1;
      }
    }
    return $1_1 | 0;
  }
  function $27($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      $12_1 = 0,
      $3_1 = 0,
      $5_1 = 0,
      $5$hi = 0,
      $8$hi = 0;
    $3_1 = $0_1;
    i64toi32_i32$0 = 0;
    $5_1 = $1_1;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $12_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $12_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $28($3_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0;
  }
  function $28($0_1, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var $2_1 = 0,
      $3_1 = 0,
      i64toi32_i32$4 = 0,
      $4_1 = 0,
      i64toi32_i32$0 = 0,
      $5_1 = 0,
      $6_1 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      $13_1 = 0,
      $14_1 = 0,
      $15_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    block: {
      block1: {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 127;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
          $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          $2_1 = $3_1 + 1 | 0;
          if (!$2_1) {
            break block;
          }
          if ($2_1 >>> 0 > (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
            break block;
          }
          HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$0;
          HEAP8[((HEAP32[$0_1 >> 2] | 0) + $3_1 | 0) >> 0] = $1_1;
          break block1;
        }
        i64toi32_i32$2 = $1$hi;
        $3_1 = $1_1;
        $2_1 = $3_1 >>> 7 | 0;
        block5: {
          block4: {
            block2: {
              block3: {
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = 32;
                i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$0 = 0;
                  $13_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                } else {
                  i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                  $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                }
                $5_1 = $13_1;
                if (!$5_1) {
                  if ($3_1 >>> 0 < 128 >>> 0) {
                    $2_1 = $3_1;
                    break block2;
                  }
                  HEAP8[($4_1 + 6 | 0) >> 0] = $3_1 | 128 | 0;
                  if ($3_1 >>> 0 < 16384 >>> 0) {
                    $6_1 = 1;
                    break block2;
                  }
                  HEAP8[($4_1 + 7 | 0) >> 0] = $2_1 | 128 | 0;
                  i64toi32_i32$0 = $1$hi;
                  i64toi32_i32$2 = $1_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$1 = 14;
                  i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                    i64toi32_i32$3 = 0;
                    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                  } else {
                    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                  }
                  $2_1 = $14_1;
                  $6_1 = 2;
                  if ($3_1 >>> 0 < 2097152 >>> 0) {
                    break block2;
                  }
                  HEAP8[($4_1 + 8 | 0) >> 0] = $2_1 | 128 | 0;
                  i64toi32_i32$3 = $1$hi;
                  i64toi32_i32$0 = $1_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = 21;
                  i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $15_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                  } else {
                    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                    $15_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                  }
                  $2_1 = $15_1;
                  $6_1 = 3;
                  if ($3_1 >>> 0 < 268435456 >>> 0) {
                    break block2;
                  }
                  HEAP8[($4_1 + 9 | 0) >> 0] = $2_1 | 128 | 0;
                  $2_1 = $3_1 >>> 28 | 0;
                  break block3;
                }
                HEAP8[($4_1 + 7 | 0) >> 0] = $2_1 | 128 | 0;
                HEAP8[($4_1 + 6 | 0) >> 0] = $3_1 | 128 | 0;
                HEAP8[($4_1 + 9 | 0) >> 0] = $3_1 >>> 21 | 0 | 128 | 0;
                HEAP8[($4_1 + 8 | 0) >> 0] = $3_1 >>> 14 | 0 | 128 | 0;
                $6_1 = 4;
                $2_1 = ($5_1 << 4 | 0) & 112 | 0 | ($3_1 >>> 28 | 0) | 0;
                if ($5_1 >>> 0 < 8 >>> 0) {
                  break block3;
                }
                $5_1 = $5_1 >>> 3 | 0;
                label: while (1) {
                  HEAP8[(($4_1 + 6 | 0) + $6_1 | 0) >> 0] = $2_1 | 128 | 0;
                  $2_1 = $5_1 & 127 | 0;
                  $6_1 = $6_1 + 1 | 0;
                  $3_1 = $5_1 >>> 0 < 128 >>> 0;
                  $5_1 = $5_1 >>> 7 | 0;
                  if (!$3_1) {
                    continue label;
                  }
                  break label;
                }
                break block4;
              }
              HEAP8[($4_1 + 10 | 0) >> 0] = $2_1;
              $6_1 = 5;
              break block5;
            }
            $2_1 = $2_1 & 127 | 0;
          }
          HEAP8[(($4_1 + 6 | 0) + $6_1 | 0) >> 0] = $2_1;
          $5_1 = 1;
          $6_1 = $6_1 + 1 | 0;
          if (!$6_1) {
            break block;
          }
        }
        $5_1 = 0;
        $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 + $6_1 | 0;
        if ($3_1 >>> 0 < $2_1 >>> 0) {
          break block;
        }
        if ($3_1 >>> 0 > (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
          break block;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
        $7((HEAP32[$0_1 >> 2] | 0) + $2_1 | 0 | 0, $4_1 + 6 | 0 | 0, $6_1 | 0) | 0;
      }
      $5_1 = 1;
    }
    global$0 = $4_1 + 16 | 0;
    return $5_1 | 0;
  }
  function $29($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = $14($0_1 + 12 | 0 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$1_1 >> 2] = $1_1 + 12 | 0;
    return $1_1 | 0;
  }
  function $30($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $8_1 = 0,
      $7_1 = 0,
      $25_1 = 0,
      $9_1 = 0,
      $11_1 = 0,
      $12_1 = 0,
      $13_1 = 0,
      $14_1 = 0,
      $15_1 = 0,
      $16_1 = 0,
      $17_1 = 0,
      $18_1 = 0,
      $19_1 = 0,
      $20_1 = 0,
      $21_1 = 0,
      $22_1 = 0,
      $23_1 = 0,
      $24_1 = 0,
      $10_1 = 0,
      $26_1 = 0,
      $27_1 = 0,
      $28_1 = 0,
      $80 = 0,
      $85 = 0,
      $90 = 0,
      $95 = 0,
      $100 = 0,
      $105 = 0,
      $110 = 0,
      $115 = 0,
      $120 = 0,
      $121 = 0,
      $142 = 0,
      $167 = 0,
      $214 = 0,
      $239 = 0,
      $286 = 0,
      $311 = 0,
      $358 = 0,
      $365 = 0,
      $399 = 0,
      $431 = 0,
      $441 = 0,
      $498 = 0,
      $508 = 0,
      $566 = 0,
      $576 = 0,
      $631 = 0,
      $636 = 0,
      $694 = 0,
      $699 = 0,
      $750 = 0,
      $803 = 0,
      $856 = 0,
      $910 = 0,
      $915 = 0,
      $967 = 0,
      $972 = 0,
      $1024 = 0,
      $1029 = 0;
    $5_1 = global$0 - 256 | 0;
    global$0 = $5_1;
    $10_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    label: while (1) {
      HEAP32[($5_1 + ($3_1 << 2 | 0) | 0) >> 2] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + ($2_1 | 1 | 0) | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + ($2_1 | 2 | 0) | 0) >> 0] | 0) << 16 | 0) | 0 | ((HEAPU8[($1_1 + ($2_1 | 3 | 0) | 0) >> 0] | 0) << 24 | 0) | 0;
      $2_1 = $2_1 + 4 | 0;
      $7_1 = ($3_1 | 0) != (15 | 0);
      $3_1 = $3_1 + 1 | 0;
      if ($7_1) {
        continue label;
      }
      break label;
    }
    $26_1 = HEAP32[3724 >> 2] | 0;
    $27_1 = HEAP32[3720 >> 2] | 0;
    $28_1 = HEAP32[3716 >> 2] | 0;
    $80 = $4_1;
    $7_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    $85 = $7_1 + (HEAP32[3712 >> 2] | 0) | 0;
    $11_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    $90 = $11_1 + (HEAP32[3696 >> 2] | 0) | 0;
    $12_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
    $95 = $12_1 + (HEAP32[3680 >> 2] | 0) | 0;
    $13_1 = HEAP32[$5_1 >> 2] | 0;
    $100 = $13_1 + (HEAP32[3664 >> 2] | 0) | 0;
    $14_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    $105 = $14_1 + (HEAP32[3648 >> 2] | 0) | 0;
    $15_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    $110 = $15_1 + (HEAP32[3632 >> 2] | 0) | 0;
    $16_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $115 = $16_1 + (HEAP32[3616 >> 2] | 0) | 0;
    $17_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    $120 = $17_1 + (HEAP32[3600 >> 2] | 0) | 0;
    $121 = HEAP32[3488 >> 2] | 0;
    $1_1 = (__wasm_rotl_i32((HEAP32[3472 >> 2] | 0) + (((($6_1 & $9_1 | 0) + $4_1 | 0) + ($10_1 & ($6_1 ^ -1 | 0) | 0) | 0) + $13_1 | 0) | 0 | 0, 7 | 0) | 0) + $6_1 | 0;
    $142 = $121 + ($7_1 + $1_1 | 0) | 0;
    $2_1 = (__wasm_rotl_i32((((HEAP32[3476 >> 2] | 0) + ($10_1 + $16_1 | 0) | 0) + ($9_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $6_1 | 0) | 0 | 0, 12 | 0) | 0) + $1_1 | 0;
    $18_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $167 = (HEAP32[3484 >> 2] | 0) + ($18_1 + $6_1 | 0) | 0;
    $19_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    $3_1 = $2_1 + (__wasm_rotl_i32((((HEAP32[3480 >> 2] | 0) + ($19_1 + $9_1 | 0) | 0) + ($6_1 & ($2_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $2_1 | 0) | 0 | 0, 17 | 0) | 0) | 0;
    $1_1 = (__wasm_rotl_i32(($167 + ($1_1 & ($3_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $3_1 | 0) | 0 | 0, 22 | 0) | 0) + $3_1 | 0;
    $4_1 = (__wasm_rotl_i32(($142 + ($2_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $3_1 | 0) | 0 | 0, 7 | 0) | 0) + $1_1 | 0;
    $214 = $4_1 + ((HEAP32[3504 >> 2] | 0) + $11_1 | 0) | 0;
    $2_1 = (__wasm_rotl_i32(((((HEAP32[3492 >> 2] | 0) + $17_1 | 0) + $2_1 | 0) + ($3_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $4_1 | 0) | 0 | 0, 12 | 0) | 0) + $4_1 | 0;
    $20_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    $239 = ($20_1 + (HEAP32[3500 >> 2] | 0) | 0) + $1_1 | 0;
    $21_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    $1_1 = $2_1 + (__wasm_rotl_i32(((($21_1 + (HEAP32[3496 >> 2] | 0) | 0) + $3_1 | 0) + ($1_1 & ($2_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 17 | 0) | 0) | 0;
    $3_1 = (__wasm_rotl_i32(($239 + ($4_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $2_1 | 0) | 0 | 0, 22 | 0) | 0) + $1_1 | 0;
    $4_1 = (__wasm_rotl_i32(($214 + ($2_1 & ($3_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $3_1 | 0) | 0 | 0, 7 | 0) | 0) + $3_1 | 0;
    $286 = $4_1 + ((HEAP32[3520 >> 2] | 0) + $12_1 | 0) | 0;
    $2_1 = (__wasm_rotl_i32(((((HEAP32[3508 >> 2] | 0) + $14_1 | 0) + $2_1 | 0) + ($1_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($3_1 & $4_1 | 0) | 0 | 0, 12 | 0) | 0) + $4_1 | 0;
    $22_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $311 = ($22_1 + (HEAP32[3516 >> 2] | 0) | 0) + $3_1 | 0;
    $23_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    $1_1 = $2_1 + (__wasm_rotl_i32(((($23_1 + (HEAP32[3512 >> 2] | 0) | 0) + $1_1 | 0) + ($3_1 & ($2_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 17 | 0) | 0) | 0;
    $3_1 = (__wasm_rotl_i32(($311 + ($4_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $2_1 | 0) | 0 | 0, 22 | 0) | 0) + $1_1 | 0;
    $4_1 = (__wasm_rotl_i32(($286 + ($2_1 & ($3_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $3_1 | 0) | 0 | 0, 7 | 0) | 0) + $3_1 | 0;
    $358 = $4_1 + ((HEAP32[3536 >> 2] | 0) + $16_1 | 0) | 0;
    $24_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
    $365 = ($24_1 + (HEAP32[3528 >> 2] | 0) | 0) + $1_1 | 0;
    $1_1 = (__wasm_rotl_i32(((((HEAP32[3524 >> 2] | 0) + $15_1 | 0) + $2_1 | 0) + ($1_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($3_1 & $4_1 | 0) | 0 | 0, 12 | 0) | 0) + $4_1 | 0;
    $8_1 = $1_1 ^ -1 | 0;
    $2_1 = (__wasm_rotl_i32(($365 + ($3_1 & $8_1 | 0) | 0) + ($1_1 & $4_1 | 0) | 0 | 0, 17 | 0) | 0) + $1_1 | 0;
    $399 = $358 + ($2_1 & $8_1 | 0) | 0;
    $8_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
    $25_1 = $2_1 ^ -1 | 0;
    $3_1 = (__wasm_rotl_i32(((($8_1 + (HEAP32[3532 >> 2] | 0) | 0) + $3_1 | 0) + ($4_1 & $25_1 | 0) | 0) + ($1_1 & $2_1 | 0) | 0 | 0, 22 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32($399 + ($3_1 & $1_1 | 0) | 0 | 0, 5 | 0) | 0) + $3_1 | 0;
    $431 = $4_1 + ((HEAP32[3552 >> 2] | 0) + $17_1 | 0) | 0;
    $441 = (((HEAP32[3544 >> 2] | 0) + $22_1 | 0) + $2_1 | 0) + ($4_1 & ($3_1 ^ -1 | 0) | 0) | 0;
    $1_1 = (__wasm_rotl_i32(((((HEAP32[3540 >> 2] | 0) + $21_1 | 0) + $1_1 | 0) + ($3_1 & $25_1 | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 9 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32($441 + ($1_1 & $3_1 | 0) | 0 | 0, 14 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32(((((HEAP32[3548 >> 2] | 0) + $13_1 | 0) + $3_1 | 0) + ($1_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 20 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($431 + ($2_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($3_1 & $1_1 | 0) | 0 | 0, 5 | 0) | 0) + $3_1 | 0;
    $498 = $4_1 + ((HEAP32[3568 >> 2] | 0) + $14_1 | 0) | 0;
    $508 = (((HEAP32[3560 >> 2] | 0) + $8_1 | 0) + $2_1 | 0) + ($4_1 & ($3_1 ^ -1 | 0) | 0) | 0;
    $1_1 = (__wasm_rotl_i32(((((HEAP32[3556 >> 2] | 0) + $23_1 | 0) + $1_1 | 0) + ($3_1 & ($2_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 9 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32($508 + ($1_1 & $3_1 | 0) | 0 | 0, 14 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32(((((HEAP32[3564 >> 2] | 0) + $7_1 | 0) + $3_1 | 0) + ($1_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 20 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($498 + ($2_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($3_1 & $1_1 | 0) | 0 | 0, 5 | 0) | 0) + $3_1 | 0;
    $566 = $4_1 + ((HEAP32[3584 >> 2] | 0) + $15_1 | 0) | 0;
    $576 = (((HEAP32[3576 >> 2] | 0) + $18_1 | 0) + $2_1 | 0) + ($4_1 & ($3_1 ^ -1 | 0) | 0) | 0;
    $1_1 = (__wasm_rotl_i32(((((HEAP32[3572 >> 2] | 0) + $24_1 | 0) + $1_1 | 0) + ($3_1 & ($2_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 9 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32($576 + ($1_1 & $3_1 | 0) | 0 | 0, 14 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32(((((HEAP32[3580 >> 2] | 0) + $11_1 | 0) + $3_1 | 0) + ($1_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 20 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($566 + ($2_1 & ($1_1 ^ -1 | 0) | 0) | 0) + ($3_1 & $1_1 | 0) | 0 | 0, 5 | 0) | 0) + $3_1 | 0;
    $631 = $120 + $4_1 | 0;
    $636 = ((HEAP32[3596 >> 2] | 0) + $12_1 | 0) + $3_1 | 0;
    $1_1 = (__wasm_rotl_i32(((((HEAP32[3588 >> 2] | 0) + $19_1 | 0) + $1_1 | 0) + ($3_1 & ($2_1 ^ -1 | 0) | 0) | 0) + ($2_1 & $4_1 | 0) | 0 | 0, 9 | 0) | 0) + $4_1 | 0;
    $3_1 = (__wasm_rotl_i32(((((HEAP32[3592 >> 2] | 0) + $20_1 | 0) + $2_1 | 0) + ($4_1 & ($3_1 ^ -1 | 0) | 0) | 0) + ($1_1 & $3_1 | 0) | 0 | 0, 14 | 0) | 0) + $1_1 | 0;
    $4_1 = (__wasm_rotl_i32(($636 + ($1_1 & ($4_1 ^ -1 | 0) | 0) | 0) + ($3_1 & $4_1 | 0) | 0 | 0, 20 | 0) | 0) + $3_1 | 0;
    $25_1 = $4_1 ^ $3_1 | 0;
    $2_1 = (__wasm_rotl_i32($631 + ($25_1 ^ $1_1 | 0) | 0 | 0, 4 | 0) | 0) + $4_1 | 0;
    $694 = $115 + $2_1 | 0;
    $699 = ((HEAP32[3608 >> 2] | 0) + $22_1 | 0) + $3_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3604 >> 2] | 0) + $11_1 | 0) + $1_1 | 0) + ($2_1 ^ $25_1 | 0) | 0 | 0, 11 | 0) | 0) + $2_1 | 0;
    $3_1 = (__wasm_rotl_i32($699 + ($1_1 ^ ($2_1 ^ $4_1 | 0) | 0) | 0 | 0, 16 | 0) | 0) + $1_1 | 0;
    $2_1 = (__wasm_rotl_i32((((HEAP32[3612 >> 2] | 0) + $24_1 | 0) + $4_1 | 0) + (($1_1 ^ $2_1 | 0) ^ $3_1 | 0) | 0 | 0, 23 | 0) | 0) + $3_1 | 0;
    $4_1 = (__wasm_rotl_i32($694 + (($3_1 ^ $1_1 | 0) ^ $2_1 | 0) | 0 | 0, 4 | 0) | 0) + $2_1 | 0;
    $750 = ((HEAP32[3624 >> 2] | 0) + $20_1 | 0) + $3_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3620 >> 2] | 0) + $7_1 | 0) + $1_1 | 0) + (($2_1 ^ $3_1 | 0) ^ $4_1 | 0) | 0 | 0, 11 | 0) | 0) + $4_1 | 0;
    $3_1 = (__wasm_rotl_i32($750 + ($1_1 ^ ($2_1 ^ $4_1 | 0) | 0) | 0 | 0, 16 | 0) | 0) + $1_1 | 0;
    $2_1 = (__wasm_rotl_i32((((HEAP32[3628 >> 2] | 0) + $23_1 | 0) + $2_1 | 0) + (($1_1 ^ $4_1 | 0) ^ $3_1 | 0) | 0 | 0, 23 | 0) | 0) + $3_1 | 0;
    $4_1 = (__wasm_rotl_i32(($110 + $4_1 | 0) + (($3_1 ^ $1_1 | 0) ^ $2_1 | 0) | 0 | 0, 4 | 0) | 0) + $2_1 | 0;
    $803 = ((HEAP32[3640 >> 2] | 0) + $18_1 | 0) + $3_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3636 >> 2] | 0) + $13_1 | 0) + $1_1 | 0) + (($2_1 ^ $3_1 | 0) ^ $4_1 | 0) | 0 | 0, 11 | 0) | 0) + $4_1 | 0;
    $3_1 = (__wasm_rotl_i32($803 + ($1_1 ^ ($2_1 ^ $4_1 | 0) | 0) | 0 | 0, 16 | 0) | 0) + $1_1 | 0;
    $2_1 = (__wasm_rotl_i32((((HEAP32[3644 >> 2] | 0) + $21_1 | 0) + $2_1 | 0) + (($1_1 ^ $4_1 | 0) ^ $3_1 | 0) | 0 | 0, 23 | 0) | 0) + $3_1 | 0;
    $4_1 = (__wasm_rotl_i32(($105 + $4_1 | 0) + (($3_1 ^ $1_1 | 0) ^ $2_1 | 0) | 0 | 0, 4 | 0) | 0) + $2_1 | 0;
    $856 = ((HEAP32[3660 >> 2] | 0) + $19_1 | 0) + $2_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3652 >> 2] | 0) + $12_1 | 0) + $1_1 | 0) + (($2_1 ^ $3_1 | 0) ^ $4_1 | 0) | 0 | 0, 11 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32((((HEAP32[3656 >> 2] | 0) + $8_1 | 0) + $3_1 | 0) + (($2_1 ^ $4_1 | 0) ^ $1_1 | 0) | 0 | 0, 16 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32($856 + (($1_1 ^ $4_1 | 0) ^ $2_1 | 0) | 0 | 0, 23 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($100 + $4_1 | 0) + (($3_1 | ($1_1 ^ -1 | 0) | 0) ^ $2_1 | 0) | 0 | 0, 6 | 0) | 0) + $3_1 | 0;
    $910 = ((HEAP32[3676 >> 2] | 0) + $17_1 | 0) + $3_1 | 0;
    $915 = ((HEAP32[3672 >> 2] | 0) + $24_1 | 0) + $2_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3668 >> 2] | 0) + $20_1 | 0) + $1_1 | 0) + (($4_1 | ($2_1 ^ -1 | 0) | 0) ^ $3_1 | 0) | 0 | 0, 10 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32($915 + (($1_1 | ($3_1 ^ -1 | 0) | 0) ^ $4_1 | 0) | 0 | 0, 15 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32($910 + (($2_1 | ($4_1 ^ -1 | 0) | 0) ^ $1_1 | 0) | 0 | 0, 21 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($95 + $4_1 | 0) + (($3_1 | ($1_1 ^ -1 | 0) | 0) ^ $2_1 | 0) | 0 | 0, 6 | 0) | 0) + $3_1 | 0;
    $967 = ((HEAP32[3692 >> 2] | 0) + $16_1 | 0) + $3_1 | 0;
    $972 = ((HEAP32[3688 >> 2] | 0) + $23_1 | 0) + $2_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3684 >> 2] | 0) + $18_1 | 0) + $1_1 | 0) + (($4_1 | ($2_1 ^ -1 | 0) | 0) ^ $3_1 | 0) | 0 | 0, 10 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32($972 + (($1_1 | ($3_1 ^ -1 | 0) | 0) ^ $4_1 | 0) | 0 | 0, 15 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32($967 + (($2_1 | ($4_1 ^ -1 | 0) | 0) ^ $1_1 | 0) | 0 | 0, 21 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($90 + $4_1 | 0) + (($3_1 | ($1_1 ^ -1 | 0) | 0) ^ $2_1 | 0) | 0 | 0, 6 | 0) | 0) + $3_1 | 0;
    $1024 = ((HEAP32[3708 >> 2] | 0) + $15_1 | 0) + $3_1 | 0;
    $1029 = ((HEAP32[3704 >> 2] | 0) + $21_1 | 0) + $2_1 | 0;
    $1_1 = (__wasm_rotl_i32((((HEAP32[3700 >> 2] | 0) + $8_1 | 0) + $1_1 | 0) + (($4_1 | ($2_1 ^ -1 | 0) | 0) ^ $3_1 | 0) | 0 | 0, 10 | 0) | 0) + $4_1 | 0;
    $2_1 = (__wasm_rotl_i32($1029 + (($1_1 | ($3_1 ^ -1 | 0) | 0) ^ $4_1 | 0) | 0 | 0, 15 | 0) | 0) + $1_1 | 0;
    $3_1 = (__wasm_rotl_i32($1024 + (($2_1 | ($4_1 ^ -1 | 0) | 0) ^ $1_1 | 0) | 0 | 0, 21 | 0) | 0) + $2_1 | 0;
    $4_1 = (__wasm_rotl_i32(($85 + $4_1 | 0) + (($3_1 | ($1_1 ^ -1 | 0) | 0) ^ $2_1 | 0) | 0 | 0, 6 | 0) | 0) + $3_1 | 0;
    HEAP32[$0_1 >> 2] = $80 + $4_1 | 0;
    $1_1 = (__wasm_rotl_i32((($22_1 + $28_1 | 0) + $1_1 | 0) + (($4_1 | ($2_1 ^ -1 | 0) | 0) ^ $3_1 | 0) | 0 | 0, 10 | 0) | 0) + $4_1 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + $10_1 | 0;
    $2_1 = (__wasm_rotl_i32((($19_1 + $27_1 | 0) + $2_1 | 0) + (($1_1 | ($3_1 ^ -1 | 0) | 0) ^ $4_1 | 0) | 0 | 0, 15 | 0) | 0) + $1_1 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 + $9_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = ($2_1 + $6_1 | 0) + (__wasm_rotl_i32((($14_1 + $26_1 | 0) + $3_1 | 0) + (($2_1 | ($4_1 ^ -1 | 0) | 0) ^ $1_1 | 0) | 0 | 0, 21 | 0) | 0) | 0;
    global$0 = $5_1 + 256 | 0;
  }
  function $31($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    $4_1 = $29((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + Math_imul($3_1, 10) | 0 | 0) | 0;
    if ($3_1) {
      $2_1 = $1_1 + 8 | 0;
      label: while (1) {
        $63($4_1 | 0, $0_1 | 0, $2_1 | 0);
        $2_1 = (($2($2_1 | 0) | 0) + $2_1 | 0) + 1 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($5_1 | 0) != ($3_1 | 0)) {
          continue label;
        }
        break label;
      }
    }
    $8($1_1 | 0);
    return $4_1 | 0;
  }
  function $32($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = $29(($2($1_1 | 0) | 0) + 10 | 0 | 0) | 0;
    $63($2_1 | 0, $0_1 | 0, $1_1 | 0);
    $8($1_1 | 0);
    return $2_1 | 0;
  }
  function $33($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$1 = 0,
      $5_1 = 0,
      $14_1 = 0,
      $14$hi = 0,
      $19_1 = 0;
    $5_1 = global$0 - 16 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $14$hi;
    $9($5_1 | 0, $1_1 | 0, $1$hi | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    HEAP32[i64toi32_i32$0 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
    global$0 = i64toi32_i32$2 + 16 | 0;
  }
  function $34() {
    var i64toi32_i32$1 = 0,
      i64toi32_i32$2 = 0,
      $0_1 = 0,
      i64toi32_i32$0 = 0,
      $2_1 = 0,
      $4_1 = 0,
      i64toi32_i32$6 = 0,
      $3_1 = 0,
      $21_1 = 0,
      $22_1 = 0,
      $17_1 = 0,
      $17$hi = 0,
      $4$hi = 0,
      $32_1 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$5 = 0,
      $8_1 = 0,
      $20_1 = 0,
      $1_1 = 0,
      $42_1 = 0,
      $42$hi = 0,
      $44_1 = 0,
      $44$hi = 0;
    $0_1 = global$0 - 16 | 0;
    global$0 = $0_1;
    $8_1 = $0_1;
    block: {
      $3_1 = +fimport$10();
      $2_1 = $3_1 / 1e3;
      if (Math_abs($2_1) < 0x8000000000000000) {
        i64toi32_i32$0 = $2_1;
        if (Math_abs(i64toi32_i32$0) >= 1) {
          if (i64toi32_i32$0 > 0) {
            $21_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296), 4294967296 - 1) >>> 0;
          } else {
            $21_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296) >>> 0;
          }
          $22_1 = $21_1;
        } else {
          $22_1 = 0;
        }
        i64toi32_i32$1 = $22_1;
        $17_1 = ~~i64toi32_i32$0 >>> 0;
        $17$hi = i64toi32_i32$1;
        break block;
      }
      i64toi32_i32$1 = -2147483648;
      $17_1 = 0;
      $17$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $17$hi;
    $4_1 = $17_1;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $8_1;
    HEAP32[i64toi32_i32$2 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
    $20_1 = $0_1;
    block1: {
      i64toi32_i32$2 = 0;
      i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $2_1 = ($3_1 - (+(i64toi32_i32$2 >>> 0) + 4294967296 * +(i64toi32_i32$1 | 0))) * 1e3;
      if (Math_abs($2_1) < 2147483648) {
        $32_1 = ~~$2_1;
        break block1;
      }
      $32_1 = -2147483648;
    }
    HEAP32[($20_1 + 8 | 0) >> 2] = $32_1;
    i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$2;
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    global$0 = $0_1 + 16 | 0;
    i64toi32_i32$1 = ($1_1 | 0) / (1e3 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $42_1 = i64toi32_i32$1;
    $42$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$2 | 0, 1e3 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $44_1 = i64toi32_i32$1;
    $44$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $42$hi;
    i64toi32_i32$1 = $44$hi;
    i64toi32_i32$4 = $44_1;
    i64toi32_i32$5 = $42_1 + i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$6 = i64toi32_i32$6 + 1 | 0;
    }
    i64toi32_i32$HIGH_BITS = i64toi32_i32$6;
    return i64toi32_i32$5 | 0;
  }
  function $35($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      $8_1 = 0,
      $24_1 = 0,
      i64toi32_i32$0 = 0;
    $1_1 = 1;
    block: {
      if (($0_1 | 0) >= (1024 | 0)) {
        $1_1 = 898846567431158e293;
        if ($0_1 >>> 0 < 2047 >>> 0) {
          $0_1 = $0_1 - 1023 | 0;
          break block;
        }
        $1_1 = Infinity;
        $0_1 = (($0_1 | 0) >= (3069 | 0) ? 3069 : $0_1) - 2046 | 0;
        break block;
      }
      if (($0_1 | 0) > (-1023 | 0)) {
        break block;
      }
      $1_1 = 2004168360008973e-307;
      if ($0_1 >>> 0 > -1992 >>> 0) {
        $0_1 = $0_1 + 969 | 0;
        break block;
      }
      $1_1 = 0;
      $0_1 = (($0_1 | 0) <= (-2960 | 0) ? -2960 : $0_1) + 1938 | 0;
    }
    $24_1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $0_1 + 1023 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $8_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    return +($24_1 * +wasm2js_scratch_load_f64());
  }
  function $36($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0,
      i64toi32_i32$0 = 0;
    block: {
      i64toi32_i32$0 = 0;
      if (!($28($0_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0)) {
        break block;
      }
      block1: {
        if (!$1_1) {
          break block1;
        }
        if (!$2_1) {
          break block1;
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        $4_1 = $3_1 + $2_1 | 0;
        if ($4_1 >>> 0 < $3_1 >>> 0) {
          break block;
        }
        if ($4_1 >>> 0 > (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
          break block;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
        $7((HEAP32[$0_1 >> 2] | 0) + $3_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
      }
    }
  }
  function $37() {
    HEAP32[5216 >> 2] = 5096;
    HEAP32[5144 >> 2] = 42;
  }
  function $38($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      $2_1 = 0,
      $3_1 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$0 = 0,
      $41_1 = 0,
      $28_1 = 0,
      $44_1 = 0,
      $60_1 = 0,
      $76 = 0,
      $92 = 0,
      $108 = 0,
      $124 = 0,
      $140 = 0,
      $156 = 0,
      $180 = 0,
      $196 = 0,
      $212 = 0,
      $228 = 0,
      $244 = 0,
      $260 = 0,
      $276 = 0,
      $16_1 = 0,
      $33_1 = 0,
      $49_1 = 0,
      $65_1 = 0,
      $81 = 0,
      $97 = 0,
      $113 = 0,
      $129 = 0,
      $145 = 0,
      $4_1 = 0,
      $164 = 0,
      $169 = 0,
      $185 = 0,
      $201 = 0,
      $217 = 0,
      $233 = 0,
      $249 = 0,
      $265 = 0,
      $293 = 0;
    block17: {
      block: {
        $2_1 = fimport$19() | 0;
        if ($2_1) {
          $3_1 = $2($2_1 | 0) | 0;
          if (($3_1 - 32 | 0) >>> 0 < 3 >>> 0) {
            break block;
          }
          $8($2_1 | 0);
        }
        $3_1 = global$0 - 176 | 0;
        global$0 = $3_1;
        $16_1 = $0_1;
        block1: {
          $2_1 = fimport$7() | 0;
          $1_1 = +HEAPF64[$2_1 >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $28_1 = ~~$1_1 >>> 0;
            break block1;
          }
          $28_1 = 0;
        }
        HEAP8[$16_1 >> 0] = HEAPU8[((($28_1 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $33_1 = $0_1;
        block2: {
          $1_1 = +HEAPF64[($2_1 + 8 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $44_1 = ~~$1_1 >>> 0;
            break block2;
          }
          $44_1 = 0;
        }
        HEAP8[($33_1 + 1 | 0) >> 0] = HEAPU8[((($44_1 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $49_1 = $0_1;
        block3: {
          $1_1 = +HEAPF64[($2_1 + 16 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $60_1 = ~~$1_1 >>> 0;
            break block3;
          }
          $60_1 = 0;
        }
        HEAP8[($49_1 + 2 | 0) >> 0] = HEAPU8[((($60_1 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $65_1 = $0_1;
        block4: {
          $1_1 = +HEAPF64[($2_1 + 24 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $76 = ~~$1_1 >>> 0;
            break block4;
          }
          $76 = 0;
        }
        HEAP8[($65_1 + 3 | 0) >> 0] = HEAPU8[((($76 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $81 = $0_1;
        block5: {
          $1_1 = +HEAPF64[($2_1 + 32 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $92 = ~~$1_1 >>> 0;
            break block5;
          }
          $92 = 0;
        }
        HEAP8[($81 + 4 | 0) >> 0] = HEAPU8[((($92 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $97 = $0_1;
        block6: {
          $1_1 = +HEAPF64[($2_1 + 40 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $108 = ~~$1_1 >>> 0;
            break block6;
          }
          $108 = 0;
        }
        HEAP8[($97 + 5 | 0) >> 0] = HEAPU8[((($108 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $113 = $0_1;
        block7: {
          $1_1 = +HEAPF64[($2_1 + 48 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $124 = ~~$1_1 >>> 0;
            break block7;
          }
          $124 = 0;
        }
        HEAP8[($113 + 6 | 0) >> 0] = HEAPU8[((($124 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $129 = $0_1;
        block8: {
          $1_1 = +HEAPF64[($2_1 + 56 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $140 = ~~$1_1 >>> 0;
            break block8;
          }
          $140 = 0;
        }
        HEAP8[($129 + 7 | 0) >> 0] = HEAPU8[((($140 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $145 = $0_1;
        block9: {
          $1_1 = +HEAPF64[($2_1 + 64 | 0) >> 3] * 52;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $156 = ~~$1_1 >>> 0;
            break block9;
          }
          $156 = 0;
        }
        HEAP8[($145 + 8 | 0) >> 0] = HEAPU8[((($156 >>> 0) % (52 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $4_1 = $2($0_1 | 0) | 0;
        i64toi32_i32$0 = $34() | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $164 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[i64toi32_i32$0 >> 2] = $164;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $18($0_1 + $4_1 | 0 | 0, 14 | 0, 1366 | 0, i64toi32_i32$0 | 0);
        $169 = $0_1;
        block10: {
          $1_1 = +HEAPF64[($2_1 + 72 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $180 = ~~$1_1 >>> 0;
            break block10;
          }
          $180 = 0;
        }
        HEAP8[($169 + 22 | 0) >> 0] = HEAPU8[((($180 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $185 = $0_1;
        block11: {
          $1_1 = +HEAPF64[($2_1 + 80 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $196 = ~~$1_1 >>> 0;
            break block11;
          }
          $196 = 0;
        }
        HEAP8[($185 + 23 | 0) >> 0] = HEAPU8[((($196 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $201 = $0_1;
        block12: {
          $1_1 = +HEAPF64[($2_1 + 88 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $212 = ~~$1_1 >>> 0;
            break block12;
          }
          $212 = 0;
        }
        HEAP8[($201 + 24 | 0) >> 0] = HEAPU8[((($212 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $217 = $0_1;
        block13: {
          $1_1 = +HEAPF64[($2_1 + 96 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $228 = ~~$1_1 >>> 0;
            break block13;
          }
          $228 = 0;
        }
        HEAP8[($217 + 25 | 0) >> 0] = HEAPU8[((($228 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $233 = $0_1;
        block14: {
          $1_1 = +HEAPF64[($2_1 + 104 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $244 = ~~$1_1 >>> 0;
            break block14;
          }
          $244 = 0;
        }
        HEAP8[($233 + 26 | 0) >> 0] = HEAPU8[((($244 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $249 = $0_1;
        block15: {
          $1_1 = +HEAPF64[($2_1 + 112 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $260 = ~~$1_1 >>> 0;
            break block15;
          }
          $260 = 0;
        }
        HEAP8[($249 + 27 | 0) >> 0] = HEAPU8[((($260 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $265 = $0_1;
        block16: {
          $1_1 = +HEAPF64[($2_1 + 120 | 0) >> 3] * 62;
          if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
            $276 = ~~$1_1 >>> 0;
            break block16;
          }
          $276 = 0;
        }
        HEAP8[($265 + 28 | 0) >> 0] = HEAPU8[((($276 >>> 0) % (62 >>> 0) | 0) + 1423 | 0) >> 0] | 0;
        $8($2_1 | 0);
        $2_1 = $3_1 + 88 | 0;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$1 = -271733879;
        HEAP32[($2_1 + 8 | 0) >> 2] = 1732584193;
        HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$1 = 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$1 = 271733878;
        HEAP32[($2_1 + 16 | 0) >> 2] = -1732584194;
        HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
        $11($2_1 | 0, $0_1 | 0, $2($0_1 | 0) | 0 | 0);
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = 0;
        HEAP32[($3_1 + 72 | 0) >> 2] = 0;
        HEAP32[($3_1 + 76 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = 0;
        HEAP32[($3_1 + 64 | 0) >> 2] = 0;
        HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$1;
        $293 = $2_1;
        $2_1 = $3_1 - -64 | 0;
        $25($293 | 0, $2_1 | 0);
        HEAP8[($3_1 + 48 | 0) >> 0] = 0;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = 0;
        HEAP32[($3_1 + 40 | 0) >> 2] = 0;
        HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = 0;
        HEAP32[($3_1 + 32 | 0) >> 2] = 0;
        HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = 0;
        HEAP32[($3_1 + 24 | 0) >> 2] = 0;
        HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = 0;
        HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
        $24($2_1 | 0, 16 | 0, $3_1 + 16 | 0 | 0);
        $2_1 = ($2($0_1 | 0) | 0) + $0_1 | 0;
        $41_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        HEAP8[$2_1 >> 0] = $41_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $41_1 >>> 8 | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $41_1 >>> 16 | 0;
        HEAP8[($2_1 + 3 | 0) >> 0] = $41_1 >>> 24 | 0;
        HEAP8[($2_1 + 4 | 0) >> 0] = HEAPU8[($3_1 + 20 | 0) >> 0] | 0;
        global$0 = $3_1 + 176 | 0;
        fimport$9($0_1 | 0, $2($0_1 | 0) | 0 | 0);
        break block17;
      }
      $7($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
      $8($2_1 | 0);
    }
  }
  function $39($0_1, $0$hi, $1_1, $1$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$1 = 0,
      $2$hi = 0,
      $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $3$hi = 0,
      i64toi32_i32$6 = 0,
      $5_1 = 0,
      $45_1 = 0,
      $46_1 = 0,
      $47_1 = 0,
      $48_1 = 0,
      $49_1 = 0,
      $50_1 = 0,
      $51_1 = 0,
      $12_1 = 0,
      $12$hi = 0,
      $14$hi = 0,
      $17_1 = 0,
      $17$hi = 0,
      $19$hi = 0,
      $33_1 = 0,
      $33$hi = 0,
      $36_1 = 0,
      $38_1 = 0,
      $44_1 = 0,
      $44$hi = 0,
      $46$hi = 0,
      $73 = 0,
      $73$hi = 0,
      $77$hi = 0,
      $80 = 0,
      $80$hi = 0,
      $82 = 0,
      $82$hi = 0,
      $84 = 0,
      $85$hi = 0,
      $87 = 0,
      $87$hi = 0,
      $96$hi = 0,
      $103 = 0,
      $103$hi = 0;
    $4_1 = global$0 - 32 | 0;
    global$0 = $4_1;
    block: {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $3_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $3$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 1006698496;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = 1140785152;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      $14$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$5 = $12_1;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$1 = 4;
        i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
          $45_1 = 0;
        } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
          $45_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
        }
        $17_1 = $45_1;
        $17$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $0$hi;
        i64toi32_i32$5 = $0_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 60;
        i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = 0;
          $46_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
        } else {
          i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
          $46_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
        }
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$4 = $17_1;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$1 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
        $3_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
        $3$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $0$hi;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$4 = 268435455;
        i64toi32_i32$1 = -1;
        i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
        $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
        $0$hi = i64toi32_i32$4;
        i64toi32_i32$5 = $0_1;
        i64toi32_i32$3 = 134217728;
        i64toi32_i32$1 = 1;
        if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          i64toi32_i32$5 = $3$hi;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$4 = 1073741824;
          i64toi32_i32$3 = 1;
          i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
          }
          $2_1 = i64toi32_i32$0;
          $2$hi = i64toi32_i32$2;
          break block;
        }
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$1 = -1073741824;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $0$hi;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$5 = 134217728;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break block;
        }
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        $33_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
        $33$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        i64toi32_i32$3 = $33$hi;
        i64toi32_i32$5 = $33_1;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$4;
        break block;
      }
      i64toi32_i32$4 = $0$hi;
      $36_1 = !($0_1 | i64toi32_i32$4 | 0);
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$5 = 0;
      $38_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$4 = 2147418112;
      i64toi32_i32$2 = 0;
      if (!((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36_1 : $38_1)) {
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 4;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $47_1 = 0;
        } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $44_1 = $47_1;
        $44$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $0$hi;
        i64toi32_i32$5 = $0_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 60;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
          $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $46$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $44$hi;
        i64toi32_i32$0 = $44_1;
        i64toi32_i32$5 = $46$hi;
        i64toi32_i32$4 = $48_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
        i64toi32_i32$0 = 524287;
        i64toi32_i32$4 = -1;
        i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
        i64toi32_i32$2 = 2146959360;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
        $2$hi = i64toi32_i32$2;
        break block;
      }
      i64toi32_i32$2 = 2146435072;
      $2_1 = 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$5 = 1140785151;
      i64toi32_i32$4 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break block;
      }
      i64toi32_i32$0 = 0;
      $2_1 = 0;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 48;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $5_1 = $49_1;
      if ($5_1 >>> 0 < 15249 >>> 0) {
        break block;
      }
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$4 = 65535;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      i64toi32_i32$0 = 65536;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $2$hi;
      $5($4_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $5_1 - 15233 | 0 | 0);
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      $20($4_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 15361 - $5_1 | 0 | 0);
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 4;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
        $50_1 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
        $50_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $73 = $50_1;
      $73$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $0_1 = i64toi32_i32$0;
      $0$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 60;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $51_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $51_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
      }
      $77$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $73$hi;
      i64toi32_i32$4 = $73;
      i64toi32_i32$2 = $77$hi;
      i64toi32_i32$5 = $51_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $80 = i64toi32_i32$2;
      $80$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
      $82 = i64toi32_i32$4;
      $82$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80;
      i64toi32_i32$4 = $82$hi;
      i64toi32_i32$5 = $82;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $84 = (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $85$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$5 = $0_1;
      i64toi32_i32$4 = 268435455;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $87 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $87$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $85$hi;
      i64toi32_i32$2 = $84;
      i64toi32_i32$5 = $87$hi;
      i64toi32_i32$0 = $87;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $0_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $0$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$2 = 134217728;
      i64toi32_i32$0 = 1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $2_1 = i64toi32_i32$3;
        $2$hi = i64toi32_i32$1;
        break block;
      }
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$0 = 134217728;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
        break block;
      }
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
      $96$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$1 = $96$hi;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$3;
    }
    global$0 = $4_1 + 32 | 0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $103 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $103$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = $103$hi;
    i64toi32_i32$0 = $103;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    return + +wasm2js_scratch_load_f64();
  }
  function $40($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$3 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$5 = 0,
      $5_1 = 0,
      i64toi32_i32$6 = 0,
      $10$hi = 0,
      $10_1 = 0,
      $12$hi = 0,
      $11$hi = 0,
      $12_1 = 0,
      $6_1 = 0,
      $11_1 = 0,
      $13$hi = 0,
      $17$hi = 0,
      $14$hi = 0,
      $13_1 = 0,
      $16$hi = 0,
      $15$hi = 0,
      $14_1 = 0,
      $17_1 = 0,
      $18$hi = 0,
      $19$hi = 0,
      $16_1 = 0,
      $20$hi = 0,
      $18_1 = 0,
      $19_1 = 0,
      $15_1 = 0,
      $20_1 = 0,
      $7_1 = 0,
      $21_1 = 0,
      $21$hi = 0,
      $24$hi = 0,
      $344 = 0,
      $8_1 = 0,
      $345 = 0,
      $9_1 = 0,
      $347 = 0,
      $348 = 0,
      $350 = 0,
      $351 = 0,
      $352 = 0,
      $353 = 0,
      $354 = 0,
      $356 = 0,
      $357 = 0,
      $359 = 0,
      $360 = 0,
      $361 = 0,
      $362 = 0,
      $365 = 0,
      $366 = 0,
      $367 = 0,
      $368 = 0,
      $369 = 0,
      $22_1 = 0,
      $22$hi = 0,
      $370 = 0,
      $372 = 0,
      $373 = 0,
      $374 = 0,
      $376 = 0,
      $378 = 0,
      $379 = 0,
      $384 = 0,
      $23_1 = 0,
      $23$hi = 0,
      $385 = 0,
      $386 = 0,
      $387 = 0,
      $389 = 0,
      $24_1 = 0,
      $393 = 0,
      $394 = 0,
      $395 = 0,
      $396 = 0,
      $397 = 0,
      $398 = 0,
      $530 = 0,
      $399 = 0,
      $400 = 0,
      $402 = 0,
      $403 = 0,
      $404 = 0,
      $405 = 0,
      $408 = 0,
      $409 = 0,
      $580 = 0,
      $580$hi = 0,
      $410 = 0,
      $411 = 0,
      $412 = 0,
      $51_1 = 0,
      $55_1 = 0,
      $63_1 = 0,
      $67_1 = 0,
      $77 = 0,
      $77$hi = 0,
      $82 = 0,
      $82$hi = 0,
      $89 = 0,
      $89$hi = 0,
      $111 = 0,
      $112 = 0,
      $112$hi = 0,
      $113 = 0,
      $113$hi = 0,
      $120$hi = 0,
      $123$hi = 0,
      $137 = 0,
      $138 = 0,
      $138$hi = 0,
      $139 = 0,
      $139$hi = 0,
      $146$hi = 0,
      $149$hi = 0,
      $163 = 0,
      $167 = 0,
      $167$hi = 0,
      $169$hi = 0,
      $178 = 0,
      $178$hi = 0,
      $179$hi = 0,
      $182 = 0,
      $185 = 0,
      $185$hi = 0,
      $188$hi = 0,
      $196 = 0,
      $196$hi = 0,
      $197$hi = 0,
      $199 = 0,
      $202 = 0,
      $202$hi = 0,
      $205$hi = 0,
      $213 = 0,
      $213$hi = 0,
      $214$hi = 0,
      $216 = 0,
      $219 = 0,
      $219$hi = 0,
      $222$hi = 0,
      $230 = 0,
      $230$hi = 0,
      $231$hi = 0,
      $233 = 0,
      $234 = 0,
      $234$hi = 0,
      $237 = 0,
      $237$hi = 0,
      $240$hi = 0,
      $245 = 0,
      $247$hi = 0,
      $250 = 0,
      $251 = 0,
      $251$hi = 0,
      $253 = 0,
      $253$hi = 0,
      $258 = 0,
      $258$hi = 0,
      $262 = 0,
      $263$hi = 0,
      $264$hi = 0,
      $266 = 0,
      $267$hi = 0,
      $268$hi = 0,
      $269$hi = 0,
      $273$hi = 0,
      $284 = 0,
      $284$hi = 0,
      $288 = 0,
      $288$hi = 0,
      $291$hi = 0,
      $292 = 0,
      $292$hi = 0,
      $298 = 0,
      $298$hi = 0,
      $307 = 0,
      $307$hi = 0,
      $312 = 0,
      $312$hi = 0,
      $315 = 0,
      $316 = 0,
      $316$hi = 0,
      $319 = 0,
      $320 = 0,
      $320$hi = 0,
      $323 = 0,
      $323$hi = 0,
      $325$hi = 0,
      $326 = 0,
      $326$hi = 0,
      $328$hi = 0,
      $329$hi = 0,
      $330$hi = 0,
      $336 = 0,
      $336$hi = 0,
      $340 = 0,
      $341 = 0,
      $341$hi = 0,
      $342 = 0,
      $342$hi = 0,
      $343 = 0,
      $343$hi = 0,
      $346 = 0,
      $346$hi = 0,
      $349 = 0,
      $349$hi = 0,
      $351$hi = 0,
      $355 = 0,
      $355$hi = 0,
      $358 = 0,
      $359$hi = 0,
      $360$hi = 0,
      $363 = 0,
      $363$hi = 0,
      $364 = 0,
      $364$hi = 0,
      $371 = 0,
      $371$hi = 0,
      $375 = 0,
      $377 = 0,
      $377$hi = 0,
      $379$hi = 0,
      $380 = 0,
      $380$hi = 0,
      $381 = 0,
      $381$hi = 0,
      $382 = 0,
      $382$hi = 0,
      $383 = 0,
      $383$hi = 0,
      $385$hi = 0,
      $388 = 0,
      $389$hi = 0,
      $390 = 0,
      $390$hi = 0,
      $391 = 0,
      $391$hi = 0,
      $392 = 0,
      $392$hi = 0,
      $401 = 0,
      $401$hi = 0,
      $406 = 0,
      $406$hi = 0,
      $407 = 0,
      $407$hi = 0,
      $413 = 0,
      $413$hi = 0,
      $416 = 0,
      $417$hi = 0,
      $418$hi = 0,
      $421 = 0,
      $422$hi = 0,
      $423 = 0,
      $423$hi = 0,
      $424 = 0,
      $424$hi = 0,
      $431 = 0,
      $431$hi = 0,
      $436 = 0,
      $436$hi = 0,
      $441 = 0,
      $441$hi = 0,
      $444 = 0,
      $444$hi = 0,
      $447 = 0,
      $448 = 0,
      $448$hi = 0,
      $451 = 0,
      $452$hi = 0,
      $455 = 0,
      $456$hi = 0,
      $457$hi = 0,
      $459$hi = 0,
      $460 = 0,
      $460$hi = 0,
      $464 = 0,
      $465$hi = 0,
      $466 = 0,
      $466$hi = 0,
      $467 = 0,
      $467$hi = 0,
      $468 = 0,
      $468$hi = 0,
      $475 = 0,
      $475$hi = 0,
      $478 = 0,
      $478$hi = 0,
      $481 = 0,
      $483$hi = 0,
      $484 = 0,
      $484$hi = 0,
      $489 = 0,
      $489$hi = 0,
      $490 = 0,
      $490$hi = 0,
      $492$hi = 0,
      $493$hi = 0,
      $495 = 0,
      $496$hi = 0,
      $497$hi = 0,
      $501 = 0,
      $502$hi = 0,
      $516$hi = 0,
      $518 = 0,
      $518$hi = 0,
      $519$hi = 0,
      $523 = 0,
      $524$hi = 0,
      $532 = 0,
      $534 = 0,
      $534$hi = 0,
      $536$hi = 0,
      $538 = 0,
      $538$hi = 0,
      $545$hi = 0,
      $547 = 0,
      $547$hi = 0,
      $548$hi = 0,
      $552 = 0,
      $553$hi = 0,
      $568 = 0,
      $568$hi = 0,
      $570$hi = 0,
      $573 = 0,
      $573$hi = 0,
      $576$hi = 0,
      $606 = 0,
      $606$hi = 0,
      $609 = 0,
      $609$hi = 0,
      $613$hi = 0,
      $614 = 0,
      $614$hi = 0,
      $615 = 0,
      $615$hi = 0,
      $618 = 0,
      $618$hi = 0,
      $622 = 0,
      $623$hi = 0,
      $636 = 0,
      $636$hi = 0,
      $637 = 0,
      $637$hi = 0,
      $638 = 0,
      $638$hi = 0,
      $639 = 0,
      $639$hi = 0,
      $646 = 0,
      $650 = 0,
      $651$hi = 0,
      $655 = 0,
      $659 = 0,
      $660$hi = 0,
      $663 = 0,
      $664$hi = 0,
      $666 = 0,
      $666$hi = 0,
      $667 = 0,
      $667$hi = 0,
      $670 = 0,
      $673 = 0,
      $673$hi = 0,
      $674 = 0,
      $679 = 0,
      $684 = 0,
      $685$hi = 0,
      $688 = 0,
      $689$hi = 0,
      $691 = 0,
      $691$hi = 0,
      $694 = 0,
      $697 = 0,
      $697$hi = 0,
      $698 = 0,
      $703 = 0,
      $708 = 0,
      $709$hi = 0,
      $713 = 0,
      $714$hi = 0,
      $715$hi = 0;
    $5_1 = global$0 - 336 | 0;
    global$0 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $11_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $344 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $344 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $344 & 32767 | 0;
    block1: {
      block: {
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 48;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $345 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          $345 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        $9_1 = $345 & 32767 | 0;
        if (($9_1 - 32767 | 0) >>> 0 >= -32766 >>> 0) {
          if (($8_1 - 32767 | 0) >>> 0 > -32767 >>> 0) {
            break block;
          }
        }
        i64toi32_i32$0 = $1$hi;
        $51_1 = !($1_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = 2147483647;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = 2147418112;
        i64toi32_i32$3 = 0;
        $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$1 = 2147418112;
        i64toi32_i32$2 = 0;
        if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1)) {
          i64toi32_i32$3 = $2$hi;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$0 = 32768;
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
          $13_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
          $13$hi = i64toi32_i32$0;
          break block1;
        }
        i64toi32_i32$0 = $3$hi;
        $63_1 = !($3_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = 2147483647;
        i64toi32_i32$1 = -1;
        i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
        $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
        $2$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$1 = 0;
        $67_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$2 = 2147418112;
        i64toi32_i32$3 = 0;
        if (!((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $67_1)) {
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$3 = $4_1;
          i64toi32_i32$0 = 32768;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
          $13_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
          $13$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $3$hi;
          $1_1 = $3_1;
          $1$hi = i64toi32_i32$0;
          break block1;
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$1 = $12_1;
        i64toi32_i32$3 = 2147418112;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $77 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
        $77$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $77$hi;
        i64toi32_i32$2 = $77;
        i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
        if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0)) {
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$0 = 2147418112;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
          $82 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $82$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$3 = $82$hi;
          i64toi32_i32$2 = $82;
          i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
          if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$3 | 0)) {
            i64toi32_i32$3 = 0;
            $1_1 = 0;
            $1$hi = i64toi32_i32$3;
            i64toi32_i32$3 = 2147450880;
            $13_1 = 0;
            $13$hi = i64toi32_i32$3;
            break block1;
          }
          i64toi32_i32$3 = $13$hi;
          i64toi32_i32$0 = $13_1;
          i64toi32_i32$1 = 2147418112;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
          $13_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
          $13$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$0 = 2147418112;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
        $89 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
        $89$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$3 = $89$hi;
        i64toi32_i32$2 = $89;
        i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$3 | 0)) {
          i64toi32_i32$3 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$3;
          break block1;
        }
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
        if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0)) {
          i64toi32_i32$1 = $13$hi;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
          i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0);
          i64toi32_i32$0 = 2147450880;
          i64toi32_i32$3 = $13$hi;
          i64toi32_i32$2 = i64toi32_i32$4 ? 0 : $13_1;
          i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$3;
          $13_1 = i64toi32_i32$2;
          $13$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$1;
          break block1;
        }
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$4 = $2_1;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        if (!(i64toi32_i32$4 | i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
          i64toi32_i32$2 = $13$hi;
          i64toi32_i32$1 = $13_1;
          i64toi32_i32$4 = 2147418112;
          i64toi32_i32$3 = 0;
          i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
          $13_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          $13$hi = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$4;
          break block1;
        }
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$1 = 65535;
        i64toi32_i32$3 = -1;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
          $111 = $5_1 + 320 | 0;
          i64toi32_i32$2 = $1$hi;
          $112 = $1_1;
          $112$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $10$hi;
          $113 = $10_1;
          $113$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$2 = $10$hi;
          $6_1 = !($10_1 | i64toi32_i32$2 | 0);
          i64toi32_i32$0 = $6_1;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$1 = i64toi32_i32$0 ? $1_1 : $10_1;
          i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$4;
          i64toi32_i32$4 = Math_clz32(i64toi32_i32$3);
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$4 | 0) == (32 | 0)) {
            $347 = Math_clz32(i64toi32_i32$1) + 32 | 0;
          } else {
            $347 = i64toi32_i32$4;
          }
          $120$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $123$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $120$hi;
          i64toi32_i32$1 = $347;
          i64toi32_i32$3 = $123$hi;
          i64toi32_i32$4 = $6_1 << 6 | 0;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
          }
          $6_1 = i64toi32_i32$2;
          i64toi32_i32$5 = $112$hi;
          i64toi32_i32$1 = $113$hi;
          $5($111 | 0, $112 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 - 15 | 0 | 0);
          $6_1 = 16 - i64toi32_i32$2 | 0;
          i64toi32_i32$0 = $5_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 328 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 332 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$5;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
          $1_1 = i64toi32_i32$5;
          $1$hi = i64toi32_i32$1;
        }
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$5 = 65535;
        i64toi32_i32$4 = -1;
        if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
          break block;
        }
        $137 = $5_1 + 304 | 0;
        i64toi32_i32$0 = $3$hi;
        $138 = $3_1;
        $138$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $11$hi;
        $139 = $11_1;
        $139$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $11$hi;
        $7_1 = !($11_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $7_1;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $11_1;
        i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$1;
        i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) == (32 | 0)) {
          $348 = Math_clz32(i64toi32_i32$5) + 32 | 0;
        } else {
          $348 = i64toi32_i32$1;
        }
        $146$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $149$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $146$hi;
        i64toi32_i32$5 = $348;
        i64toi32_i32$4 = $149$hi;
        i64toi32_i32$1 = $7_1 << 6 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $7_1 = i64toi32_i32$0;
        i64toi32_i32$2 = $138$hi;
        i64toi32_i32$5 = $139$hi;
        $5($137 | 0, $138 | 0, i64toi32_i32$2 | 0, $139 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 - 15 | 0 | 0);
        $6_1 = ($6_1 + i64toi32_i32$0 | 0) - 16 | 0;
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 312 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 316 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
        $3_1 = i64toi32_i32$2;
        $3$hi = i64toi32_i32$5;
      }
      $163 = $5_1 + 288 | 0;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $18_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $18_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 15;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $350 = 0;
      } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $350 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      }
      $167 = $350;
      $167$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 49;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $351 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $351 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $169$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $167$hi;
      i64toi32_i32$3 = $167;
      i64toi32_i32$2 = $169$hi;
      i64toi32_i32$1 = $351;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 1963258675;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$1 = 0;
      $4($163 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 296 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 300 | 0) >> 2] | 0;
      $178 = i64toi32_i32$1;
      $178$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = $178$hi;
      i64toi32_i32$0 = $178;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $179$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $179$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$0 = 0;
      $4($5_1 + 272 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
      $182 = $5_1 + 256 | 0;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 280 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 284 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
        $352 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
        $352 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $185 = $352;
      $185$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 63;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $353 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        $353 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
      }
      $188$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $185$hi;
      i64toi32_i32$5 = $185;
      i64toi32_i32$2 = $188$hi;
      i64toi32_i32$4 = $353;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = 0;
      $4($182 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 264 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 268 | 0) >> 2] | 0;
      $196 = i64toi32_i32$4;
      $196$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = $196$hi;
      i64toi32_i32$2 = $196;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      $197$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $197$hi;
      i64toi32_i32$2 = 0;
      $4($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
      $199 = $5_1 + 224 | 0;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 248 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 252 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $354 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $354 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      }
      $202 = $354;
      $202$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 240 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 244 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $356 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
        $356 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $205$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $202$hi;
      i64toi32_i32$5 = $202;
      i64toi32_i32$0 = $205$hi;
      i64toi32_i32$3 = $356;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = 0;
      $4($199 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 232 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 236 | 0) >> 2] | 0;
      $213 = i64toi32_i32$3;
      $213$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = $213$hi;
      i64toi32_i32$0 = $213;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $214$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $214$hi;
      i64toi32_i32$0 = 0;
      $4($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
      $216 = $5_1 + 192 | 0;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 216 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 220 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        $357 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
        $357 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $219 = $357;
      $219$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 208 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 212 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $359 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        $359 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
      }
      $222$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $219$hi;
      i64toi32_i32$5 = $219;
      i64toi32_i32$2 = $222$hi;
      i64toi32_i32$1 = $359;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = 0;
      $4($216 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 200 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 204 | 0) >> 2] | 0;
      $230 = i64toi32_i32$1;
      $230$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = $230$hi;
      i64toi32_i32$2 = $230;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $231$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $231$hi;
      i64toi32_i32$2 = 0;
      $4($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
      $233 = $5_1 + 160 | 0;
      i64toi32_i32$2 = $2$hi;
      $234 = $2_1;
      $234$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 184 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 188 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
        $360 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
        $360 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $237 = $360;
      $237$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 63;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $361 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        $361 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      $240$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $237$hi;
      i64toi32_i32$5 = $237;
      i64toi32_i32$0 = $240$hi;
      i64toi32_i32$4 = $361;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
      i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $234$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = 0;
      $4($233 | 0, $234 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
      $245 = $5_1 + 144 | 0;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 15;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
        $362 = 0;
      } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
        $362 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
      }
      $247$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $247$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = 0;
      $4($245 | 0, $362 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0);
      $250 = $5_1 + 112 | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      $251 = $2_1;
      $251$hi = i64toi32_i32$3;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $253 = i64toi32_i32$3;
      $253$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
      $258 = i64toi32_i32$3;
      $258$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$2 = $12_1;
      i64toi32_i32$3 = $258$hi;
      i64toi32_i32$0 = $258;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$0 = $12_1;
      $262 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $263$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $253$hi;
      i64toi32_i32$0 = $253;
      i64toi32_i32$1 = $263$hi;
      i64toi32_i32$2 = $262;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $264$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1;
      $266 = i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $267$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $264$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$5 = $267$hi;
      i64toi32_i32$0 = $266;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
      }
      $268$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = $268$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $269$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $251$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = $269$hi;
      i64toi32_i32$0 = 0;
      $4($250 | 0, $251 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      $273$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $273$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = 0;
      $4($5_1 + 128 | 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
      $6_1 = $6_1 + ($9_1 - $8_1 | 0) | 0;
      block2: {
        i64toi32_i32$4 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$0;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
          $365 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
          $365 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
        }
        $14_1 = $365;
        $14$hi = i64toi32_i32$1;
        $284 = $14_1;
        $284$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$1;
        $15$hi = i64toi32_i32$4;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
          $366 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $366 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        }
        $288 = $366;
        $288$hi = i64toi32_i32$1;
        i64toi32_i32$4 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 128 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 132 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 63;
        i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $367 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
          $367 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
        }
        $291$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $288$hi;
        i64toi32_i32$0 = $288;
        i64toi32_i32$4 = $291$hi;
        i64toi32_i32$5 = $367;
        i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
        $292 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
        $292$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $284$hi;
        i64toi32_i32$1 = $284;
        i64toi32_i32$0 = $292$hi;
        i64toi32_i32$5 = $292;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $16_1 = i64toi32_i32$3;
        $16$hi = i64toi32_i32$2;
        i64toi32_i32$4 = i64toi32_i32$3;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 13927;
        i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$3;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 32;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = 0;
          $368 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
          $368 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
        }
        $2_1 = $368;
        $2$hi = i64toi32_i32$4;
        $298 = $2_1;
        $298$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$2 = 65536;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        $21_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
        $21$hi = i64toi32_i32$2;
        i64toi32_i32$4 = $21_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
          $369 = 0;
        } else {
          i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
          $369 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
        }
        $22_1 = $369;
        $22$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $22_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 32;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = 0;
          $370 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
          $370 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
        }
        $4_1 = $370;
        $4$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $298$hi;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$2 = __wasm_i64_mul($298 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $17_1 = i64toi32_i32$2;
        $17$hi = i64toi32_i32$4;
        $307 = i64toi32_i32$2;
        $307$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
          $372 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
          $372 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
        }
        $12_1 = $372;
        $12$hi = i64toi32_i32$2;
        i64toi32_i32$4 = $12_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = 32;
        i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = 0;
          $373 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
          $373 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
        }
        $11_1 = $373;
        $11$hi = i64toi32_i32$3;
        $312 = $11_1;
        $312$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $20$hi;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = $16_1;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $20_1;
        $315 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $316 = $315;
        $316$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$5 = $14_1;
        i64toi32_i32$4 = $16_1;
        $319 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$5 = 0;
        $320 = $319;
        $320$hi = i64toi32_i32$5;
        i64toi32_i32$4 = $5_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 120 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 124 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
          $374 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
          $374 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
        }
        $323 = $374;
        $323$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$3 = 63;
        i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = 0;
          $376 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
          $376 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
        }
        $325$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $323$hi;
        i64toi32_i32$5 = $323;
        i64toi32_i32$2 = $325$hi;
        i64toi32_i32$3 = $376;
        i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        $326 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
        $326$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$4 = $15_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 63;
        i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $378 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
          $378 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
        }
        $328$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $326$hi;
        i64toi32_i32$2 = $326;
        i64toi32_i32$4 = $328$hi;
        i64toi32_i32$3 = $378;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $329$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $320$hi;
        i64toi32_i32$5 = $320;
        i64toi32_i32$2 = $329$hi;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $330$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $316$hi;
        i64toi32_i32$0 = $316;
        i64toi32_i32$5 = $330$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$2;
        i64toi32_i32$4 = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $379 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
          $379 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
        }
        $16_1 = $379;
        $16$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $312$hi;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$4 = __wasm_i64_mul($312 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $336 = i64toi32_i32$4;
        $336$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $307$hi;
        i64toi32_i32$2 = $307;
        i64toi32_i32$4 = $336$hi;
        i64toi32_i32$3 = $336;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $14_1 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$3 = $17_1;
        $340 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $341 = $340;
        $341$hi = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$5;
        $342 = i64toi32_i32$0;
        $342$hi = i64toi32_i32$1;
        $343 = i64toi32_i32$0;
        $343$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$3 = $19_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = -1;
        i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
        $19_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
        $19$hi = i64toi32_i32$5;
        $346 = $19_1;
        $346$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 63;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = 0;
          $384 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
          $384 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        $23_1 = $384;
        $23$hi = i64toi32_i32$3;
        $349 = $23_1;
        $349$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$5 = $10_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 1;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
          $385 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $385 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $351$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $349$hi;
        i64toi32_i32$3 = $349;
        i64toi32_i32$5 = $351$hi;
        i64toi32_i32$2 = $385;
        i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        $10_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $346$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = __wasm_i64_mul($346 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $355 = i64toi32_i32$1;
        $355$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $343$hi;
        i64toi32_i32$5 = $343;
        i64toi32_i32$1 = $355$hi;
        i64toi32_i32$2 = $355;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $14_1 = i64toi32_i32$4;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $342$hi;
        i64toi32_i32$3 = $342;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        $358 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $359$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $341$hi;
        i64toi32_i32$2 = $341;
        i64toi32_i32$0 = $359$hi;
        i64toi32_i32$5 = $358;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $360$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $363 = i64toi32_i32$2;
        $363$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $360$hi;
        i64toi32_i32$3 = i64toi32_i32$1;
        i64toi32_i32$2 = $363$hi;
        i64toi32_i32$5 = $363;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $364 = i64toi32_i32$0;
        $364$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $19$hi;
        i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $17_1 = i64toi32_i32$3;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $371 = i64toi32_i32$3;
        $371$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$4 = $17_1;
        i64toi32_i32$3 = $371$hi;
        i64toi32_i32$5 = $371;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $15_1 = i64toi32_i32$2;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$5 = $17_1;
        $375 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = $375;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 32;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
          $386 = 0;
        } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
          $386 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        }
        $377 = $386;
        $377$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$1 = $15_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = 32;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $387 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
          $387 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
        }
        $379$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $377$hi;
        i64toi32_i32$0 = $377;
        i64toi32_i32$1 = $379$hi;
        i64toi32_i32$4 = $387;
        i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
        $380 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
        $380$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $364$hi;
        i64toi32_i32$5 = $364;
        i64toi32_i32$0 = $380$hi;
        i64toi32_i32$4 = $380;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $381 = i64toi32_i32$3;
        $381$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $14$hi;
        $382 = $14_1;
        $382$hi = i64toi32_i32$2;
        $383 = $14_1;
        $383$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$1 = $15_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = 32;
        i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
          $389 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
          $389 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
        }
        $385$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $383$hi;
        i64toi32_i32$2 = $383;
        i64toi32_i32$1 = $385$hi;
        i64toi32_i32$4 = $389;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $14_1 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $382$hi;
        i64toi32_i32$5 = $382;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        $388 = i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$5 = 0;
        $389$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $381$hi;
        i64toi32_i32$4 = $381;
        i64toi32_i32$3 = $389$hi;
        i64toi32_i32$2 = $388;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $390 = i64toi32_i32$1;
        $390$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        $391 = $14_1;
        $391$hi = i64toi32_i32$0;
        $392 = $14_1;
        $392$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = -1;
        i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
        $20_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
        $20$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $401 = i64toi32_i32$5;
        $401$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$0 = $17_1;
        i64toi32_i32$5 = $401$hi;
        i64toi32_i32$2 = $401;
        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $15_1 = i64toi32_i32$3;
        $15$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = $15$hi;
        i64toi32_i32$4 = i64toi32_i32$3;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$2 = $17_1;
        i64toi32_i32$4 = 0;
        $406 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        $406$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$1;
        $407 = i64toi32_i32$3;
        $407$hi = i64toi32_i32$1;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = -2;
        i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
        $17_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $413 = i64toi32_i32$2;
        $413$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $15$hi;
        i64toi32_i32$4 = i64toi32_i32$3;
        i64toi32_i32$2 = $413$hi;
        i64toi32_i32$0 = $413;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $15_1 = i64toi32_i32$5;
        $15$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $407$hi;
        i64toi32_i32$1 = $407;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$0 = i64toi32_i32$5;
        $416 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $417$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $406$hi;
        i64toi32_i32$0 = $406;
        i64toi32_i32$3 = $417$hi;
        i64toi32_i32$4 = $416;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $418$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $392$hi;
        i64toi32_i32$1 = $392;
        i64toi32_i32$0 = $418$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $14_1 = i64toi32_i32$3;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $391$hi;
        i64toi32_i32$5 = $391;
        i64toi32_i32$1 = $14$hi;
        i64toi32_i32$4 = i64toi32_i32$3;
        $421 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$5 = 0;
        $422$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $390$hi;
        i64toi32_i32$4 = $390;
        i64toi32_i32$2 = $422$hi;
        i64toi32_i32$1 = $421;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $423 = i64toi32_i32$0;
        $423$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $14$hi;
        $424 = $14_1;
        $424$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$3 = $20$hi;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$4 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $431 = i64toi32_i32$4;
        $431$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $24$hi;
        i64toi32_i32$5 = $24_1;
        i64toi32_i32$4 = $431$hi;
        i64toi32_i32$1 = $431;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $4_1 = i64toi32_i32$2;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $436 = i64toi32_i32$5;
        $436$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$5 = $436$hi;
        i64toi32_i32$1 = $436;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
        }
        $10_1 = i64toi32_i32$4;
        $10$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$3 = $19$hi;
        i64toi32_i32$3 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $441 = i64toi32_i32$3;
        $441$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$3 = $441$hi;
        i64toi32_i32$1 = $441;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $16_1 = i64toi32_i32$5;
        $16$hi = i64toi32_i32$4;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 32;
        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $393 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
          $393 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
        }
        $444 = $393;
        $444$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$4 = $10_1;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$1 = $16_1;
        $447 = i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
        i64toi32_i32$4 = 0;
        $448 = $447;
        $448$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$4 = $24$hi;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$0 = $24$hi;
        i64toi32_i32$2 = $24_1;
        $451 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $452$hi = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$0 = $10_1;
        $455 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $456$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $452$hi;
        i64toi32_i32$0 = $451;
        i64toi32_i32$1 = $456$hi;
        i64toi32_i32$4 = $455;
        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
        }
        $457$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $448$hi;
        i64toi32_i32$2 = $448;
        i64toi32_i32$0 = $457$hi;
        i64toi32_i32$4 = i64toi32_i32$3;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 32;
        i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
          $394 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
          $394 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
        }
        $459$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $444$hi;
        i64toi32_i32$3 = $444;
        i64toi32_i32$5 = $459$hi;
        i64toi32_i32$4 = $394;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        $460 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
        $460$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $424$hi;
        i64toi32_i32$2 = $424;
        i64toi32_i32$3 = $460$hi;
        i64toi32_i32$4 = $460;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $4_1 = i64toi32_i32$0;
        $4$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $14$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$4 = $14_1;
        $464 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$5 = 0;
        $465$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $423$hi;
        i64toi32_i32$4 = $423;
        i64toi32_i32$1 = $465$hi;
        i64toi32_i32$2 = $464;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $466 = i64toi32_i32$3;
        $466$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        $467 = $4_1;
        $467$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $15$hi;
        $468 = $15_1;
        $468$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $475 = i64toi32_i32$4;
        $475$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$5 = $2_1;
        i64toi32_i32$4 = $475$hi;
        i64toi32_i32$2 = $475;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $395 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
          $395 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
        }
        $478 = $395;
        $478$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $2$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$2 = $11_1;
        $481 = i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = $481;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $396 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $396 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $483$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $478$hi;
        i64toi32_i32$3 = $478;
        i64toi32_i32$2 = $483$hi;
        i64toi32_i32$0 = $396;
        i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
        $484 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        $484$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $468$hi;
        i64toi32_i32$5 = $468;
        i64toi32_i32$3 = $484$hi;
        i64toi32_i32$0 = $484;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
        }
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $15$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$2 = 0;
        $489 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
        $489$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$1;
        $490 = i64toi32_i32$4;
        $490$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$0 = $16_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 32;
        i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
          $397 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
          $397 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        }
        $492$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $490$hi;
        i64toi32_i32$2 = $490;
        i64toi32_i32$0 = $492$hi;
        i64toi32_i32$5 = $397;
        i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $493$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$4 = $493$hi;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$5 = $2_1;
        $495 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $496$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $489$hi;
        i64toi32_i32$5 = $489;
        i64toi32_i32$4 = $496$hi;
        i64toi32_i32$2 = $495;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
        }
        $497$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $467$hi;
        i64toi32_i32$1 = $467;
        i64toi32_i32$5 = $497$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
        }
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4_1;
        $501 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $502$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $466$hi;
        i64toi32_i32$2 = $466;
        i64toi32_i32$0 = $502$hi;
        i64toi32_i32$1 = $501;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$4;
        i64toi32_i32$3 = i64toi32_i32$5;
        i64toi32_i32$2 = 131071;
        i64toi32_i32$1 = -1;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
          i64toi32_i32$3 = $22$hi;
          i64toi32_i32$3 = $23$hi;
          i64toi32_i32$3 = $22$hi;
          i64toi32_i32$1 = $22_1;
          i64toi32_i32$4 = $23$hi;
          i64toi32_i32$2 = $23_1;
          i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
          $21_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
          $21$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $2$hi;
          i64toi32_i32$4 = $4$hi;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$4 = $2$hi;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$3 = $3$hi;
          i64toi32_i32$2 = $18$hi;
          $4($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$2 | 0);
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$4 = 49;
          i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
            i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
            $398 = 0;
          } else {
            i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
            $398 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
          }
          $516$hi = i64toi32_i32$3;
          i64toi32_i32$2 = $5_1;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
          $518 = i64toi32_i32$3;
          $518$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $516$hi;
          i64toi32_i32$2 = $398;
          i64toi32_i32$3 = $518$hi;
          i64toi32_i32$4 = $518;
          i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          $519$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $5_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
          $1_1 = i64toi32_i32$5;
          $1$hi = i64toi32_i32$2;
          i64toi32_i32$1 = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          i64toi32_i32$4 = 0;
          $523 = (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$1 = 0;
          $524$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $519$hi;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$2 = $524$hi;
          i64toi32_i32$5 = $523;
          i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
          i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
          $10_1 = i64toi32_i32$3;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$0 = 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = $1$hi;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
          i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
          $11_1 = i64toi32_i32$2;
          $11$hi = i64toi32_i32$3;
          $530 = $6_1 + 16382 | 0;
          break block2;
        }
        $532 = $5_1 + 96 | 0;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 63;
        i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $399 = 0;
        } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $399 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $534 = $399;
        $534$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $400 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $400 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
        }
        $536$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $534$hi;
        i64toi32_i32$1 = $534;
        i64toi32_i32$3 = $536$hi;
        i64toi32_i32$5 = $400;
        i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
        $2$hi = i64toi32_i32$3;
        $538 = $2_1;
        $538$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 1;
        i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $402 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
          $402 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
        }
        $4_1 = $402;
        $4$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $538$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$5 = $18$hi;
        $4($532 | 0, $538 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 48;
        i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $403 = 0;
        } else {
          i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
          $403 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $545$hi = i64toi32_i32$3;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 104 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 108 | 0) >> 2] | 0;
        $547 = i64toi32_i32$3;
        $547$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $545$hi;
        i64toi32_i32$5 = $403;
        i64toi32_i32$3 = $547$hi;
        i64toi32_i32$1 = $547;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $548$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$2;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 0;
        $552 = (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$0 = 0;
        $553$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $548$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$5 = $553$hi;
        i64toi32_i32$2 = $552;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        $10_1 = i64toi32_i32$3;
        $10$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1$hi;
        $12_1 = $1_1;
        $12$hi = i64toi32_i32$3;
        $530 = $6_1 + 16383 | 0;
      }
      $6_1 = $530;
      if (($6_1 | 0) >= (32767 | 0)) {
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$4 = $13_1;
        i64toi32_i32$0 = 2147418112;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        $13_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
        $13$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $1_1 = 0;
        $1$hi = i64toi32_i32$0;
        break block1;
      }
      block3: {
        if (($6_1 | 0) > (0 | 0)) {
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$4 = 0;
          i64toi32_i32$2 = 1;
          i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
            $404 = 0;
          } else {
            i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
            $404 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
          }
          $568 = $404;
          $568$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $11$hi;
          i64toi32_i32$0 = $11_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = 63;
          i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
            i64toi32_i32$3 = 0;
            $405 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
          } else {
            i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
            $405 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
          }
          $570$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $568$hi;
          i64toi32_i32$4 = $568;
          i64toi32_i32$0 = $570$hi;
          i64toi32_i32$2 = $405;
          i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
          $10_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$3 = $4_1;
          i64toi32_i32$4 = 65535;
          i64toi32_i32$2 = -1;
          i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
          $573 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
          $573$hi = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          i64toi32_i32$0 = $6_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = 48;
          i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
            i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
            $408 = 0;
          } else {
            i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
            $408 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
          }
          $576$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $573$hi;
          i64toi32_i32$4 = $573;
          i64toi32_i32$0 = $576$hi;
          i64toi32_i32$2 = $408;
          i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
          $12_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
          $12$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = 0;
          i64toi32_i32$2 = 1;
          i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
            $409 = 0;
          } else {
            i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
            $409 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
          }
          $580 = $409;
          $580$hi = i64toi32_i32$4;
          break block3;
        }
        if (($6_1 | 0) <= (-113 | 0)) {
          i64toi32_i32$4 = 0;
          $1_1 = 0;
          $1$hi = i64toi32_i32$4;
          break block1;
        }
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$4 = $2$hi;
        i64toi32_i32$3 = $4$hi;
        $20($5_1 - -64 | 0 | 0, $2_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = $21$hi;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$4 = $21$hi;
        $5($5_1 + 48 | 0 | 0, $12_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $6_1 + 112 | 0 | 0);
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$4;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$3;
        $12$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$2 = $12$hi;
        $4($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$2 | 0);
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 56 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 60 | 0) >> 2] | 0;
        $606 = i64toi32_i32$2;
        $606$hi = i64toi32_i32$0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 1;
        i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
          $410 = 0;
        } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
          $410 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
        }
        $609 = $410;
        $609$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $1_1 = i64toi32_i32$0;
        $1$hi = i64toi32_i32$3;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 63;
        i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $411 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
          $411 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
        }
        $613$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $609$hi;
        i64toi32_i32$3 = $609;
        i64toi32_i32$2 = $613$hi;
        i64toi32_i32$4 = $411;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        $614 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
        $614$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $606$hi;
        i64toi32_i32$0 = $606;
        i64toi32_i32$3 = $614$hi;
        i64toi32_i32$4 = $614;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        $615 = i64toi32_i32$1;
        $615$hi = i64toi32_i32$5;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        $618 = i64toi32_i32$5;
        $618$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = 1;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $412 = 0;
        } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
          $412 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $1_1 = $412;
        $1$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $618$hi;
        i64toi32_i32$0 = $618;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$4 = $1_1;
        $622 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$0 = 0;
        $623$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $615$hi;
        i64toi32_i32$4 = $615;
        i64toi32_i32$5 = $623$hi;
        i64toi32_i32$2 = $622;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0;
        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
        $10_1 = i64toi32_i32$3;
        $10$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$4 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $580 = i64toi32_i32$5;
        $580$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = $580$hi;
      $4_1 = $580;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      $4($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$0 | 0, 3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      $4($5_1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$1 | 0, 5 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $12$hi;
      $636 = $12_1;
      $636$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      $637 = $2_1;
      $637$hi = i64toi32_i32$3;
      $638 = $2_1;
      $638$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$2;
      $639 = $3_1;
      $639$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $639$hi;
      i64toi32_i32$0 = $639;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      $646 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$4;
      $650 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $651$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$0 = $651$hi;
      i64toi32_i32$5 = $650;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
      }
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$5 = $18_1;
      $655 = i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = $18_1;
      $659 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) | 0 ? $646 : $655;
      i64toi32_i32$5 = 0;
      $660$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $638$hi;
      i64toi32_i32$3 = $638;
      i64toi32_i32$2 = $660$hi;
      i64toi32_i32$4 = $659;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
      }
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $637$hi;
      i64toi32_i32$5 = $637;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      $663 = i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $664$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $636$hi;
      i64toi32_i32$4 = $636;
      i64toi32_i32$1 = $664$hi;
      i64toi32_i32$3 = $663;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
      }
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$0;
      $666 = i64toi32_i32$2;
      $666$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      $667 = $2_1;
      $667$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = 2147418112;
      i64toi32_i32$3 = 0;
      $670 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
      $673 = i64toi32_i32$5;
      $673$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$5 = $673$hi;
      i64toi32_i32$4 = $673;
      $674 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      $679 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = $4_1;
      $684 = $670 & ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0 ? $674 : $679) | 0;
      i64toi32_i32$5 = 0;
      $685$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$0 = $684;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $667$hi;
      i64toi32_i32$5 = $667;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      $688 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $689$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $666$hi;
      i64toi32_i32$0 = $666;
      i64toi32_i32$2 = $689$hi;
      i64toi32_i32$3 = $688;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
      }
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$1;
      $691 = i64toi32_i32$4;
      $691$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$3 = 0;
      $694 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $697 = i64toi32_i32$5;
      $697$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$5 = $697$hi;
      i64toi32_i32$0 = $697;
      $698 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $3_1 = i64toi32_i32$3;
      $3$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $703 = i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = $3_1;
      $708 = $694 & ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $698 : $703) | 0;
      i64toi32_i32$5 = 0;
      $709$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$0 = $709$hi;
      i64toi32_i32$1 = $708;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
      }
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      $713 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $714$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $691$hi;
      i64toi32_i32$1 = $691;
      i64toi32_i32$4 = $714$hi;
      i64toi32_i32$3 = $713;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
      }
      $715$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $715$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $0_1;
    HEAP32[i64toi32_i32$5 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $13$hi;
    HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $13_1;
    HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
    global$0 = $5_1 + 336 | 0;
  }
  function $41($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi) {
    $0_1 = $0_1 | 0;
    $0$hi = $0$hi | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    var i64toi32_i32$3 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$2 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $3_1 = 0,
      $4$hi = 0,
      $26_1 = 0,
      $27_1 = 0,
      $28_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $31_1 = 0,
      $32_1 = 0,
      $33_1 = 0,
      $35_1 = 0,
      $7_1 = 0,
      $11_1 = 0,
      $18_1 = 0,
      $25_1 = 0,
      $25$hi = 0,
      $34_1 = 0,
      $42_1 = 0,
      $42$hi = 0,
      $46_1 = 0,
      $57_1 = 0,
      $57$hi = 0;
    $3_1 = -1;
    block: {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      $7_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$0 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $11_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$0 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $7_1 : $11_1) {
        break block;
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$0 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $5_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      $18_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ($18_1 & ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) | 0) {
        break block;
      }
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $25_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $25$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$3 = $25$hi;
      i64toi32_i32$2 = $25_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0 | i64toi32_i32$3 | 0)) {
        return 0 | 0;
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
        $26_1 = 1;
      } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
            $27_1 = 0;
          } else {
            $27_1 = 1;
          }
          $28_1 = $27_1;
        } else {
          $28_1 = 0;
        }
        $26_1 = $28_1;
      }
      if ($26_1) {
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$1 = $2_1;
        $34_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = $2_1;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $29_1 = 1;
        } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
              $30_1 = 0;
            } else {
              $30_1 = 1;
            }
            $31_1 = $30_1;
          } else {
            $31_1 = 0;
          }
          $29_1 = $31_1;
        }
        if ($34_1 & $29_1 | 0) {
          break block;
        }
        i64toi32_i32$1 = $0$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
        $42_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $42$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $0$hi;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$0 = $42$hi;
        i64toi32_i32$3 = $42_1;
        i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        return (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0 | 0;
      }
      i64toi32_i32$2 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      $46_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
        $32_1 = 1;
      } else {
        if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
            $33_1 = 0;
          } else {
            $33_1 = 1;
          }
          $35_1 = $33_1;
        } else {
          $35_1 = 0;
        }
        $32_1 = $35_1;
      }
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      if ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) | 0 ? $46_1 : $32_1) {
        break block;
      }
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
      $57_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
      $57$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = $57$hi;
      i64toi32_i32$3 = $57_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      $3_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    }
    return $3_1 | 0;
  }
  function $42($0_1) {
    $0_1 = $0_1 | 0;
    var i64toi32_i32$4 = 0,
      i64toi32_i32$0 = 0,
      $1_1 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      $9_1 = 0,
      $7_1 = 0,
      $8_1 = 0,
      i64toi32_i32$2 = 0;
    block: {
      i64toi32_i32$0 = 0;
      $1_1 = $0_1;
      $7_1 = $0_1;
      $8_1 = $0_1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $1_1 = ($0_1 | 1 | 0) >>> 0 < 65536 >>> 0 ? $7_1 : $9_1 ? -1 : $8_1;
      $0_1 = $14($1_1 | 0) | 0;
      if (!$0_1) {
        break block;
      }
      if (!((HEAPU8[($0_1 - 4 | 0) >> 0] | 0) & 3 | 0)) {
        break block;
      }
      $12($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
    }
    return $0_1 | 0;
  }
  function $43($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $7_1 = 0,
      $339 = 0,
      $355 = 0,
      $362 = 0,
      $369 = 0;
    $5_1 = $0_1 + $1_1 | 0;
    block1: {
      block: {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 & 1 | 0) {
          break block;
        }
        if (!($2_1 & 3 | 0)) {
          break block1;
        }
        $2_1 = HEAP32[$0_1 >> 2] | 0;
        $1_1 = $2_1 + $1_1 | 0;
        block3: {
          block4: {
            block2: {
              $0_1 = $0_1 - $2_1 | 0;
              if (($0_1 | 0) != (HEAP32[5264 >> 2] | 0 | 0)) {
                if ($2_1 >>> 0 <= 255 >>> 0) {
                  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  $4_1 = $2_1 >>> 3 | 0;
                  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                  if (($2_1 | 0) != ($3_1 | 0)) {
                    break block2;
                  }
                  HEAP32[5244 >> 2] = (HEAP32[5244 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                  break block;
                }
                $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                if (($0_1 | 0) != ($2_1 | 0)) {
                  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  HEAP32[5260 >> 2] | 0;
                  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
                  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
                  break block3;
                }
                $4_1 = $0_1 + 20 | 0;
                $3_1 = HEAP32[$4_1 >> 2] | 0;
                if (!$3_1) {
                  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                  if (!$3_1) {
                    break block4;
                  }
                  $4_1 = $0_1 + 16 | 0;
                }
                label: while (1) {
                  $7_1 = $4_1;
                  $2_1 = $3_1;
                  $4_1 = $2_1 + 20 | 0;
                  $3_1 = HEAP32[$4_1 >> 2] | 0;
                  if ($3_1) {
                    continue label;
                  }
                  $4_1 = $2_1 + 16 | 0;
                  $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                  if ($3_1) {
                    continue label;
                  }
                  break label;
                }
                HEAP32[$7_1 >> 2] = 0;
                break block3;
              }
              $2_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
                break block;
              }
              HEAP32[5252 >> 2] = $1_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
              HEAP32[$5_1 >> 2] = $1_1;
              return;
            }
            HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
            HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
            break block;
          }
          $2_1 = 0;
        }
        if (!$6_1) {
          break block;
        }
        block5: {
          $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
          $4_1 = ($3_1 << 2 | 0) + 5548 | 0;
          if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($0_1 | 0)) {
            HEAP32[$4_1 >> 2] = $2_1;
            if ($2_1) {
              break block5;
            }
            HEAP32[5248 >> 2] = (HEAP32[5248 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
            break block;
          }
          HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
          if (!$2_1) {
            break block;
          }
        }
        HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
        $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
          HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
          HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
        }
        $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        if (!$3_1) {
          break block;
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
      }
      block9: {
        block6: {
          block7: {
            block8: {
              $2_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              if (!($2_1 & 2 | 0)) {
                if ((HEAP32[5268 >> 2] | 0 | 0) == ($5_1 | 0)) {
                  HEAP32[5268 >> 2] = $0_1;
                  $1_1 = (HEAP32[5256 >> 2] | 0) + $1_1 | 0;
                  HEAP32[5256 >> 2] = $1_1;
                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                  if (($0_1 | 0) != (HEAP32[5264 >> 2] | 0 | 0)) {
                    break block1;
                  }
                  HEAP32[5252 >> 2] = 0;
                  HEAP32[5264 >> 2] = 0;
                  return;
                }
                if ((HEAP32[5264 >> 2] | 0 | 0) == ($5_1 | 0)) {
                  HEAP32[5264 >> 2] = $0_1;
                  $1_1 = (HEAP32[5252 >> 2] | 0) + $1_1 | 0;
                  HEAP32[5252 >> 2] = $1_1;
                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                  HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
                  return;
                }
                $1_1 = ($2_1 & -8 | 0) + $1_1 | 0;
                if ($2_1 >>> 0 <= 255 >>> 0) {
                  $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                  $4_1 = $2_1 >>> 3 | 0;
                  $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                  if (($3_1 | 0) == ($2_1 | 0)) {
                    HEAP32[5244 >> 2] = (HEAP32[5244 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                    break block6;
                  }
                  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
                  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
                  break block6;
                }
                $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
                $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($5_1 | 0) != ($2_1 | 0)) {
                  $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                  HEAP32[5260 >> 2] | 0;
                  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
                  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
                  break block7;
                }
                $4_1 = $5_1 + 20 | 0;
                $3_1 = HEAP32[$4_1 >> 2] | 0;
                if (!$3_1) {
                  $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if (!$3_1) {
                    break block8;
                  }
                  $4_1 = $5_1 + 16 | 0;
                }
                label1: while (1) {
                  $7_1 = $4_1;
                  $2_1 = $3_1;
                  $4_1 = $2_1 + 20 | 0;
                  $3_1 = HEAP32[$4_1 >> 2] | 0;
                  if ($3_1) {
                    continue label1;
                  }
                  $4_1 = $2_1 + 16 | 0;
                  $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                  if ($3_1) {
                    continue label1;
                  }
                  break label1;
                }
                HEAP32[$7_1 >> 2] = 0;
                break block7;
              }
              HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
              HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
              break block9;
            }
            $2_1 = 0;
          }
          if (!$6_1) {
            break block6;
          }
          block10: {
            $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
            $4_1 = ($3_1 << 2 | 0) + 5548 | 0;
            if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
              HEAP32[$4_1 >> 2] = $2_1;
              if ($2_1) {
                break block10;
              }
              HEAP32[5248 >> 2] = (HEAP32[5248 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
              break block6;
            }
            HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
            if (!$2_1) {
              break block6;
            }
          }
          HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
          $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          if ($3_1) {
            HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
          }
          $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (!$3_1) {
            break block6;
          }
          HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
          HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
        HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
        if (($0_1 | 0) != (HEAP32[5264 >> 2] | 0 | 0)) {
          break block9;
        }
        HEAP32[5252 >> 2] = $1_1;
        return;
      }
      if ($1_1 >>> 0 <= 255 >>> 0) {
        $2_1 = ($1_1 & -8 | 0) + 5284 | 0;
        block11: {
          $3_1 = HEAP32[5244 >> 2] | 0;
          $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
          if (!($3_1 & $1_1 | 0)) {
            HEAP32[5244 >> 2] = $1_1 | $3_1 | 0;
            $339 = $2_1;
            break block11;
          }
          $339 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        }
        $1_1 = $339;
        HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
        return;
      }
      $3_1 = 31;
      if ($1_1 >>> 0 <= 16777215 >>> 0) {
        $2_1 = $1_1 >>> 8 | 0;
        $355 = $2_1;
        $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
        $3_1 = $355 << $2_1 | 0;
        $362 = $3_1;
        $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
        $4_1 = $362 << $3_1 | 0;
        $369 = $4_1;
        $4_1 = (($4_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
        $2_1 = (($369 << $4_1 | 0) >>> 15 | 0) - ($2_1 | $3_1 | 0 | $4_1 | 0) | 0;
        $3_1 = ($2_1 << 1 | 0 | (($1_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
      }
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = 0;
      $2_1 = ($3_1 << 2 | 0) + 5548 | 0;
      block13: {
        block12: {
          $4_1 = HEAP32[5248 >> 2] | 0;
          $7_1 = 1 << $3_1 | 0;
          if (!($4_1 & $7_1 | 0)) {
            HEAP32[5248 >> 2] = $4_1 | $7_1 | 0;
            HEAP32[$2_1 >> 2] = $0_1;
            HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
            break block12;
          }
          $3_1 = $1_1 << (($3_1 | 0) != (31 | 0) ? 25 - ($3_1 >>> 1 | 0) | 0 : 0) | 0;
          $2_1 = HEAP32[$2_1 >> 2] | 0;
          label2: while (1) {
            $4_1 = $2_1;
            if (((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
              break block13;
            }
            $2_1 = $3_1 >>> 29 | 0;
            $3_1 = $3_1 << 1 | 0;
            $7_1 = $4_1 + ($2_1 & 4 | 0) | 0;
            $2_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
            if ($2_1) {
              continue label2;
            }
            break label2;
          }
          HEAP32[($7_1 + 16 | 0) >> 2] = $0_1;
          HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
        }
        HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
        return;
      }
      $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    }
  }
  function $44($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $7_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $8_1 = 0,
      $9_1 = 0,
      $36_1 = 0,
      $10_1 = 0,
      $11_1 = 0,
      $12_1 = 0;
    if (!$0_1) {
      return $14($1_1 | 0) | 0 | 0;
    }
    if ($1_1 >>> 0 >= -64 >>> 0) {
      HEAP32[5060 >> 2] = 48;
      return 0 | 0;
    }
    block: {
      $5_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
      $4_1 = $0_1 - 8 | 0;
      $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $3_1 = $8_1 & -8 | 0;
      block1: {
        if (!($8_1 & 3 | 0)) {
          $36_1 = 0;
          if ($5_1 >>> 0 < 256 >>> 0) {
            break block;
          }
          if (($5_1 + 4 | 0) >>> 0 <= $3_1 >>> 0) {
            $2_1 = $4_1;
            if (($3_1 - $5_1 | 0) >>> 0 <= ((HEAP32[5724 >> 2] | 0) << 1 | 0) >>> 0) {
              break block1;
            }
          }
          $36_1 = 0;
          break block;
        }
        $6_1 = $3_1 + $4_1 | 0;
        block2: {
          if ($3_1 >>> 0 >= $5_1 >>> 0) {
            $2_1 = $3_1 - $5_1 | 0;
            if ($2_1 >>> 0 < 16 >>> 0) {
              break block2;
            }
            HEAP32[($4_1 + 4 | 0) >> 2] = $8_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
            $3_1 = $4_1 + $5_1 | 0;
            HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
            HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
            $43($3_1 | 0, $2_1 | 0);
            break block2;
          }
          if ((HEAP32[5268 >> 2] | 0 | 0) == ($6_1 | 0)) {
            $3_1 = (HEAP32[5256 >> 2] | 0) + $3_1 | 0;
            if ($3_1 >>> 0 <= $5_1 >>> 0) {
              break block1;
            }
            HEAP32[($4_1 + 4 | 0) >> 2] = $8_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
            $2_1 = $4_1 + $5_1 | 0;
            $3_1 = $3_1 - $5_1 | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
            HEAP32[5256 >> 2] = $3_1;
            HEAP32[5268 >> 2] = $2_1;
            break block2;
          }
          if ((HEAP32[5264 >> 2] | 0 | 0) == ($6_1 | 0)) {
            $3_1 = (HEAP32[5252 >> 2] | 0) + $3_1 | 0;
            if ($3_1 >>> 0 < $5_1 >>> 0) {
              break block1;
            }
            block3: {
              $2_1 = $3_1 - $5_1 | 0;
              if ($2_1 >>> 0 >= 16 >>> 0) {
                HEAP32[($4_1 + 4 | 0) >> 2] = $8_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
                $7_1 = $4_1 + $5_1 | 0;
                HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
                $3_1 = $3_1 + $4_1 | 0;
                HEAP32[$3_1 >> 2] = $2_1;
                HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
                break block3;
              }
              HEAP32[($4_1 + 4 | 0) >> 2] = $8_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
              $2_1 = $3_1 + $4_1 | 0;
              HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              $2_1 = 0;
            }
            HEAP32[5264 >> 2] = $7_1;
            HEAP32[5252 >> 2] = $2_1;
            break block2;
          }
          $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          if ($7_1 & 2 | 0) {
            break block1;
          }
          $9_1 = ($7_1 & -8 | 0) + $3_1 | 0;
          if ($9_1 >>> 0 < $5_1 >>> 0) {
            break block1;
          }
          $11_1 = $9_1 - $5_1 | 0;
          block4: {
            if ($7_1 >>> 0 <= 255 >>> 0) {
              $2_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
              $7_1 = $7_1 >>> 3 | 0;
              $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
              if (($2_1 | 0) == ($3_1 | 0)) {
                HEAP32[5244 >> 2] = (HEAP32[5244 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
                break block4;
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break block4;
            }
            $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
            block5: {
              $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
              if (($6_1 | 0) != ($3_1 | 0)) {
                $2_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                HEAP32[5260 >> 2] | 0;
                HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
                break block5;
              }
              block6: {
                $2_1 = $6_1 + 20 | 0;
                $7_1 = HEAP32[$2_1 >> 2] | 0;
                if (!$7_1) {
                  $7_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                  if (!$7_1) {
                    break block6;
                  }
                  $2_1 = $6_1 + 16 | 0;
                }
                label: while (1) {
                  $12_1 = $2_1;
                  $3_1 = $7_1;
                  $2_1 = $3_1 + 20 | 0;
                  $7_1 = HEAP32[$2_1 >> 2] | 0;
                  if ($7_1) {
                    continue label;
                  }
                  $2_1 = $3_1 + 16 | 0;
                  $7_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                  if ($7_1) {
                    continue label;
                  }
                  break label;
                }
                HEAP32[$12_1 >> 2] = 0;
                break block5;
              }
              $3_1 = 0;
            }
            if (!$10_1) {
              break block4;
            }
            block7: {
              $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
              $7_1 = ($2_1 << 2 | 0) + 5548 | 0;
              if ((HEAP32[$7_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                HEAP32[$7_1 >> 2] = $3_1;
                if ($3_1) {
                  break block7;
                }
                HEAP32[5248 >> 2] = (HEAP32[5248 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
                break block4;
              }
              HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
              if (!$3_1) {
                break block4;
              }
            }
            HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
            $2_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
            if ($2_1) {
              HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
              HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
            }
            $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
            if (!$2_1) {
              break block4;
            }
            HEAP32[($3_1 + 20 | 0) >> 2] = $2_1;
            HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
          }
          if ($11_1 >>> 0 <= 15 >>> 0) {
            HEAP32[($4_1 + 4 | 0) >> 2] = $8_1 & 1 | 0 | $9_1 | 0 | 2 | 0;
            $2_1 = $4_1 + $9_1 | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 1 | 0;
            break block2;
          }
          HEAP32[($4_1 + 4 | 0) >> 2] = $8_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
          $2_1 = $4_1 + $5_1 | 0;
          HEAP32[($2_1 + 4 | 0) >> 2] = $11_1 | 3 | 0;
          $3_1 = $4_1 + $9_1 | 0;
          HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
          $43($2_1 | 0, $11_1 | 0);
        }
        $2_1 = $4_1;
      }
      $36_1 = $2_1;
    }
    $2_1 = $36_1;
    if ($2_1) {
      return $2_1 + 8 | 0 | 0;
    }
    $2_1 = $14($1_1 | 0) | 0;
    if (!$2_1) {
      return 0 | 0;
    }
    $4_1 = HEAP32[($0_1 - 4 | 0) >> 2] | 0;
    $4_1 = ($4_1 & 3 | 0 ? -4 : -8) + ($4_1 & -8 | 0) | 0;
    $7($2_1 | 0, $0_1 | 0, ($1_1 >>> 0 > $4_1 >>> 0 ? $4_1 : $1_1) | 0) | 0;
    $8($0_1 | 0);
    return $2_1 | 0;
  }
  function $45($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $23_1 = 0,
      $67_1 = 0;
    if (!$0_1) {
      return 0 | 0;
    }
    block2: {
      block: {
        if ($0_1) {
          if ($1_1 >>> 0 <= 127 >>> 0) {
            break block;
          }
          block1: {
            if (!(HEAP32[(HEAP32[5216 >> 2] | 0) >> 2] | 0)) {
              if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
                break block;
              }
              break block1;
            }
            if ($1_1 >>> 0 <= 2047 >>> 0) {
              HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
              HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
              $23_1 = 2;
              break block2;
            }
            if (!(($1_1 & -8192 | 0 | 0) != (57344 | 0) & $1_1 >>> 0 >= 55296 >>> 0 | 0)) {
              HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
              HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
              HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
              $23_1 = 3;
              break block2;
            }
            if (($1_1 - 65536 | 0) >>> 0 <= 1048575 >>> 0) {
              HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
              HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
              HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
              HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
              $23_1 = 4;
              break block2;
            }
          }
          HEAP32[5060 >> 2] = 25;
          $67_1 = -1;
        } else {
          $67_1 = 1;
        }
        $23_1 = $67_1;
        break block2;
      }
      HEAP8[$0_1 >> 0] = $1_1;
      $23_1 = 1;
    }
    return $23_1 | 0;
  }
  function $46($0_1, $1_1, $2_1, $2$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    var i64toi32_i32$0 = 0;
    block: {
      if (!$0_1) {
        break block;
      }
      block4: {
        switch ($1_1 + 2 | 0 | 0) {
          case 0:
            i64toi32_i32$0 = $2$hi;
            HEAP8[$0_1 >> 0] = $2_1;
            return;
          case 1:
            i64toi32_i32$0 = $2$hi;
            HEAP16[$0_1 >> 1] = $2_1;
            return;
          case 2:
          case 3:
            i64toi32_i32$0 = $2$hi;
            HEAP32[$0_1 >> 2] = $2_1;
            return;
          case 5:
            break block4;
          default:
            break block;
        }
      }
      i64toi32_i32$0 = $2$hi;
      HEAP32[$0_1 >> 2] = $2_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    }
  }
  function $47($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$5 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$1 = 0,
      $5$hi = 0,
      $2_1 = 0,
      $5_1 = 0,
      i64toi32_i32$2 = 0,
      $3_1 = 0,
      i64toi32_i32$6 = 0,
      $17_1 = 0,
      $36_1 = 0,
      $42_1 = 0,
      $69_1 = 0,
      $99 = 0,
      $25_1 = 0,
      $26_1 = 0,
      $27_1 = 0,
      $122 = 0,
      $28_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $31_1 = 0,
      $32_1 = 0,
      $33_1 = 0,
      $4_1 = 0,
      $57_1 = 0,
      $83$hi = 0,
      $85 = 0,
      $85$hi = 0,
      $136$hi = 0;
    block9: {
      block4: {
        block2: {
          block1: {
            block: {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) != (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $17_1 = HEAPU8[$1_1 >> 0] | 0;
                break block;
              }
              $17_1 = $0($0_1 | 0) | 0;
            }
            $1_1 = $17_1;
            switch ($1_1 - 43 | 0 | 0) {
              case 0:
              case 2:
                break block1;
              default:
                break block2;
            }
          }
          $4_1 = ($1_1 | 0) == (45 | 0);
          block3: {
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $36_1 = HEAPU8[$1_1 >> 0] | 0;
              break block3;
            }
            $36_1 = $0($0_1 | 0) | 0;
          }
          $1_1 = $36_1;
          $42_1 = $1_1 - 58 | 0;
          break block4;
        }
        $42_1 = $1_1 - 58 | 0;
      }
      if ($42_1 >>> 0 >= -10 >>> 0) {
        $2_1 = $1_1 - 48 | 0;
        if ($2_1 >>> 0 < 10 >>> 0) {
          label: while (1) {
            $3_1 = ($1_1 + Math_imul($3_1, 10) | 0) - 48 | 0;
            $57_1 = ($3_1 | 0) < (214748364 | 0);
            block5: {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) != (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $69_1 = HEAPU8[$1_1 >> 0] | 0;
                break block5;
              }
              $69_1 = $0($0_1 | 0) | 0;
            }
            $1_1 = $69_1;
            $2_1 = $1_1 - 48 | 0;
            if ($57_1 & $2_1 >>> 0 <= 9 >>> 0 | 0) {
              continue label;
            }
            break label;
          }
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
          $5_1 = i64toi32_i32$1;
          $5$hi = i64toi32_i32$0;
        }
        block6: {
          if ($2_1 >>> 0 >= 10 >>> 0) {
            break block6;
          }
          label1: while (1) {
            i64toi32_i32$0 = 0;
            $83$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $5$hi;
            i64toi32_i32$1 = 0;
            i64toi32_i32$1 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $85 = i64toi32_i32$1;
            $85$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $83$hi;
            i64toi32_i32$2 = $1_1;
            i64toi32_i32$1 = $85$hi;
            i64toi32_i32$3 = $85;
            i64toi32_i32$4 = $1_1 + i64toi32_i32$3 | 0;
            i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            i64toi32_i32$0 = i64toi32_i32$4;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 48;
            i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
            i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
            i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
            i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
            $5_1 = i64toi32_i32$1;
            $5$hi = i64toi32_i32$4;
            block7: {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) != (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $99 = HEAPU8[$1_1 >> 0] | 0;
                break block7;
              }
              $99 = $0($0_1 | 0) | 0;
            }
            $1_1 = $99;
            $2_1 = $1_1 - 48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
              break block6;
            }
            i64toi32_i32$4 = $5$hi;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$0 = 21474836;
            i64toi32_i32$3 = 2061584302;
            if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
              $25_1 = 1;
            } else {
              if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                  $26_1 = 0;
                } else {
                  $26_1 = 1;
                }
                $27_1 = $26_1;
              } else {
                $27_1 = 0;
              }
              $25_1 = $27_1;
            }
            if ($25_1) {
              continue label1;
            }
            break label1;
          }
        }
        if ($2_1 >>> 0 < 10 >>> 0) {
          label2: while (1) {
            block8: {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) != (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $122 = HEAPU8[$1_1 >> 0] | 0;
                break block8;
              }
              $122 = $0($0_1 | 0) | 0;
            }
            if (($122 - 48 | 0) >>> 0 < 10 >>> 0) {
              continue label2;
            }
            break label2;
          }
        }
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
          $28_1 = 1;
        } else {
          if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
              $29_1 = 0;
            } else {
              $29_1 = 1;
            }
            $30_1 = $29_1;
          } else {
            $30_1 = 0;
          }
          $28_1 = $30_1;
        }
        if ($28_1) {
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - 1 | 0;
        }
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = $5$hi;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        $136$hi = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$4 = $4_1;
        i64toi32_i32$1 = $136$hi;
        i64toi32_i32$0 = $5$hi;
        i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
        i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
        $5_1 = i64toi32_i32$5;
        $5$hi = i64toi32_i32$3;
        break block9;
      }
      i64toi32_i32$3 = -2147483648;
      $5_1 = 0;
      $5$hi = i64toi32_i32$3;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
        $31_1 = 1;
      } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $32_1 = 0;
          } else {
            $32_1 = 1;
          }
          $33_1 = $32_1;
        } else {
          $33_1 = 0;
        }
        $31_1 = $33_1;
      }
      if ($31_1) {
        break block9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - 1 | 0;
      i64toi32_i32$4 = -2147483648;
      i64toi32_i32$5 = 0;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
      return i64toi32_i32$5 | 0;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$4 | 0;
  }
  function $48($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$4 = 0,
      $9$hi = 0,
      i64toi32_i32$5 = 0,
      $5_1 = 0,
      $9_1 = 0,
      $6_1 = 0,
      $10$hi = 0,
      $7_1 = 0,
      $10_1 = 0,
      i64toi32_i32$6 = 0,
      $28_1 = 0,
      $11$hi = 0,
      $70_1 = 0,
      $35_1 = 0,
      $72_1 = 0,
      $8_1 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $121 = 0,
      $121$hi = 0,
      $78 = 0,
      $80 = 0,
      $11_1 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $176 = 0,
      $176$hi = 0,
      $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $69_1 = 0,
      $69$hi = 0,
      $71_1 = 0,
      $71$hi = 0,
      $74$hi = 0,
      $76 = 0,
      $76$hi = 0,
      $77 = 0,
      $77$hi = 0,
      $79 = 0,
      $79$hi = 0,
      $86$hi = 0,
      $148$hi = 0,
      $151 = 0,
      $152$hi = 0,
      $172 = 0,
      $172$hi = 0,
      $174$hi = 0,
      $178 = 0,
      $178$hi = 0,
      $180$hi = 0,
      $193$hi = 0,
      $196 = 0,
      $197$hi = 0,
      $225 = 0,
      $225$hi = 0,
      $227$hi = 0,
      $236 = 0,
      $237 = 0,
      $237$hi = 0,
      $239 = 0,
      $239$hi = 0,
      $245$hi = 0,
      $246 = 0,
      $246$hi = 0,
      $252 = 0,
      $252$hi = 0,
      $257$hi = 0;
    $5_1 = global$0 - 128 | 0;
    global$0 = $5_1;
    block4: {
      block3: {
        block: {
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 0;
          if (!($21($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
            break block;
          }
          block2: {
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$1 = $4_1;
            i64toi32_i32$2 = 65535;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $9_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $9$hi = i64toi32_i32$2;
            block1: {
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 48;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
              }
              $6_1 = $70_1 & 32767 | 0;
              if (($6_1 | 0) != (32767 | 0)) {
                $28_1 = 4;
                if ($6_1) {
                  break block1;
                }
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $9$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$2 = $3_1;
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$0 = $9_1;
                i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                $35_1 = !(i64toi32_i32$2 | i64toi32_i32$0 | 0 | i64toi32_i32$3 | 0) ? 2 : 3;
                break block2;
              }
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$3 = $9$hi;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$1 = $3_1;
              i64toi32_i32$2 = $9$hi;
              i64toi32_i32$0 = $9_1;
              i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
              $28_1 = !(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
            }
            $35_1 = $28_1;
          }
          $7_1 = $35_1;
          i64toi32_i32$2 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = 48;
          i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $72_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $72_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
          }
          $8_1 = $72_1;
          $6_1 = $8_1 & 32767 | 0;
          if (($6_1 | 0) == (32767 | 0)) {
            break block;
          }
          if ($7_1) {
            break block3;
          }
        }
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        $1($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
        $1_1 = i64toi32_i32$0;
        $1$hi = i64toi32_i32$2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$2;
        $2$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        $40($5_1 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0);
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break block4;
      }
      i64toi32_i32$1 = $1$hi;
      $69_1 = $1_1;
      $69$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $71_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $71$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 48;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $73 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $73 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $74$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $71$hi;
      i64toi32_i32$3 = $71_1;
      i64toi32_i32$1 = $74$hi;
      i64toi32_i32$0 = $73;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $10_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $10$hi = i64toi32_i32$1;
      $76 = $10_1;
      $76$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      $77 = $3_1;
      $77$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $79 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $79$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 48;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $74 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $74 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $74 & 32767 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 48;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
        $75 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $75 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $86$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $79$hi;
      i64toi32_i32$2 = $79;
      i64toi32_i32$3 = $86$hi;
      i64toi32_i32$0 = $75;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $9_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $69$hi;
      i64toi32_i32$2 = $76$hi;
      i64toi32_i32$1 = $77$hi;
      i64toi32_i32$0 = $9$hi;
      if (($21($69_1 | 0, i64toi32_i32$3 | 0, $76 | 0, i64toi32_i32$2 | 0, $77 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) <= (0 | 0)) {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$3 = $9$hi;
        if ($21($1_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0) | 0) {
          i64toi32_i32$3 = i64toi32_i32$0;
          $4_1 = $1_1;
          $4$hi = i64toi32_i32$3;
          break block4;
        }
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 0;
        $1($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$1;
        $4$hi = i64toi32_i32$0;
        break block4;
      }
      if ($6_1) {
        i64toi32_i32$0 = $1$hi;
        $121 = $1_1;
        $121$hi = i64toi32_i32$0;
      } else {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 1081540608;
        $1($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$3;
        $10$hi = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 48;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = 0;
          $78 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          $78 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        $6_1 = $78 - 120 | 0;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
        $121 = i64toi32_i32$3;
        $121$hi = i64toi32_i32$1;
      }
      i64toi32_i32$1 = $121$hi;
      $4_1 = $121;
      $4$hi = i64toi32_i32$1;
      if (!$7_1) {
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1081540608;
        $1($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 88 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 92 | 0) >> 2] | 0;
        $9_1 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$2;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 48;
        i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $80 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          $80 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
        }
        $7_1 = $80 - 120 | 0;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
        $3_1 = i64toi32_i32$0;
        $3$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $9$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$0 = $10_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      i64toi32_i32$0 = 65536;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $10_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $10$hi = i64toi32_i32$0;
      if (($6_1 | 0) > ($7_1 | 0)) {
        label: while (1) {
          block5: {
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$0 = $9$hi;
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$3 = $10_1;
            i64toi32_i32$2 = $9$hi;
            i64toi32_i32$1 = $9_1;
            i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
            i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
            i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
            i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
            $148$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$5 = $4$hi;
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$3 = $4$hi;
            i64toi32_i32$1 = $4_1;
            $151 = $3$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($3$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
            i64toi32_i32$0 = 0;
            $152$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $148$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$5 = $152$hi;
            i64toi32_i32$3 = $151;
            i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
            i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
            i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
            i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
            $11_1 = i64toi32_i32$2;
            $11$hi = i64toi32_i32$4;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 0;
            if ((i64toi32_i32$4 | 0) > (i64toi32_i32$1 | 0)) {
              $81 = 1;
            } else {
              if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                  $82 = 0;
                } else {
                  $82 = 1;
                }
                $83 = $82;
              } else {
                $83 = 0;
              }
              $81 = $83;
            }
            if ($81) {
              i64toi32_i32$0 = $11$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$1 = $3_1;
              i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
              $4_1 = i64toi32_i32$5;
              $4$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $11$hi;
              i64toi32_i32$0 = $11_1;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$3 | 0)) {
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = 0;
                $1($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
                i64toi32_i32$0 = $5_1;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
                $2_1 = i64toi32_i32$1;
                $2$hi = i64toi32_i32$2;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
                $4_1 = i64toi32_i32$2;
                $4$hi = i64toi32_i32$1;
                break block4;
              }
              i64toi32_i32$1 = $11$hi;
              i64toi32_i32$0 = $11_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 1;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
                $84 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                $84 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              }
              $172 = $84;
              $172$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 63;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $85 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $85 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              $174$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $172$hi;
              i64toi32_i32$2 = $172;
              i64toi32_i32$1 = $174$hi;
              i64toi32_i32$3 = $85;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $176 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $176$hi = i64toi32_i32$1;
              break block5;
            }
            i64toi32_i32$1 = $10$hi;
            i64toi32_i32$0 = $10_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $86 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
              $86 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $178 = $86;
            $178$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$1 = $4_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 63;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $87 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              $87 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
            }
            $180$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $178$hi;
            i64toi32_i32$2 = $178;
            i64toi32_i32$1 = $180$hi;
            i64toi32_i32$3 = $87;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $176 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            $176$hi = i64toi32_i32$1;
          }
          i64toi32_i32$1 = $176$hi;
          $10_1 = $176;
          $10$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            $88 = 0;
          } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
            $88 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          }
          $4_1 = $88;
          $4$hi = i64toi32_i32$2;
          $6_1 = $6_1 - 1 | 0;
          if (($6_1 | 0) > ($7_1 | 0)) {
            continue label;
          }
          break label;
        }
        $6_1 = $7_1;
      }
      block6: {
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        $193$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$5 = $4$hi;
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        $196 = $3$hi >>> 0 > i64toi32_i32$1 >>> 0 | (($3$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
        i64toi32_i32$2 = 0;
        $197$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $193$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$5 = $197$hi;
        i64toi32_i32$1 = $196;
        i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
        $9_1 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$4;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
          $89 = 1;
        } else {
          if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
              $90 = 0;
            } else {
              $90 = 1;
            }
            $91 = $90;
          } else {
            $91 = 0;
          }
          $89 = $91;
        }
        if ($89) {
          i64toi32_i32$2 = $10$hi;
          $9_1 = $10_1;
          $9$hi = i64toi32_i32$2;
          break block6;
        }
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$2 = $3$hi;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$2 = $9_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
          break block6;
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        $1($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0);
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$2;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$2;
        break block4;
      }
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$0 = -1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
        label1: while (1) {
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 63;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $92 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $92 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $1_1 = $92;
          $1$hi = i64toi32_i32$2;
          $6_1 = $6_1 - 1 | 0;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            $93 = 0;
          } else {
            i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
            $93 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
          }
          $4_1 = $93;
          $4$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $1$hi;
          $225 = $1_1;
          $225$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$2 = $9_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            $94 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $94 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          $227$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $225$hi;
          i64toi32_i32$0 = $225;
          i64toi32_i32$2 = $227$hi;
          i64toi32_i32$3 = $94;
          i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
          $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
          $9$hi = i64toi32_i32$2;
          i64toi32_i32$1 = $9_1;
          i64toi32_i32$0 = 65536;
          i64toi32_i32$3 = 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
            continue label1;
          }
          break label1;
        }
      }
      $7_1 = $8_1 & 32768 | 0;
      if (($6_1 | 0) <= (0 | 0)) {
        $236 = $5_1 - -64 | 0;
        i64toi32_i32$1 = $4$hi;
        $237 = $4_1;
        $237$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$2 = 65535;
        i64toi32_i32$0 = -1;
        i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $239 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
        $239$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = $6_1 + 120 | 0 | $7_1 | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 48;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
          $95 = 0;
        } else {
          i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
          $95 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        }
        $245$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $239$hi;
        i64toi32_i32$2 = $239;
        i64toi32_i32$1 = $245$hi;
        i64toi32_i32$0 = $95;
        i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
        $246 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
        $246$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $237$hi;
        i64toi32_i32$2 = $246$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1065811968;
        $1($236 | 0, $237 | 0, i64toi32_i32$1 | 0, $246 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break block4;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$3 = 65535;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $252 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $252$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = $6_1 | $7_1 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 48;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $96 = 0;
      } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $96 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $257$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $252$hi;
      i64toi32_i32$3 = $252;
      i64toi32_i32$0 = $257$hi;
      i64toi32_i32$1 = $96;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $0_1;
    HEAP32[i64toi32_i32$3 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
    global$0 = $5_1 + 128 | 0;
  }
  function $49($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      $4_1 = 0,
      i64toi32_i32$4 = 0,
      $20_1 = 0,
      $62_1 = 0,
      $63_1 = 0,
      $63$hi = 0,
      $64_1 = 0,
      $64$hi = 0,
      $68$hi = 0,
      $71_1 = 0,
      $74 = 0;
    $4_1 = global$0 - 80 | 0;
    global$0 = $4_1;
    block: {
      if (($3_1 | 0) >= (16384 | 0)) {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 2147352576;
        $1($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$3;
        $2$hi = i64toi32_i32$2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $1_1 = i64toi32_i32$2;
        $1$hi = i64toi32_i32$3;
        if ($3_1 >>> 0 < 32767 >>> 0) {
          $3_1 = $3_1 - 16383 | 0;
          break block;
        }
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$3 = $2$hi;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 2147352576;
        $1($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
        $3_1 = (($3_1 | 0) >= (49149 | 0) ? 49149 : $3_1) - 32766 | 0;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $1_1 = i64toi32_i32$1;
        $1$hi = i64toi32_i32$0;
        break block;
      }
      if (($3_1 | 0) > (-16383 | 0)) {
        break block;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 7471104;
      $1($4_1 - -64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$3;
      if ($3_1 >>> 0 > -32652 >>> 0) {
        $3_1 = $3_1 + 16269 | 0;
        break block;
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 7471104;
      $1($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
      $3_1 = (($3_1 | 0) <= (-48920 | 0) ? -48920 : $3_1) + 32538 | 0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$0;
    }
    $62_1 = $4_1;
    i64toi32_i32$0 = $1$hi;
    $63_1 = $1_1;
    $63$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    $64_1 = $2_1;
    $64$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $3_1 + 16383 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $20_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $68$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $63$hi;
    i64toi32_i32$2 = $64$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = $68$hi;
    $1($62_1 | 0, $63_1 | 0, i64toi32_i32$1 | 0, $64_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$3;
    i64toi32_i32$3 = $0_1;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $71_1;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $74 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $74;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
    global$0 = i64toi32_i32$2 + 80 | 0;
  }
  function $50($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $1$hi = $1$hi | 0;
    $2_1 = $2_1 | 0;
    $2$hi = $2$hi | 0;
    $3_1 = $3_1 | 0;
    $3$hi = $3$hi | 0;
    $4_1 = $4_1 | 0;
    $4$hi = $4$hi | 0;
    var i64toi32_i32$1 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$3 = 0,
      $20_1 = 0,
      $22_1 = 0,
      $23_1 = 0,
      $7_1 = 0,
      $9_1 = 0,
      $9$hi = 0,
      $13_1 = 0,
      $20$hi = 0,
      $21_1 = 0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $1_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $13_1 = $20_1 & 32768 | 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $22_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $13_1 | ($22_1 & 32767 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $23_1 = 0;
    } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$3 = $23_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $7_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  function $51($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0,
      $2_1 = 0;
    $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 - 1 | 0 | $1_1 | 0;
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if ($1_1 & 4 | 0) {
      HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
      return -1 | 0;
    }
    $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
    return ($1_1 << 27 | 0) >> 31 | 0 | 0;
  }
  function $52($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $2_1 = 0,
      $11_1 = 0,
      $11$hi = 0,
      $13_1 = 0,
      $13$hi = 0;
    $2_1 = $1_1;
    $1_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 16 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$1;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $13$hi;
    HEAPF64[$0_1 >> 3] = +$39($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  }
  function $53($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
    $0_1 = $0_1 | 0;
    $1_1 = +$1_1;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    $5_1 = $5_1 | 0;
    var $6_1 = 0,
      $7_1 = 0,
      $8_1 = 0,
      $9_1 = 0,
      $11_1 = 0,
      $10_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $12_1 = 0,
      $13_1 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$4 = 0,
      $14_1 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$5 = 0,
      $15_1 = 0,
      $16_1 = 0,
      $17_1 = 0,
      $23_1 = 0,
      $24_1 = 0,
      $18_1 = 0,
      $20_1 = 0,
      $24$hi = 0,
      $19_1 = 0,
      $21_1 = 0,
      $53_1 = 0,
      $54_1 = 0,
      $55_1 = 0,
      $111 = 0,
      $138 = 0,
      $25$hi = 0,
      $56_1 = 0,
      $894 = 0,
      $948 = 0,
      $22_1 = 0,
      $130 = 0,
      $25_1 = 0,
      $166 = 0,
      $168 = 0,
      $168$hi = 0,
      $170$hi = 0,
      $172$hi = 0,
      $174$hi = 0,
      $178 = 0,
      $178$hi = 0,
      $776 = 0,
      $852 = 0,
      $888 = 0,
      $933 = 0,
      $934 = 0,
      $935 = 0;
    $11_1 = global$0 - 560 | 0;
    global$0 = $11_1;
    HEAP32[($11_1 + 44 | 0) >> 2] = 0;
    block: {
      wasm2js_scratch_store_f64(+$1_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $24_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $24$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $24_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $53_1 = 1;
      } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $54_1 = 0;
          } else {
            $54_1 = 1;
          }
          $55_1 = $54_1;
        } else {
          $55_1 = 0;
        }
        $53_1 = $55_1;
      }
      if ($53_1) {
        $17_1 = 1;
        $19_1 = 1109;
        $1_1 = -$1_1;
        wasm2js_scratch_store_f64(+$1_1);
        i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
        $24_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
        $24$hi = i64toi32_i32$2;
        break block;
      }
      if ($4_1 & 2048 | 0) {
        $17_1 = 1;
        $19_1 = 1112;
        break block;
      }
      $17_1 = $4_1 & 1 | 0;
      $19_1 = $17_1 ? 1115 : 1110;
      $22_1 = !$17_1;
    }
    block1: {
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$3 = $24_1;
      i64toi32_i32$0 = 2146435072;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      i64toi32_i32$3 = 2146435072;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0) {
        $3_1 = $17_1 + 3 | 0;
        $6($0_1 | 0, 32 | 0, $2_1 | 0, $3_1 | 0, $4_1 & -65537 | 0 | 0);
        $3($0_1 | 0, $19_1 | 0, $17_1 | 0);
        $5_1 = $5_1 & 32 | 0;
        $3($0_1 | 0, ($1_1 != $1_1 ? $5_1 ? 1327 : 1415 : $5_1 ? 1351 : 1419) | 0, 3 | 0);
        $6($0_1 | 0, 32 | 0, $2_1 | 0, $3_1 | 0, $4_1 ^ 8192 | 0 | 0);
        $12_1 = ($2_1 | 0) < ($3_1 | 0) ? $3_1 : $2_1;
        break block1;
      }
      $18_1 = $11_1 + 16 | 0;
      block3: {
        block4: {
          block2: {
            $1_1 = +$57(+$1_1, $11_1 + 44 | 0 | 0);
            $1_1 = $1_1 + $1_1;
            if ($1_1 != 0) {
              $6_1 = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
              HEAP32[($11_1 + 44 | 0) >> 2] = $6_1 - 1 | 0;
              $12_1 = $5_1 | 32 | 0;
              if (($12_1 | 0) != (97 | 0)) {
                break block2;
              }
              break block3;
            }
            $12_1 = $5_1 | 32 | 0;
            if (($12_1 | 0) == (97 | 0)) {
              break block3;
            }
            $9_1 = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
            $111 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
            break block4;
          }
          $9_1 = $6_1 - 29 | 0;
          HEAP32[($11_1 + 44 | 0) >> 2] = $9_1;
          $1_1 = $1_1 * 268435456;
          $111 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
        }
        $10_1 = $111;
        $14_1 = ($11_1 + 48 | 0) + (($9_1 | 0) >= (0 | 0) ? 288 : 0) | 0;
        $7_1 = $14_1;
        label: while (1) {
          $130 = $7_1;
          block5: {
            if ($1_1 < 4294967296 & $1_1 >= 0 | 0) {
              $138 = ~~$1_1 >>> 0;
              break block5;
            }
            $138 = 0;
          }
          $3_1 = $138;
          HEAP32[$130 >> 2] = $3_1;
          $7_1 = $7_1 + 4 | 0;
          $1_1 = ($1_1 - +($3_1 >>> 0)) * 1e9;
          if ($1_1 != 0) {
            continue label;
          }
          break label;
        }
        block6: {
          if (($9_1 | 0) <= (0 | 0)) {
            $6_1 = $7_1;
            $8_1 = $14_1;
            break block6;
          }
          $8_1 = $14_1;
          label3: while (1) {
            $3_1 = ($9_1 | 0) >= (29 | 0) ? 29 : $9_1;
            block7: {
              $6_1 = $7_1 - 4 | 0;
              if ($6_1 >>> 0 < $8_1 >>> 0) {
                break block7;
              }
              i64toi32_i32$2 = 0;
              $25_1 = $3_1;
              $25$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $24_1 = 0;
              $24$hi = i64toi32_i32$2;
              label1: while (1) {
                $166 = $6_1;
                i64toi32_i32$2 = $24$hi;
                i64toi32_i32$1 = $24_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = -1;
                i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
                $168 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
                $168$hi = i64toi32_i32$0;
                i64toi32_i32$2 = $6_1;
                i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                i64toi32_i32$1 = 0;
                $170$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $25$hi;
                i64toi32_i32$1 = $170$hi;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$0 = $25$hi;
                i64toi32_i32$3 = $25_1;
                i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                  $56_1 = 0;
                } else {
                  i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                  $56_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                }
                $172$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $168$hi;
                i64toi32_i32$1 = $168;
                i64toi32_i32$2 = $172$hi;
                i64toi32_i32$3 = $56_1;
                i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $24_1 = i64toi32_i32$4;
                $24$hi = i64toi32_i32$5;
                $174$hi = i64toi32_i32$5;
                i64toi32_i32$1 = 0;
                i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $24_1 = i64toi32_i32$1;
                $24$hi = i64toi32_i32$5;
                i64toi32_i32$1 = 0;
                i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $178 = i64toi32_i32$1;
                $178$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $174$hi;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$1 = $178$hi;
                i64toi32_i32$3 = $178;
                i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
                i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
                HEAP32[$166 >> 2] = i64toi32_i32$2;
                $6_1 = $6_1 - 4 | 0;
                if ($6_1 >>> 0 >= $8_1 >>> 0) {
                  continue label1;
                }
                break label1;
              }
              i64toi32_i32$4 = $24$hi;
              $6_1 = $24_1;
              if (!$6_1) {
                break block7;
              }
              $8_1 = $8_1 - 4 | 0;
              HEAP32[$8_1 >> 2] = $6_1;
            }
            label2: while (1) {
              $6_1 = $7_1;
              if ($8_1 >>> 0 < $6_1 >>> 0) {
                $7_1 = $6_1 - 4 | 0;
                if (!(HEAP32[$7_1 >> 2] | 0)) {
                  continue label2;
                }
              }
              break label2;
            }
            $9_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
            HEAP32[($11_1 + 44 | 0) >> 2] = $9_1;
            $7_1 = $6_1;
            if (($9_1 | 0) > (0 | 0)) {
              continue label3;
            }
            break label3;
          }
        }
        if (($9_1 | 0) < (0 | 0)) {
          $15_1 = ((($10_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
          $13_1 = ($12_1 | 0) == (102 | 0);
          label5: while (1) {
            $3_1 = 0 - $9_1 | 0;
            $3_1 = ($3_1 | 0) >= (9 | 0) ? 9 : $3_1;
            block8: {
              if ($6_1 >>> 0 <= $8_1 >>> 0) {
                $7_1 = HEAP32[$8_1 >> 2] | 0;
                break block8;
              }
              $16_1 = 1e9 >>> $3_1 | 0;
              $20_1 = (-1 << $3_1 | 0) ^ -1 | 0;
              $9_1 = 0;
              $7_1 = $8_1;
              label4: while (1) {
                $21_1 = HEAP32[$7_1 >> 2] | 0;
                HEAP32[$7_1 >> 2] = $9_1 + ($21_1 >>> $3_1 | 0) | 0;
                $9_1 = Math_imul($20_1 & $21_1 | 0, $16_1);
                $7_1 = $7_1 + 4 | 0;
                if ($7_1 >>> 0 < $6_1 >>> 0) {
                  continue label4;
                }
                break label4;
              }
              $7_1 = HEAP32[$8_1 >> 2] | 0;
              if (!$9_1) {
                break block8;
              }
              HEAP32[$6_1 >> 2] = $9_1;
              $6_1 = $6_1 + 4 | 0;
            }
            $9_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + $3_1 | 0;
            HEAP32[($11_1 + 44 | 0) >> 2] = $9_1;
            $8_1 = $8_1 + (!$7_1 << 2 | 0) | 0;
            $3_1 = $13_1 ? $14_1 : $8_1;
            $6_1 = (($6_1 - $3_1 | 0) >> 2 | 0 | 0) > ($15_1 | 0) ? $3_1 + ($15_1 << 2 | 0) | 0 : $6_1;
            if (($9_1 | 0) < (0 | 0)) {
              continue label5;
            }
            break label5;
          }
        }
        $9_1 = 0;
        block9: {
          if ($6_1 >>> 0 <= $8_1 >>> 0) {
            break block9;
          }
          $9_1 = Math_imul(($14_1 - $8_1 | 0) >> 2 | 0, 9);
          $7_1 = 10;
          $3_1 = HEAP32[$8_1 >> 2] | 0;
          if ($3_1 >>> 0 < 10 >>> 0) {
            break block9;
          }
          label6: while (1) {
            $9_1 = $9_1 + 1 | 0;
            $7_1 = Math_imul($7_1, 10);
            if ($3_1 >>> 0 >= $7_1 >>> 0) {
              continue label6;
            }
            break label6;
          }
        }
        $3_1 = ($10_1 - (($12_1 | 0) != (102 | 0) ? $9_1 : 0) | 0) - (($12_1 | 0) == (103 | 0) & ($10_1 | 0) != (0 | 0) | 0) | 0;
        if (($3_1 | 0) < (Math_imul(($6_1 - $14_1 | 0) >> 2 | 0, 9) - 9 | 0 | 0)) {
          $3_1 = $3_1 + 9216 | 0;
          $15_1 = ($3_1 | 0) / (9 | 0) | 0;
          $16_1 = ($15_1 << 2 | 0) + $14_1 | 0;
          $13_1 = $16_1 - 4096 | 0;
          $7_1 = 10;
          $3_1 = $3_1 - Math_imul($15_1, 9) | 0;
          if (($3_1 | 0) <= (7 | 0)) {
            label7: while (1) {
              $7_1 = Math_imul($7_1, 10);
              $3_1 = $3_1 + 1 | 0;
              if (($3_1 | 0) != (8 | 0)) {
                continue label7;
              }
              break label7;
            }
          }
          $3_1 = $16_1 - 4092 | 0;
          block10: {
            $20_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
            $21_1 = ($20_1 >>> 0) / ($7_1 >>> 0) | 0;
            $16_1 = $20_1 - Math_imul($21_1, $7_1) | 0;
            $15_1 = $13_1 + 8 | 0;
            if (!$16_1 & ($15_1 | 0) == ($6_1 | 0) | 0) {
              break block10;
            }
            block11: {
              if (!($21_1 & 1 | 0)) {
                $1_1 = 9007199254740992;
                if (($7_1 | 0) != (1e9 | 0)) {
                  break block11;
                }
                if ($3_1 >>> 0 <= $8_1 >>> 0) {
                  break block11;
                }
                if (!((HEAPU8[$13_1 >> 0] | 0) & 1 | 0)) {
                  break block11;
                }
              }
              $1_1 = 9007199254740994;
            }
            $13_1 = $7_1 >>> 1 | 0;
            $23_1 = $13_1 >>> 0 > $16_1 >>> 0 ? .5 : ($16_1 | 0) == ($13_1 | 0) ? ($6_1 | 0) == ($15_1 | 0) ? 1 : 1.5 : 1.5;
            block12: {
              if ($22_1) {
                break block12;
              }
              if ((HEAPU8[$19_1 >> 0] | 0 | 0) != (45 | 0)) {
                break block12;
              }
              $23_1 = -$23_1;
              $1_1 = -$1_1;
            }
            $13_1 = $20_1 - $16_1 | 0;
            HEAP32[$3_1 >> 2] = $13_1;
            if ($1_1 + $23_1 == $1_1) {
              break block10;
            }
            $7_1 = $7_1 + $13_1 | 0;
            HEAP32[$3_1 >> 2] = $7_1;
            if ($7_1 >>> 0 >= 1e9 >>> 0) {
              label8: while (1) {
                HEAP32[$3_1 >> 2] = 0;
                $3_1 = $3_1 - 4 | 0;
                if ($8_1 >>> 0 > $3_1 >>> 0) {
                  $8_1 = $8_1 - 4 | 0;
                  HEAP32[$8_1 >> 2] = 0;
                }
                $7_1 = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
                HEAP32[$3_1 >> 2] = $7_1;
                if ($7_1 >>> 0 > 999999999 >>> 0) {
                  continue label8;
                }
                break label8;
              }
            }
            $9_1 = Math_imul(($14_1 - $8_1 | 0) >> 2 | 0, 9);
            $7_1 = 10;
            $13_1 = HEAP32[$8_1 >> 2] | 0;
            if ($13_1 >>> 0 < 10 >>> 0) {
              break block10;
            }
            label9: while (1) {
              $9_1 = $9_1 + 1 | 0;
              $7_1 = Math_imul($7_1, 10);
              if ($13_1 >>> 0 >= $7_1 >>> 0) {
                continue label9;
              }
              break label9;
            }
          }
          $3_1 = $3_1 + 4 | 0;
          $6_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $3_1 : $6_1;
        }
        label10: while (1) {
          $7_1 = $6_1;
          $3_1 = $6_1 >>> 0 <= $8_1 >>> 0;
          if (!$3_1) {
            $6_1 = $6_1 - 4 | 0;
            if (!(HEAP32[$6_1 >> 2] | 0)) {
              continue label10;
            }
          }
          break label10;
        }
        block13: {
          if (($12_1 | 0) != (103 | 0)) {
            $13_1 = $4_1 & 8 | 0;
            break block13;
          }
          $6_1 = $10_1 ? $10_1 : 1;
          $12_1 = ($6_1 | 0) > ($9_1 | 0) & ($9_1 | 0) > (-5 | 0) | 0;
          $10_1 = ($12_1 ? $9_1 ^ -1 | 0 : -1) + $6_1 | 0;
          $5_1 = ($12_1 ? -1 : -2) + $5_1 | 0;
          $13_1 = $4_1 & 8 | 0;
          if ($13_1) {
            break block13;
          }
          $6_1 = -9;
          block14: {
            if ($3_1) {
              break block14;
            }
            $13_1 = HEAP32[($7_1 - 4 | 0) >> 2] | 0;
            if (!$13_1) {
              break block14;
            }
            $3_1 = 10;
            $6_1 = 0;
            if (($13_1 >>> 0) % (10 >>> 0) | 0) {
              break block14;
            }
            label11: while (1) {
              $12_1 = $6_1;
              $6_1 = $6_1 + 1 | 0;
              $3_1 = Math_imul($3_1, 10);
              if (!(($13_1 >>> 0) % ($3_1 >>> 0) | 0)) {
                continue label11;
              }
              break label11;
            }
            $6_1 = $12_1 ^ -1 | 0;
          }
          $3_1 = Math_imul(($7_1 - $14_1 | 0) >> 2 | 0, 9);
          if (($5_1 & -33 | 0 | 0) == (70 | 0)) {
            $13_1 = 0;
            $3_1 = ($3_1 + $6_1 | 0) - 9 | 0;
            $3_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
            $10_1 = ($3_1 | 0) > ($10_1 | 0) ? $10_1 : $3_1;
            break block13;
          }
          $13_1 = 0;
          $3_1 = (($3_1 + $9_1 | 0) + $6_1 | 0) - 9 | 0;
          $3_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
          $10_1 = ($3_1 | 0) > ($10_1 | 0) ? $10_1 : $3_1;
        }
        $12_1 = -1;
        $16_1 = $10_1 | $13_1 | 0;
        if (($10_1 | 0) > (($16_1 ? 2147483645 : 2147483646) | 0)) {
          break block1;
        }
        $3_1 = ($10_1 + (($16_1 | 0) != (0 | 0)) | 0) + 1 | 0;
        block15: {
          $20_1 = $5_1 & -33 | 0;
          if (($20_1 | 0) == (70 | 0)) {
            if (($9_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
              break block1;
            }
            $6_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
            break block15;
          }
          $6_1 = $9_1 >> 31 | 0;
          i64toi32_i32$4 = 0;
          $6_1 = $26(($9_1 ^ $6_1 | 0) - $6_1 | 0 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
          if (($18_1 - $6_1 | 0 | 0) <= (1 | 0)) {
            label12: while (1) {
              $6_1 = $6_1 - 1 | 0;
              HEAP8[$6_1 >> 0] = 48;
              if (($18_1 - $6_1 | 0 | 0) < (2 | 0)) {
                continue label12;
              }
              break label12;
            }
          }
          $15_1 = $6_1 - 2 | 0;
          HEAP8[$15_1 >> 0] = $5_1;
          HEAP8[($6_1 - 1 | 0) >> 0] = ($9_1 | 0) < (0 | 0) ? 45 : 43;
          $6_1 = $18_1 - $15_1 | 0;
          if (($6_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
            break block1;
          }
        }
        $3_1 = $3_1 + $6_1 | 0;
        if (($3_1 | 0) > ($17_1 ^ 2147483647 | 0 | 0)) {
          break block1;
        }
        $5_1 = $3_1 + $17_1 | 0;
        $6($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
        $3($0_1 | 0, $19_1 | 0, $17_1 | 0);
        $6($0_1 | 0, 48 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 65536 | 0 | 0);
        block21: {
          block18: {
            block17: {
              if (($20_1 | 0) == (70 | 0)) {
                $6_1 = $11_1 + 16 | 0;
                $3_1 = $6_1 | 8 | 0;
                $12_1 = $6_1 | 9 | 0;
                $9_1 = $8_1 >>> 0 > $14_1 >>> 0 ? $14_1 : $8_1;
                $8_1 = $9_1;
                label14: while (1) {
                  i64toi32_i32$5 = $8_1;
                  i64toi32_i32$4 = HEAP32[$8_1 >> 2] | 0;
                  i64toi32_i32$0 = 0;
                  $6_1 = $26(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
                  block16: {
                    if (($8_1 | 0) != ($9_1 | 0)) {
                      if ($6_1 >>> 0 <= ($11_1 + 16 | 0) >>> 0) {
                        break block16;
                      }
                      label13: while (1) {
                        $6_1 = $6_1 - 1 | 0;
                        HEAP8[$6_1 >> 0] = 48;
                        if ($6_1 >>> 0 > ($11_1 + 16 | 0) >>> 0) {
                          continue label13;
                        }
                        break label13;
                      }
                      break block16;
                    }
                    if (($6_1 | 0) != ($12_1 | 0)) {
                      break block16;
                    }
                    HEAP8[($11_1 + 24 | 0) >> 0] = 48;
                    $6_1 = $3_1;
                  }
                  $3($0_1 | 0, $6_1 | 0, $12_1 - $6_1 | 0 | 0);
                  $8_1 = $8_1 + 4 | 0;
                  if ($8_1 >>> 0 <= $14_1 >>> 0) {
                    continue label14;
                  }
                  break label14;
                }
                if ($16_1) {
                  $3($0_1 | 0, 1640 | 0, 1 | 0);
                }
                if ($7_1 >>> 0 <= $8_1 >>> 0) {
                  break block17;
                }
                if (($10_1 | 0) <= (0 | 0)) {
                  break block17;
                }
                label16: while (1) {
                  i64toi32_i32$5 = $8_1;
                  i64toi32_i32$0 = HEAP32[$8_1 >> 2] | 0;
                  i64toi32_i32$4 = 0;
                  $6_1 = $26(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
                  if ($6_1 >>> 0 > ($11_1 + 16 | 0) >>> 0) {
                    label15: while (1) {
                      $6_1 = $6_1 - 1 | 0;
                      HEAP8[$6_1 >> 0] = 48;
                      if ($6_1 >>> 0 > ($11_1 + 16 | 0) >>> 0) {
                        continue label15;
                      }
                      break label15;
                    }
                  }
                  $3($0_1 | 0, $6_1 | 0, (($10_1 | 0) >= (9 | 0) ? 9 : $10_1) | 0);
                  $6_1 = $10_1 - 9 | 0;
                  $8_1 = $8_1 + 4 | 0;
                  if ($8_1 >>> 0 >= $7_1 >>> 0) {
                    break block18;
                  }
                  $3_1 = ($10_1 | 0) > (9 | 0);
                  $10_1 = $6_1;
                  if ($3_1) {
                    continue label16;
                  }
                  break label16;
                }
                break block18;
              }
              block19: {
                if (($10_1 | 0) < (0 | 0)) {
                  break block19;
                }
                $12_1 = $7_1 >>> 0 > $8_1 >>> 0 ? $7_1 : $8_1 + 4 | 0;
                $6_1 = $11_1 + 16 | 0;
                $3_1 = $6_1 | 8 | 0;
                $14_1 = $6_1 | 9 | 0;
                $7_1 = $8_1;
                label18: while (1) {
                  i64toi32_i32$5 = $7_1;
                  i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
                  i64toi32_i32$0 = 0;
                  $6_1 = $26(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $14_1 | 0) | 0;
                  if (($14_1 | 0) == ($6_1 | 0)) {
                    HEAP8[($11_1 + 24 | 0) >> 0] = 48;
                    $6_1 = $3_1;
                  }
                  block20: {
                    if (($7_1 | 0) != ($8_1 | 0)) {
                      if ($6_1 >>> 0 <= ($11_1 + 16 | 0) >>> 0) {
                        break block20;
                      }
                      label17: while (1) {
                        $6_1 = $6_1 - 1 | 0;
                        HEAP8[$6_1 >> 0] = 48;
                        if ($6_1 >>> 0 > ($11_1 + 16 | 0) >>> 0) {
                          continue label17;
                        }
                        break label17;
                      }
                      break block20;
                    }
                    $3($0_1 | 0, $6_1 | 0, 1 | 0);
                    $6_1 = $6_1 + 1 | 0;
                    if (!($10_1 | $13_1 | 0)) {
                      break block20;
                    }
                    $3($0_1 | 0, 1640 | 0, 1 | 0);
                  }
                  $776 = $6_1;
                  $6_1 = $14_1 - $6_1 | 0;
                  $3($0_1 | 0, $776 | 0, (($6_1 | 0) > ($10_1 | 0) ? $10_1 : $6_1) | 0);
                  $10_1 = $10_1 - $6_1 | 0;
                  $7_1 = $7_1 + 4 | 0;
                  if ($7_1 >>> 0 >= $12_1 >>> 0) {
                    break block19;
                  }
                  if (($10_1 | 0) >= (0 | 0)) {
                    continue label18;
                  }
                  break label18;
                }
              }
              $6($0_1 | 0, 48 | 0, $10_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
              $3($0_1 | 0, $15_1 | 0, $18_1 - $15_1 | 0 | 0);
              break block21;
            }
            $6_1 = $10_1;
          }
          $6($0_1 | 0, 48 | 0, $6_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
        }
        $6($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 8192 | 0 | 0);
        $12_1 = ($2_1 | 0) < ($5_1 | 0) ? $5_1 : $2_1;
        break block1;
      }
      $10_1 = $19_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
      block22: {
        if ($3_1 >>> 0 > 11 >>> 0) {
          break block22;
        }
        $6_1 = 12 - $3_1 | 0;
        $23_1 = 16;
        label19: while (1) {
          $23_1 = $23_1 * 16;
          $6_1 = $6_1 - 1 | 0;
          if ($6_1) {
            continue label19;
          }
          break label19;
        }
        if ((HEAPU8[$10_1 >> 0] | 0 | 0) == (45 | 0)) {
          $1_1 = -($23_1 + (-$1_1 - $23_1));
          break block22;
        }
        $1_1 = $1_1 + $23_1 - $23_1;
      }
      $6_1 = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
      $852 = $6_1;
      $6_1 = $6_1 >> 31 | 0;
      i64toi32_i32$0 = 0;
      $6_1 = $26(($852 ^ $6_1 | 0) - $6_1 | 0 | 0, i64toi32_i32$0 | 0, $18_1 | 0) | 0;
      if (($18_1 | 0) == ($6_1 | 0)) {
        HEAP8[($11_1 + 15 | 0) >> 0] = 48;
        $6_1 = $11_1 + 15 | 0;
      }
      $14_1 = $17_1 | 2 | 0;
      $8_1 = $5_1 & 32 | 0;
      $7_1 = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
      $9_1 = $6_1 - 2 | 0;
      HEAP8[$9_1 >> 0] = $5_1 + 15 | 0;
      HEAP8[($6_1 - 1 | 0) >> 0] = ($7_1 | 0) < (0 | 0) ? 45 : 43;
      $6_1 = $4_1 & 8 | 0;
      $7_1 = $11_1 + 16 | 0;
      label20: while (1) {
        $5_1 = $7_1;
        $888 = $7_1;
        block23: {
          if (Math_abs($1_1) < 2147483648) {
            $894 = ~~$1_1;
            break block23;
          }
          $894 = -2147483648;
        }
        $7_1 = $894;
        HEAP8[$888 >> 0] = HEAPU8[($7_1 + 2832 | 0) >> 0] | 0 | $8_1 | 0;
        $1_1 = ($1_1 - +($7_1 | 0)) * 16;
        block24: {
          $7_1 = $5_1 + 1 | 0;
          if (($7_1 - ($11_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
            break block24;
          }
          block25: {
            if ($6_1) {
              break block25;
            }
            if (($3_1 | 0) > (0 | 0)) {
              break block25;
            }
            if ($1_1 == 0) {
              break block24;
            }
          }
          HEAP8[($5_1 + 1 | 0) >> 0] = 46;
          $7_1 = $5_1 + 2 | 0;
        }
        if ($1_1 != 0) {
          continue label20;
        }
        break label20;
      }
      $12_1 = -1;
      $5_1 = $18_1 - $9_1 | 0;
      $6_1 = $14_1 + $5_1 | 0;
      if ((2147483645 - $6_1 | 0 | 0) < ($3_1 | 0)) {
        break block1;
      }
      $933 = $0_1;
      $934 = $2_1;
      $935 = $6_1;
      block27: {
        block26: {
          if (!$3_1) {
            break block26;
          }
          $8_1 = $7_1 - ($11_1 + 16 | 0) | 0;
          if (($8_1 - 2 | 0 | 0) >= ($3_1 | 0)) {
            break block26;
          }
          $948 = $3_1 + 2 | 0;
          break block27;
        }
        $8_1 = $7_1 - ($11_1 + 16 | 0) | 0;
        $948 = $8_1;
      }
      $7_1 = $948;
      $3_1 = $935 + $7_1 | 0;
      $6($933 | 0, 32 | 0, $934 | 0, $3_1 | 0, $4_1 | 0);
      $3($0_1 | 0, $10_1 | 0, $14_1 | 0);
      $6($0_1 | 0, 48 | 0, $2_1 | 0, $3_1 | 0, $4_1 ^ 65536 | 0 | 0);
      $3($0_1 | 0, $11_1 + 16 | 0 | 0, $8_1 | 0);
      $6($0_1 | 0, 48 | 0, $7_1 - $8_1 | 0 | 0, 0 | 0, 0 | 0);
      $3($0_1 | 0, $9_1 | 0, $5_1 | 0);
      $6($0_1 | 0, 32 | 0, $2_1 | 0, $3_1 | 0, $4_1 ^ 8192 | 0 | 0);
      $12_1 = ($2_1 | 0) < ($3_1 | 0) ? $3_1 : $2_1;
    }
    global$0 = $11_1 + 560 | 0;
    return $12_1 | 0;
  }
  function $54($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $20_1 = 0,
      $28_1 = 0,
      $36_1 = 0,
      $44_1 = 0,
      $64_1 = 0,
      $72_1 = 0,
      $82 = 0;
    block3: {
      switch ($1_1 - 9 | 0 | 0) {
        case 0:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
          return;
        case 6:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          i64toi32_i32$0 = HEAP16[$1_1 >> 1] | 0;
          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
          $20_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $20_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          return;
        case 7:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          i64toi32_i32$1 = HEAPU16[$1_1 >> 1] | 0;
          i64toi32_i32$0 = 0;
          $28_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $28_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          return;
        case 8:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          i64toi32_i32$0 = HEAP8[$1_1 >> 0] | 0;
          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
          $36_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $36_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          return;
        case 9:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          i64toi32_i32$1 = HEAPU8[$1_1 >> 0] | 0;
          i64toi32_i32$0 = 0;
          $44_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $44_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          return;
        case 16:
          $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
          HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
          return;
        case 17:
          $52($0_1 | 0, $2_1 | 0);
        default:
          return;
        case 1:
        case 4:
        case 14:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
          $64_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $64_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          return;
        case 2:
        case 5:
        case 11:
        case 15:
          $1_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
          i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $72_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $72_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          return;
        case 3:
        case 10:
        case 12:
        case 13:
          break block3;
      }
    }
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $82 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $82;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  function $55($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0,
      $1_1 = 0,
      $3_1 = 0;
    if (((HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0) - 48 | 0) >>> 0 >= 10 >>> 0) {
      return 0 | 0;
    }
    label: while (1) {
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      $1_1 = -1;
      if ($2_1 >>> 0 <= 214748364 >>> 0) {
        $1_1 = (HEAP8[$3_1 >> 0] | 0) - 48 | 0;
        $2_1 = Math_imul($2_1, 10);
        $1_1 = ($1_1 | 0) > ($2_1 ^ 2147483647 | 0 | 0) ? -1 : $1_1 + $2_1 | 0;
      }
      HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
      $2_1 = $1_1;
      if (((HEAP8[($3_1 + 1 | 0) >> 0] | 0) - 48 | 0) >>> 0 < 10 >>> 0) {
        continue label;
      }
      break label;
    }
    return $2_1 | 0;
  }
  function $56($0_1, $1_1, $2_1, $3_1, $4_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    $3_1 = $3_1 | 0;
    $4_1 = $4_1 | 0;
    var $5_1 = 0,
      $6_1 = 0,
      $7_1 = 0,
      i64toi32_i32$1 = 0,
      $9_1 = 0,
      i64toi32_i32$2 = 0,
      $8_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$3 = 0,
      $10_1 = 0,
      $11_1 = 0,
      $12_1 = 0,
      $23_1 = 0,
      $13_1 = 0,
      $14_1 = 0,
      i64toi32_i32$4 = 0,
      $23$hi = 0,
      i64toi32_i32$5 = 0,
      $15_1 = 0,
      $16_1 = 0,
      $17_1 = 0,
      $213 = 0,
      $317 = 0,
      $187 = 0,
      $18_1 = 0,
      $19_1 = 0,
      $20_1 = 0,
      $22_1 = 0,
      $152 = 0,
      $37_1 = 0,
      $38_1 = 0,
      $39_1 = 0,
      $40_1 = 0,
      $41_1 = 0,
      $488 = 0,
      $21_1 = 0,
      $278 = 0;
    $6_1 = global$0 - 80 | 0;
    global$0 = $6_1;
    HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
    $21_1 = $6_1 + 55 | 0;
    $16_1 = $6_1 + 56 | 0;
    block45: {
      block44: {
        block12: {
          block: {
            label1: while (1) {
              $10_1 = $1_1;
              if (($5_1 | 0) > ($12_1 ^ 2147483647 | 0 | 0)) {
                break block;
              }
              $12_1 = $5_1 + $12_1 | 0;
              block14: {
                block17: {
                  block7: {
                    $5_1 = $1_1;
                    $7_1 = HEAPU8[$5_1 >> 0] | 0;
                    if ($7_1) {
                      label8: while (1) {
                        block2: {
                          block1: {
                            $1_1 = $7_1 & 255 | 0;
                            if (!$1_1) {
                              $1_1 = $5_1;
                              break block1;
                            }
                            if (($1_1 | 0) != (37 | 0)) {
                              break block2;
                            }
                            $7_1 = $5_1;
                            label: while (1) {
                              if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                                $1_1 = $7_1;
                                break block1;
                              }
                              $5_1 = $5_1 + 1 | 0;
                              $9_1 = HEAPU8[($7_1 + 2 | 0) >> 0] | 0;
                              $1_1 = $7_1 + 2 | 0;
                              $7_1 = $1_1;
                              if (($9_1 | 0) == (37 | 0)) {
                                continue label;
                              }
                              break label;
                            }
                          }
                          $5_1 = $5_1 - $10_1 | 0;
                          $22_1 = $12_1 ^ 2147483647 | 0;
                          if (($5_1 | 0) > ($22_1 | 0)) {
                            break block;
                          }
                          if ($0_1) {
                            $3($0_1 | 0, $10_1 | 0, $5_1 | 0);
                          }
                          if ($5_1) {
                            continue label1;
                          }
                          HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
                          $5_1 = $1_1 + 1 | 0;
                          $13_1 = -1;
                          block3: {
                            if (((HEAP8[($1_1 + 1 | 0) >> 0] | 0) - 48 | 0) >>> 0 >= 10 >>> 0) {
                              break block3;
                            }
                            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                              break block3;
                            }
                            $5_1 = $1_1 + 3 | 0;
                            $13_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) - 48 | 0;
                            $17_1 = 1;
                          }
                          HEAP32[($6_1 + 76 | 0) >> 2] = $5_1;
                          $11_1 = 0;
                          block4: {
                            $7_1 = HEAP8[$5_1 >> 0] | 0;
                            $1_1 = $7_1 - 32 | 0;
                            if ($1_1 >>> 0 > 31 >>> 0) {
                              $9_1 = $5_1;
                              break block4;
                            }
                            $9_1 = $5_1;
                            $1_1 = 1 << $1_1 | 0;
                            if (!($1_1 & 75913 | 0)) {
                              break block4;
                            }
                            label2: while (1) {
                              $9_1 = $5_1 + 1 | 0;
                              HEAP32[($6_1 + 76 | 0) >> 2] = $9_1;
                              $11_1 = $1_1 | $11_1 | 0;
                              $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
                              $1_1 = $7_1 - 32 | 0;
                              if ($1_1 >>> 0 >= 32 >>> 0) {
                                break block4;
                              }
                              $5_1 = $9_1;
                              $1_1 = 1 << $1_1 | 0;
                              if ($1_1 & 75913 | 0) {
                                continue label2;
                              }
                              break label2;
                            }
                          }
                          block8: {
                            if (($7_1 | 0) == (42 | 0)) {
                              block6: {
                                block5: {
                                  if (((HEAP8[($9_1 + 1 | 0) >> 0] | 0) - 48 | 0) >>> 0 >= 10 >>> 0) {
                                    break block5;
                                  }
                                  if ((HEAPU8[($9_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                    break block5;
                                  }
                                  HEAP32[((((HEAP8[($9_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) - 192 | 0) >> 2] = 10;
                                  $7_1 = $9_1 + 3 | 0;
                                  $17_1 = 1;
                                  $152 = HEAP32[((((HEAP8[($9_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) - 384 | 0) >> 2] | 0;
                                  break block6;
                                }
                                if ($17_1) {
                                  break block7;
                                }
                                $7_1 = $9_1 + 1 | 0;
                                if (!$0_1) {
                                  HEAP32[($6_1 + 76 | 0) >> 2] = $7_1;
                                  $17_1 = 0;
                                  $14_1 = 0;
                                  break block8;
                                }
                                $1_1 = HEAP32[$2_1 >> 2] | 0;
                                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                                $17_1 = 0;
                                $152 = HEAP32[$1_1 >> 2] | 0;
                              }
                              $14_1 = $152;
                              HEAP32[($6_1 + 76 | 0) >> 2] = $7_1;
                              if (($14_1 | 0) >= (0 | 0)) {
                                break block8;
                              }
                              $14_1 = 0 - $14_1 | 0;
                              $11_1 = $11_1 | 8192 | 0;
                              break block8;
                            }
                            $14_1 = $55($6_1 + 76 | 0 | 0) | 0;
                            if (($14_1 | 0) < (0 | 0)) {
                              break block;
                            }
                            $7_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
                          }
                          $5_1 = 0;
                          $8_1 = -1;
                          block9: {
                            if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (46 | 0)) {
                              $1_1 = $7_1;
                              $187 = 0;
                              break block9;
                            }
                            if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (42 | 0)) {
                              block11: {
                                block10: {
                                  if (((HEAP8[($7_1 + 2 | 0) >> 0] | 0) - 48 | 0) >>> 0 >= 10 >>> 0) {
                                    break block10;
                                  }
                                  if ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                    break block10;
                                  }
                                  HEAP32[((((HEAP8[($7_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) - 192 | 0) >> 2] = 10;
                                  $1_1 = $7_1 + 4 | 0;
                                  $213 = HEAP32[((((HEAP8[($7_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) - 384 | 0) >> 2] | 0;
                                  break block11;
                                }
                                if ($17_1) {
                                  break block7;
                                }
                                $1_1 = $7_1 + 2 | 0;
                                $213 = 0;
                                if (!$0_1) {
                                  break block11;
                                }
                                $9_1 = HEAP32[$2_1 >> 2] | 0;
                                HEAP32[$2_1 >> 2] = $9_1 + 4 | 0;
                                $213 = HEAP32[$9_1 >> 2] | 0;
                              }
                              $8_1 = $213;
                              HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
                              $187 = ($8_1 ^ -1 | 0) >>> 31 | 0;
                              break block9;
                            }
                            HEAP32[($6_1 + 76 | 0) >> 2] = $7_1 + 1 | 0;
                            $8_1 = $55($6_1 + 76 | 0 | 0) | 0;
                            $1_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
                            $187 = 1;
                          }
                          $18_1 = $187;
                          label3: while (1) {
                            $19_1 = $5_1;
                            $9_1 = 28;
                            $15_1 = $1_1;
                            $5_1 = HEAP8[$1_1 >> 0] | 0;
                            if (($5_1 - 123 | 0) >>> 0 < -58 >>> 0) {
                              break block12;
                            }
                            $1_1 = $1_1 + 1 | 0;
                            $5_1 = HEAPU8[(($5_1 + Math_imul($19_1, 58) | 0) + 2303 | 0) >> 0] | 0;
                            if (($5_1 - 1 | 0) >>> 0 < 8 >>> 0) {
                              continue label3;
                            }
                            break label3;
                          }
                          HEAP32[($6_1 + 76 | 0) >> 2] = $1_1;
                          block15: {
                            block13: {
                              if (($5_1 | 0) != (27 | 0)) {
                                if (!$5_1) {
                                  break block12;
                                }
                                if (($13_1 | 0) >= (0 | 0)) {
                                  HEAP32[($4_1 + ($13_1 << 2 | 0) | 0) >> 2] = $5_1;
                                  i64toi32_i32$2 = $3_1 + ($13_1 << 3 | 0) | 0;
                                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                                  $278 = i64toi32_i32$0;
                                  i64toi32_i32$0 = $6_1;
                                  HEAP32[($6_1 + 64 | 0) >> 2] = $278;
                                  HEAP32[($6_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                                  break block13;
                                }
                                if (!$0_1) {
                                  break block14;
                                }
                                $54($6_1 - -64 | 0 | 0, $5_1 | 0, $2_1 | 0);
                                break block15;
                              }
                              if (($13_1 | 0) >= (0 | 0)) {
                                break block12;
                              }
                            }
                            $5_1 = 0;
                            if (!$0_1) {
                              continue label1;
                            }
                          }
                          $7_1 = $11_1 & -65537 | 0;
                          $11_1 = $11_1 & 8192 | 0 ? $7_1 : $11_1;
                          $13_1 = 0;
                          $20_1 = 1099;
                          $9_1 = $16_1;
                          block19: {
                            block18: {
                              block41: {
                                block40: {
                                  block27: {
                                    block29: {
                                      block24: {
                                        block38: {
                                          block30: {
                                            block20: {
                                              block22: {
                                                block16: {
                                                  block23: {
                                                    block21: {
                                                      block25: {
                                                        block26: {
                                                          $5_1 = HEAP8[$15_1 >> 0] | 0;
                                                          $5_1 = $19_1 ? ($5_1 & 15 | 0 | 0) == (3 | 0) ? $5_1 & -33 | 0 : $5_1 : $5_1;
                                                          switch ($5_1 - 88 | 0 | 0) {
                                                            case 0:
                                                            case 32:
                                                              break block16;
                                                            case 1:
                                                            case 2:
                                                            case 3:
                                                            case 4:
                                                            case 5:
                                                            case 6:
                                                            case 7:
                                                            case 8:
                                                            case 10:
                                                            case 16:
                                                            case 18:
                                                            case 19:
                                                            case 20:
                                                            case 21:
                                                            case 25:
                                                            case 26:
                                                            case 28:
                                                            case 30:
                                                            case 31:
                                                              break block17;
                                                            case 9:
                                                            case 13:
                                                            case 14:
                                                            case 15:
                                                              break block18;
                                                            case 11:
                                                              break block19;
                                                            case 12:
                                                            case 17:
                                                              break block20;
                                                            case 22:
                                                              break block21;
                                                            case 23:
                                                              break block22;
                                                            case 24:
                                                              break block23;
                                                            case 27:
                                                              break block24;
                                                            case 29:
                                                              break block25;
                                                            default:
                                                              break block26;
                                                          }
                                                        }
                                                        block28: {
                                                          switch ($5_1 - 65 | 0 | 0) {
                                                            case 1:
                                                            case 3:
                                                              break block17;
                                                            case 0:
                                                            case 4:
                                                            case 5:
                                                            case 6:
                                                              break block18;
                                                            case 2:
                                                              break block27;
                                                            default:
                                                              break block28;
                                                          }
                                                        }
                                                        if (($5_1 | 0) == (83 | 0)) {
                                                          break block29;
                                                        }
                                                        break block17;
                                                      }
                                                      i64toi32_i32$2 = $6_1;
                                                      i64toi32_i32$1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                                      i64toi32_i32$0 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                                      $23_1 = i64toi32_i32$1;
                                                      $23$hi = i64toi32_i32$0;
                                                      $317 = 1099;
                                                      break block30;
                                                    }
                                                    $5_1 = 0;
                                                    block37: {
                                                      switch ($19_1 & 255 | 0 | 0) {
                                                        case 0:
                                                          HEAP32[(HEAP32[($6_1 + 64 | 0) >> 2] | 0) >> 2] = $12_1;
                                                          continue label1;
                                                        case 1:
                                                          HEAP32[(HEAP32[($6_1 + 64 | 0) >> 2] | 0) >> 2] = $12_1;
                                                          continue label1;
                                                        case 2:
                                                          i64toi32_i32$1 = $12_1;
                                                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                                          i64toi32_i32$1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                                          HEAP32[i64toi32_i32$1 >> 2] = $12_1;
                                                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                                          continue label1;
                                                        case 3:
                                                          HEAP16[(HEAP32[($6_1 + 64 | 0) >> 2] | 0) >> 1] = $12_1;
                                                          continue label1;
                                                        case 4:
                                                          HEAP8[(HEAP32[($6_1 + 64 | 0) >> 2] | 0) >> 0] = $12_1;
                                                          continue label1;
                                                        case 6:
                                                          HEAP32[(HEAP32[($6_1 + 64 | 0) >> 2] | 0) >> 2] = $12_1;
                                                          continue label1;
                                                        case 7:
                                                          break block37;
                                                        default:
                                                          continue label1;
                                                      }
                                                    }
                                                    i64toi32_i32$1 = $12_1;
                                                    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                                    i64toi32_i32$1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                                    HEAP32[i64toi32_i32$1 >> 2] = $12_1;
                                                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                                    continue label1;
                                                  }
                                                  $8_1 = $8_1 >>> 0 <= 8 >>> 0 ? 8 : $8_1;
                                                  $11_1 = $11_1 | 8 | 0;
                                                  $5_1 = 120;
                                                }
                                                $10_1 = $16_1;
                                                $15_1 = $5_1 & 32 | 0;
                                                i64toi32_i32$2 = $6_1;
                                                i64toi32_i32$0 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                                i64toi32_i32$1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                                $23_1 = i64toi32_i32$0;
                                                $23$hi = i64toi32_i32$1;
                                                i64toi32_i32$2 = i64toi32_i32$0;
                                                i64toi32_i32$0 = 0;
                                                i64toi32_i32$3 = 0;
                                                if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
                                                  label4: while (1) {
                                                    $10_1 = $10_1 - 1 | 0;
                                                    i64toi32_i32$2 = $23$hi;
                                                    HEAP8[$10_1 >> 0] = HEAPU8[(($23_1 & 15 | 0) + 2832 | 0) >> 0] | 0 | $15_1 | 0;
                                                    i64toi32_i32$3 = $23_1;
                                                    i64toi32_i32$1 = 0;
                                                    i64toi32_i32$0 = 15;
                                                    $7_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
                                                    i64toi32_i32$3 = i64toi32_i32$2;
                                                    i64toi32_i32$3 = i64toi32_i32$2;
                                                    i64toi32_i32$0 = $23_1;
                                                    i64toi32_i32$2 = 0;
                                                    i64toi32_i32$1 = 4;
                                                    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
                                                    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                                                      i64toi32_i32$2 = 0;
                                                      $37_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                                                    } else {
                                                      i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                                                      $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                                                    }
                                                    $23_1 = $37_1;
                                                    $23$hi = i64toi32_i32$2;
                                                    if ($7_1) {
                                                      continue label4;
                                                    }
                                                    break label4;
                                                  }
                                                }
                                                i64toi32_i32$3 = $6_1;
                                                i64toi32_i32$2 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                                i64toi32_i32$0 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                                if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
                                                  break block38;
                                                }
                                                if (!($11_1 & 8 | 0)) {
                                                  break block38;
                                                }
                                                $20_1 = ($5_1 >>> 4 | 0) + 1099 | 0;
                                                $13_1 = 2;
                                                break block38;
                                              }
                                              $5_1 = $16_1;
                                              i64toi32_i32$3 = $6_1;
                                              i64toi32_i32$0 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                              i64toi32_i32$2 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                              $23_1 = i64toi32_i32$0;
                                              $23$hi = i64toi32_i32$2;
                                              i64toi32_i32$3 = i64toi32_i32$0;
                                              i64toi32_i32$0 = 0;
                                              i64toi32_i32$1 = 0;
                                              if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
                                                label5: while (1) {
                                                  $5_1 = $5_1 - 1 | 0;
                                                  i64toi32_i32$3 = $23$hi;
                                                  HEAP8[$5_1 >> 0] = $23_1 & 7 | 0 | 48 | 0;
                                                  i64toi32_i32$1 = $23_1;
                                                  i64toi32_i32$2 = 0;
                                                  i64toi32_i32$0 = 7;
                                                  $10_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
                                                  i64toi32_i32$1 = i64toi32_i32$3;
                                                  i64toi32_i32$0 = $23_1;
                                                  i64toi32_i32$3 = 0;
                                                  i64toi32_i32$2 = 3;
                                                  i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                                                  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                                                    i64toi32_i32$3 = 0;
                                                    $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                                                  } else {
                                                    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                                                    $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                                                  }
                                                  $23_1 = $38_1;
                                                  $23$hi = i64toi32_i32$3;
                                                  if ($10_1) {
                                                    continue label5;
                                                  }
                                                  break label5;
                                                }
                                              }
                                              $10_1 = $5_1;
                                              if (!($11_1 & 8 | 0)) {
                                                break block38;
                                              }
                                              $5_1 = $16_1 - $5_1 | 0;
                                              $8_1 = ($5_1 | 0) < ($8_1 | 0) ? $8_1 : $5_1 + 1 | 0;
                                              break block38;
                                            }
                                            i64toi32_i32$1 = $6_1;
                                            i64toi32_i32$3 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                            i64toi32_i32$0 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                            $23_1 = i64toi32_i32$3;
                                            $23$hi = i64toi32_i32$0;
                                            i64toi32_i32$1 = i64toi32_i32$3;
                                            i64toi32_i32$3 = 0;
                                            i64toi32_i32$2 = 0;
                                            if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
                                              $39_1 = 1;
                                            } else {
                                              if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
                                                if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
                                                  $40_1 = 0;
                                                } else {
                                                  $40_1 = 1;
                                                }
                                                $41_1 = $40_1;
                                              } else {
                                                $41_1 = 0;
                                              }
                                              $39_1 = $41_1;
                                            }
                                            if ($39_1) {
                                              i64toi32_i32$1 = $23$hi;
                                              i64toi32_i32$1 = 0;
                                              i64toi32_i32$2 = 0;
                                              i64toi32_i32$0 = $23$hi;
                                              i64toi32_i32$3 = $23_1;
                                              i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                                              i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
                                              i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                                              $23_1 = i64toi32_i32$4;
                                              $23$hi = i64toi32_i32$5;
                                              i64toi32_i32$2 = $6_1;
                                              HEAP32[($6_1 + 64 | 0) >> 2] = i64toi32_i32$4;
                                              HEAP32[($6_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                                              $13_1 = 1;
                                              $317 = 1099;
                                              break block30;
                                            }
                                            if ($11_1 & 2048 | 0) {
                                              $13_1 = 1;
                                              $317 = 1100;
                                              break block30;
                                            }
                                            $13_1 = $11_1 & 1 | 0;
                                            $317 = $13_1 ? 1101 : 1099;
                                          }
                                          $20_1 = $317;
                                          i64toi32_i32$5 = $23$hi;
                                          $10_1 = $26($23_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0) | 0;
                                        }
                                        if (($8_1 | 0) < (0 | 0) ? $18_1 : 0) {
                                          break block;
                                        }
                                        $11_1 = $18_1 ? $11_1 & -65537 | 0 : $11_1;
                                        block39: {
                                          i64toi32_i32$1 = $6_1;
                                          i64toi32_i32$5 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                          i64toi32_i32$2 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                          $23_1 = i64toi32_i32$5;
                                          $23$hi = i64toi32_i32$2;
                                          i64toi32_i32$1 = i64toi32_i32$5;
                                          i64toi32_i32$5 = 0;
                                          i64toi32_i32$3 = 0;
                                          if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
                                            break block39;
                                          }
                                          if ($8_1) {
                                            break block39;
                                          }
                                          $10_1 = $16_1;
                                          $8_1 = 0;
                                          break block17;
                                        }
                                        i64toi32_i32$1 = $23$hi;
                                        $5_1 = !($23_1 | i64toi32_i32$1 | 0) + ($16_1 - $10_1 | 0) | 0;
                                        $8_1 = ($5_1 | 0) < ($8_1 | 0) ? $8_1 : $5_1;
                                        break block17;
                                      }
                                      $5_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                      $10_1 = $5_1 ? $5_1 : 1642;
                                      $9_1 = $8_1 >>> 0 >= 2147483647 >>> 0 ? 2147483647 : $8_1;
                                      $5_1 = $58($10_1 | 0, $9_1 | 0) | 0;
                                      $5_1 = $5_1 ? $5_1 - $10_1 | 0 : $9_1;
                                      $9_1 = $5_1 + $10_1 | 0;
                                      if (($8_1 | 0) >= (0 | 0)) {
                                        $11_1 = $7_1;
                                        $8_1 = $5_1;
                                        break block17;
                                      }
                                      $11_1 = $7_1;
                                      $8_1 = $5_1;
                                      if (HEAPU8[$9_1 >> 0] | 0) {
                                        break block;
                                      }
                                      break block17;
                                    }
                                    if ($8_1) {
                                      $488 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                      break block40;
                                    }
                                    $5_1 = 0;
                                    $6($0_1 | 0, 32 | 0, $14_1 | 0, 0 | 0, $11_1 | 0);
                                    break block41;
                                  }
                                  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
                                  i64toi32_i32$3 = $6_1;
                                  i64toi32_i32$1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                  i64toi32_i32$2 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                                  HEAP32[($6_1 + 8 | 0) >> 2] = i64toi32_i32$1;
                                  $5_1 = $6_1 + 8 | 0;
                                  HEAP32[($6_1 + 64 | 0) >> 2] = $5_1;
                                  $8_1 = -1;
                                  $488 = $5_1;
                                }
                                $7_1 = $488;
                                $5_1 = 0;
                                block42: {
                                  label6: while (1) {
                                    $10_1 = HEAP32[$7_1 >> 2] | 0;
                                    if (!$10_1) {
                                      break block42;
                                    }
                                    block43: {
                                      $9_1 = $45($6_1 + 4 | 0 | 0, $10_1 | 0) | 0;
                                      $10_1 = ($9_1 | 0) < (0 | 0);
                                      if ($10_1) {
                                        break block43;
                                      }
                                      if ($9_1 >>> 0 > ($8_1 - $5_1 | 0) >>> 0) {
                                        break block43;
                                      }
                                      $7_1 = $7_1 + 4 | 0;
                                      $5_1 = $5_1 + $9_1 | 0;
                                      if ($8_1 >>> 0 > $5_1 >>> 0) {
                                        continue label6;
                                      }
                                      break block42;
                                    }
                                    break label6;
                                  }
                                  if ($10_1) {
                                    break block44;
                                  }
                                }
                                $9_1 = 61;
                                if (($5_1 | 0) < (0 | 0)) {
                                  break block12;
                                }
                                $6($0_1 | 0, 32 | 0, $14_1 | 0, $5_1 | 0, $11_1 | 0);
                                if (!$5_1) {
                                  $5_1 = 0;
                                  break block41;
                                }
                                $9_1 = 0;
                                $7_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                                label7: while (1) {
                                  $10_1 = HEAP32[$7_1 >> 2] | 0;
                                  if (!$10_1) {
                                    break block41;
                                  }
                                  $10_1 = $45($6_1 + 4 | 0 | 0, $10_1 | 0) | 0;
                                  $9_1 = $10_1 + $9_1 | 0;
                                  if ($9_1 >>> 0 > $5_1 >>> 0) {
                                    break block41;
                                  }
                                  $3($0_1 | 0, $6_1 + 4 | 0 | 0, $10_1 | 0);
                                  $7_1 = $7_1 + 4 | 0;
                                  if ($5_1 >>> 0 > $9_1 >>> 0) {
                                    continue label7;
                                  }
                                  break label7;
                                }
                              }
                              $6($0_1 | 0, 32 | 0, $14_1 | 0, $5_1 | 0, $11_1 ^ 8192 | 0 | 0);
                              $5_1 = ($5_1 | 0) < ($14_1 | 0) ? $14_1 : $5_1;
                              continue label1;
                            }
                            if (($8_1 | 0) < (0 | 0) ? $18_1 : 0) {
                              break block;
                            }
                            $9_1 = 61;
                            $5_1 = $53($0_1 | 0, + +HEAPF64[($6_1 + 64 | 0) >> 3], $14_1 | 0, $8_1 | 0, $11_1 | 0, $5_1 | 0) | 0;
                            if (($5_1 | 0) >= (0 | 0)) {
                              continue label1;
                            }
                            break block12;
                          }
                          i64toi32_i32$3 = $6_1;
                          i64toi32_i32$2 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
                          HEAP8[($6_1 + 55 | 0) >> 0] = i64toi32_i32$2;
                          $8_1 = 1;
                          $10_1 = $21_1;
                          $11_1 = $7_1;
                          break block17;
                        }
                        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                        $5_1 = $5_1 + 1 | 0;
                        continue label8;
                      }
                    }
                    if ($0_1) {
                      break block45;
                    }
                    if (!$17_1) {
                      break block14;
                    }
                    $5_1 = 1;
                    label9: while (1) {
                      $0_1 = HEAP32[($4_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
                      if ($0_1) {
                        $54($3_1 + ($5_1 << 3 | 0) | 0 | 0, $0_1 | 0, $2_1 | 0);
                        $12_1 = 1;
                        $5_1 = $5_1 + 1 | 0;
                        if (($5_1 | 0) != (10 | 0)) {
                          continue label9;
                        }
                        break block45;
                      }
                      break label9;
                    }
                    $12_1 = 1;
                    if ($5_1 >>> 0 >= 10 >>> 0) {
                      break block45;
                    }
                    label10: while (1) {
                      if (HEAP32[($4_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0) {
                        break block7;
                      }
                      $5_1 = $5_1 + 1 | 0;
                      if (($5_1 | 0) != (10 | 0)) {
                        continue label10;
                      }
                      break label10;
                    }
                    break block45;
                  }
                  $9_1 = 28;
                  break block12;
                }
                $15_1 = $9_1 - $10_1 | 0;
                $7_1 = ($8_1 | 0) > ($15_1 | 0) ? $8_1 : $15_1;
                if (($7_1 | 0) > ($13_1 ^ 2147483647 | 0 | 0)) {
                  break block;
                }
                $9_1 = 61;
                $8_1 = $7_1 + $13_1 | 0;
                $5_1 = ($8_1 | 0) < ($14_1 | 0) ? $14_1 : $8_1;
                if (($5_1 | 0) > ($22_1 | 0)) {
                  break block12;
                }
                $6($0_1 | 0, 32 | 0, $5_1 | 0, $8_1 | 0, $11_1 | 0);
                $3($0_1 | 0, $20_1 | 0, $13_1 | 0);
                $6($0_1 | 0, 48 | 0, $5_1 | 0, $8_1 | 0, $11_1 ^ 65536 | 0 | 0);
                $6($0_1 | 0, 48 | 0, $7_1 | 0, $15_1 | 0, 0 | 0);
                $3($0_1 | 0, $10_1 | 0, $15_1 | 0);
                $6($0_1 | 0, 32 | 0, $5_1 | 0, $8_1 | 0, $11_1 ^ 8192 | 0 | 0);
                continue label1;
              }
              break label1;
            }
            $12_1 = 0;
            break block45;
          }
          $9_1 = 61;
        }
        HEAP32[5060 >> 2] = $9_1;
      }
      $12_1 = -1;
    }
    global$0 = $6_1 + 80 | 0;
    return $12_1 | 0;
  }
  function $57($0_1, $1_1) {
    $0_1 = +$0_1;
    $1_1 = $1_1 | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$4 = 0,
      $2_1 = 0,
      $3_1 = 0,
      $13_1 = 0,
      $26_1 = 0,
      $39_1 = 0,
      $3$hi = 0,
      $14_1 = 0;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $13_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 2047 | 0;
    if (($2_1 | 0) != (2047 | 0)) {
      if (!$2_1) {
        $14_1 = $1_1;
        if ($0_1 == 0) {
          $26_1 = 0;
        } else {
          $0_1 = +$57(+($0_1 * 0x10000000000000000), $1_1 | 0);
          $26_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
        }
        HEAP32[$14_1 >> 2] = $26_1;
        return +$0_1;
      }
      HEAP32[$1_1 >> 2] = $2_1 - 1022 | 0;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = -2146435073;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      i64toi32_i32$0 = 1071644672;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
      wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
      $39_1 = +wasm2js_scratch_load_f64();
    } else {
      $39_1 = $0_1;
    }
    return +$39_1;
  }
  function $58($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0;
    $2_1 = ($1_1 | 0) != (0 | 0);
    block2: {
      block1: {
        block: {
          if (!($0_1 & 3 | 0)) {
            break block;
          }
          if (!$1_1) {
            break block;
          }
          label: while (1) {
            if (!(HEAPU8[$0_1 >> 0] | 0)) {
              break block1;
            }
            $1_1 = $1_1 - 1 | 0;
            $2_1 = ($1_1 | 0) != (0 | 0);
            $0_1 = $0_1 + 1 | 0;
            if (!($0_1 & 3 | 0)) {
              break block;
            }
            if ($1_1) {
              continue label;
            }
            break label;
          }
        }
        if (!$2_1) {
          break block2;
        }
        block3: {
          if (!(HEAPU8[$0_1 >> 0] | 0)) {
            break block3;
          }
          if ($1_1 >>> 0 < 4 >>> 0) {
            break block3;
          }
          label1: while (1) {
            $2_1 = HEAP32[$0_1 >> 2] | 0;
            if ((($2_1 ^ -1 | 0) & ($2_1 - 16843009 | 0) | 0) & -2139062144 | 0) {
              break block1;
            }
            $0_1 = $0_1 + 4 | 0;
            $1_1 = $1_1 - 4 | 0;
            if ($1_1 >>> 0 > 3 >>> 0) {
              continue label1;
            }
            break label1;
          }
        }
        if (!$1_1) {
          break block2;
        }
      }
      label2: while (1) {
        if (!(HEAPU8[$0_1 >> 0] | 0)) {
          return $0_1 | 0;
        }
        $0_1 = $0_1 + 1 | 0;
        $1_1 = $1_1 - 1 | 0;
        if ($1_1) {
          continue label2;
        }
        break label2;
      }
    }
    return 0 | 0;
  }
  function $59($0_1) {
    $0_1 = $0_1 | 0;
    var $1_1 = 0;
    $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 - 1 | 0 | $1_1 | 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if ($1_1 & 8 | 0) {
      HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
      return -1 | 0;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    return 0 | 0;
  }
  function $60($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$5 = 0,
      $3_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $4_1 = 0,
      $29$hi = 0,
      $30$hi = 0,
      $7_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $8_1 = 0,
      $31$hi = 0,
      $9_1 = 0,
      $31_1 = 0,
      $10_1 = 0,
      $32$hi = 0,
      $32_1 = 0,
      $12_1 = 0,
      $11_1 = 0,
      $13_1 = 0,
      $14_1 = 0,
      i64toi32_i32$6 = 0,
      $33$hi = 0,
      $16_1 = 0,
      $34$hi = 0,
      $15_1 = 0,
      $33_1 = 0,
      $18_1 = 0,
      $35$hi = 0,
      $34_1 = 0,
      $21_1 = 0,
      $1249 = 0,
      $1249$hi = 0,
      $35_1 = 0,
      $19_1 = 0,
      $20_1 = 0,
      $17_1 = 0,
      $22_1 = 0,
      $507 = 0,
      $791 = 0,
      $791$hi = 0,
      $23_1 = 0,
      $24_1 = 0,
      $36$hi = 0,
      $26_1 = 0,
      $507$hi = 0,
      $25_1 = 0,
      $27_1 = 0,
      $208 = 0,
      $36_1 = 0,
      $102 = 0,
      $381 = 0,
      $382 = 0,
      $383 = 0,
      $155 = 0,
      $384 = 0,
      $385 = 0,
      $386 = 0,
      $274 = 0,
      $340 = 0,
      $387 = 0,
      $388 = 0,
      $389 = 0,
      $390 = 0,
      $391 = 0,
      $392 = 0,
      $427 = 0,
      $393 = 0,
      $394 = 0,
      $395 = 0,
      $396 = 0,
      $397 = 0,
      $398 = 0,
      $399 = 0,
      $591 = 0,
      $611 = 0,
      $630 = 0,
      $648 = 0,
      $668 = 0,
      $400 = 0,
      $401 = 0,
      $402 = 0,
      $770 = 0,
      $403 = 0,
      $404 = 0,
      $405 = 0,
      $406 = 0,
      $407 = 0,
      $408 = 0,
      $409 = 0,
      $410 = 0,
      $411 = 0,
      $412 = 0,
      $413 = 0,
      $414 = 0,
      $415 = 0,
      $416 = 0,
      $417 = 0,
      $418 = 0,
      $419 = 0,
      $420 = 0,
      $421 = 0,
      $928 = 0,
      $928$hi = 0,
      $422 = 0,
      $423 = 0,
      $424 = 0,
      $28_1 = 0,
      $1093 = 0,
      $1111 = 0,
      $1131 = 0,
      $1177 = 0,
      $1206 = 0,
      $425 = 0,
      $426 = 0,
      $428 = 0,
      $429 = 0,
      $430 = 0,
      $431 = 0,
      $432 = 0,
      $433 = 0,
      $434 = 0,
      $435 = 0,
      $436 = 0,
      $437 = 0,
      $438 = 0,
      $1608 = 0,
      $37_1 = 0,
      $2132 = 0,
      $439 = 0,
      $440 = 0,
      $441 = 0,
      $2155 = 0,
      $442 = 0,
      $443 = 0,
      $444 = 0,
      $445 = 0,
      $2238 = 0,
      $2312 = 0,
      $2358 = 0,
      $2376 = 0,
      $446 = 0,
      $447 = 0,
      $448 = 0,
      $449 = 0,
      $450 = 0,
      $451 = 0,
      $2432 = 0,
      $2463 = 0,
      $2511 = 0,
      $2554 = 0,
      $2599 = 0,
      $452 = 0,
      $453 = 0,
      $2641 = 0,
      $2670 = 0,
      $454 = 0,
      $455 = 0,
      $456 = 0,
      $457 = 0,
      $458 = 0,
      $459 = 0,
      $460 = 0,
      $461 = 0,
      $2872 = 0,
      $3011 = 0,
      $3030 = 0,
      $3069 = 0,
      $3096 = 0,
      $462 = 0,
      $463 = 0,
      $464 = 0,
      $125 = 0,
      $125$hi = 0,
      $127$hi = 0,
      $129$hi = 0,
      $199 = 0,
      $199$hi = 0,
      $201$hi = 0,
      $203$hi = 0,
      $282 = 0,
      $292 = 0,
      $302 = 0,
      $363 = 0,
      $363$hi = 0,
      $365$hi = 0,
      $367$hi = 0,
      $520 = 0,
      $529 = 0,
      $529$hi = 0,
      $533$hi = 0,
      $538 = 0,
      $539 = 0,
      $539$hi = 0,
      $543$hi = 0,
      $544 = 0,
      $714 = 0,
      $714$hi = 0,
      $716 = 0,
      $716$hi = 0,
      $725 = 0,
      $725$hi = 0,
      $727 = 0,
      $727$hi = 0,
      $744 = 0,
      $744$hi = 0,
      $746 = 0,
      $746$hi = 0,
      $831$hi = 0,
      $838$hi = 0,
      $846 = 0,
      $846$hi = 0,
      $848 = 0,
      $848$hi = 0,
      $852 = 0,
      $852$hi = 0,
      $854 = 0,
      $854$hi = 0,
      $861$hi = 0,
      $879 = 0,
      $879$hi = 0,
      $883 = 0,
      $883$hi = 0,
      $886 = 0,
      $886$hi = 0,
      $888 = 0,
      $888$hi = 0,
      $904$hi = 0,
      $912 = 0,
      $913 = 0,
      $916$hi = 0,
      $940 = 0,
      $940$hi = 0,
      $942 = 0,
      $942$hi = 0,
      $975 = 0,
      $975$hi = 0,
      $977 = 0,
      $977$hi = 0,
      $981 = 0,
      $981$hi = 0,
      $983 = 0,
      $983$hi = 0,
      $992 = 0,
      $992$hi = 0,
      $995 = 0,
      $995$hi = 0,
      $999 = 0,
      $999$hi = 0,
      $1001 = 0,
      $1001$hi = 0,
      $1003 = 0,
      $1003$hi = 0,
      $1005 = 0,
      $1005$hi = 0,
      $1009 = 0,
      $1009$hi = 0,
      $1011 = 0,
      $1011$hi = 0,
      $1038 = 0,
      $1038$hi = 0,
      $1040 = 0,
      $1040$hi = 0,
      $1044 = 0,
      $1044$hi = 0,
      $1046 = 0,
      $1046$hi = 0,
      $1140 = 0,
      $1168 = 0,
      $1181 = 0,
      $1282 = 0,
      $1282$hi = 0,
      $1284 = 0,
      $1284$hi = 0,
      $1286 = 0,
      $1286$hi = 0,
      $1288 = 0,
      $1288$hi = 0,
      $1295$hi = 0,
      $1304 = 0,
      $1304$hi = 0,
      $1306 = 0,
      $1306$hi = 0,
      $1310 = 0,
      $1310$hi = 0,
      $1312 = 0,
      $1312$hi = 0,
      $1319$hi = 0,
      $1328 = 0,
      $1328$hi = 0,
      $1330 = 0,
      $1330$hi = 0,
      $1334 = 0,
      $1334$hi = 0,
      $1336 = 0,
      $1336$hi = 0,
      $1382 = 0,
      $1382$hi = 0,
      $1384 = 0,
      $1384$hi = 0,
      $1386 = 0,
      $1386$hi = 0,
      $1388 = 0,
      $1388$hi = 0,
      $1405 = 0,
      $1405$hi = 0,
      $1407 = 0,
      $1407$hi = 0,
      $1409 = 0,
      $1409$hi = 0,
      $1411 = 0,
      $1411$hi = 0,
      $1422 = 0,
      $1422$hi = 0,
      $1424 = 0,
      $1424$hi = 0,
      $1426 = 0,
      $1426$hi = 0,
      $1428 = 0,
      $1428$hi = 0,
      $1455 = 0,
      $1455$hi = 0,
      $1457 = 0,
      $1457$hi = 0,
      $1459 = 0,
      $1459$hi = 0,
      $1461 = 0,
      $1461$hi = 0,
      $1471 = 0,
      $1471$hi = 0,
      $1473 = 0,
      $1473$hi = 0,
      $1475 = 0,
      $1475$hi = 0,
      $1477 = 0,
      $1477$hi = 0,
      $1516 = 0,
      $1584 = 0,
      $1584$hi = 0,
      $1594$hi = 0,
      $1602 = 0,
      $1602$hi = 0,
      $1610 = 0,
      $1745 = 0,
      $1745$hi = 0,
      $1747 = 0,
      $1747$hi = 0,
      $1749 = 0,
      $1749$hi = 0,
      $1751 = 0,
      $1751$hi = 0,
      $1768 = 0,
      $1768$hi = 0,
      $1770 = 0,
      $1770$hi = 0,
      $1810 = 0,
      $1871 = 0,
      $1871$hi = 0,
      $1873 = 0,
      $1873$hi = 0,
      $1890 = 0,
      $1890$hi = 0,
      $1892 = 0,
      $1892$hi = 0,
      $1908 = 0,
      $1908$hi = 0,
      $1910 = 0,
      $1910$hi = 0,
      $1947 = 0,
      $1947$hi = 0,
      $1949 = 0,
      $1949$hi = 0,
      $1966 = 0,
      $1966$hi = 0,
      $1968 = 0,
      $1968$hi = 0,
      $1989 = 0,
      $1989$hi = 0,
      $1991 = 0,
      $1991$hi = 0,
      $2005 = 0,
      $2005$hi = 0,
      $2007 = 0,
      $2007$hi = 0,
      $2019 = 0,
      $2019$hi = 0,
      $2021 = 0,
      $2021$hi = 0,
      $2040 = 0,
      $2040$hi = 0,
      $2042 = 0,
      $2042$hi = 0,
      $2056 = 0,
      $2064 = 0,
      $2064$hi = 0,
      $2066 = 0,
      $2066$hi = 0,
      $2070 = 0,
      $2070$hi = 0,
      $2077 = 0,
      $2077$hi = 0,
      $2190 = 0,
      $2190$hi = 0,
      $2196 = 0,
      $2196$hi = 0,
      $2197$hi = 0,
      $2420 = 0,
      $2479 = 0,
      $2479$hi = 0,
      $2499 = 0,
      $2537 = 0,
      $2537$hi = 0,
      $2542 = 0,
      $2587 = 0,
      $2624 = 0,
      $2624$hi = 0,
      $2627$hi = 0,
      $2629 = 0,
      $2658 = 0,
      $2690$hi = 0,
      $2696 = 0,
      $2696$hi = 0,
      $2702 = 0,
      $2702$hi = 0,
      $2703$hi = 0,
      $2727 = 0,
      $2727$hi = 0,
      $2729$hi = 0,
      $2735 = 0,
      $2739 = 0,
      $2750 = 0,
      $2750$hi = 0,
      $2758 = 0,
      $2760 = 0,
      $2797 = 0,
      $2797$hi = 0,
      $2799 = 0,
      $2799$hi = 0,
      $2801 = 0,
      $2801$hi = 0,
      $2803 = 0,
      $2804$hi = 0,
      $2807 = 0,
      $2811 = 0,
      $2820 = 0,
      $2820$hi = 0,
      $2829 = 0,
      $2830 = 0,
      $3113 = 0,
      $3113$hi = 0,
      $3118 = 0,
      $3118$hi = 0,
      $3148 = 0,
      $3148$hi = 0,
      $3150$hi = 0,
      $3152$hi = 0;
    $27_1 = global$0 - 16 | 0;
    global$0 = $27_1;
    HEAP32[($27_1 + 12 | 0) >> 2] = $2_1;
    $3_1 = global$0 - 144 | 0;
    global$0 = $3_1;
    $3_1 = $12($3_1 | 0, 0 | 0, 144 | 0) | 0;
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
    HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = 4;
    HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
    $5_1 = $1_1;
    $23_1 = $2_1;
    $0_1 = 0;
    $11_1 = global$0 - 304 | 0;
    global$0 = $11_1;
    HEAP32[($3_1 + 76 | 0) >> 2] | 0;
    block2: {
      block137: {
        block1: {
          block: {
            if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
              break block;
            }
            $51($3_1 | 0) | 0;
            if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
              break block;
            }
            break block1;
          }
          $1_1 = HEAPU8[$5_1 >> 0] | 0;
          if (!$1_1) {
            break block2;
          }
          block12: {
            block22: {
              block92: {
                block124: {
                  label46: while (1) {
                    block135: {
                      block4: {
                        $1_1 = $1_1 & 255 | 0;
                        if (($1_1 | 0) == (32 | 0) | ($1_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                          label: while (1) {
                            $1_1 = $5_1;
                            $5_1 = $5_1 + 1 | 0;
                            $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                            if (($2_1 | 0) == (32 | 0) | ($2_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                              continue label;
                            }
                            break label;
                          }
                          i64toi32_i32$0 = 0;
                          $17($3_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                          label1: while (1) {
                            block3: {
                              $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                              if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                $102 = HEAPU8[$2_1 >> 0] | 0;
                                break block3;
                              }
                              $102 = $0($3_1 | 0) | 0;
                            }
                            $2_1 = $102;
                            if (($2_1 | 0) == (32 | 0) | ($2_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                              continue label1;
                            }
                            break label1;
                          }
                          $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                          i64toi32_i32$2 = $3_1;
                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
                          i64toi32_i32$2 = i64toi32_i32$0;
                          i64toi32_i32$0 = 0;
                          i64toi32_i32$3 = 0;
                          if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                            $381 = 1;
                          } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                                $382 = 0;
                              } else {
                                $382 = 1;
                              }
                              $383 = $382;
                            } else {
                              $383 = 0;
                            }
                            $381 = $383;
                          }
                          if ($381) {
                            $5_1 = $5_1 - 1 | 0;
                            HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
                          }
                          i64toi32_i32$1 = $5_1 - (HEAP32[($3_1 + 44 | 0) >> 2] | 0) | 0;
                          i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
                          $125 = i64toi32_i32$1;
                          $125$hi = i64toi32_i32$2;
                          i64toi32_i32$3 = $3_1;
                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
                          $127$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $35$hi;
                          i64toi32_i32$1 = $127$hi;
                          i64toi32_i32$3 = i64toi32_i32$2;
                          i64toi32_i32$2 = $35$hi;
                          i64toi32_i32$0 = $35_1;
                          i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                          }
                          $129$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $125$hi;
                          i64toi32_i32$1 = $125;
                          i64toi32_i32$3 = $129$hi;
                          i64toi32_i32$0 = i64toi32_i32$4;
                          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                          }
                          $35_1 = i64toi32_i32$2;
                          $35$hi = i64toi32_i32$4;
                          break block4;
                        }
                        block9: {
                          block6: {
                            block5: {
                              if ((HEAPU8[$5_1 >> 0] | 0 | 0) == (37 | 0)) {
                                $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                                if (($1_1 | 0) == (42 | 0)) {
                                  break block5;
                                }
                                if (($1_1 | 0) != (37 | 0)) {
                                  break block6;
                                }
                              }
                              i64toi32_i32$4 = 0;
                              $17($3_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                              block8: {
                                if ((HEAPU8[$5_1 >> 0] | 0 | 0) == (37 | 0)) {
                                  label2: while (1) {
                                    block7: {
                                      $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                      if (($1_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                        HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                                        $155 = HEAPU8[$1_1 >> 0] | 0;
                                        break block7;
                                      }
                                      $155 = $0($3_1 | 0) | 0;
                                    }
                                    $1_1 = $155;
                                    if (($1_1 | 0) == (32 | 0) | ($1_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                                      continue label2;
                                    }
                                    break label2;
                                  }
                                  $5_1 = $5_1 + 1 | 0;
                                  break block8;
                                }
                                $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                if (($1_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                  HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                                  $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                  break block8;
                                }
                                $1_1 = $0($3_1 | 0) | 0;
                              }
                              if ((HEAPU8[$5_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
                                i64toi32_i32$5 = $3_1;
                                i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
                                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
                                i64toi32_i32$5 = i64toi32_i32$4;
                                i64toi32_i32$4 = 0;
                                i64toi32_i32$0 = 0;
                                if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                                  $384 = 1;
                                } else {
                                  if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                                      $385 = 0;
                                    } else {
                                      $385 = 1;
                                    }
                                    $386 = $385;
                                  } else {
                                    $386 = 0;
                                  }
                                  $384 = $386;
                                }
                                if ($384) {
                                  HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                }
                                if (($1_1 | 0) >= (0 | 0)) {
                                  break block2;
                                }
                                $7_1 = 0;
                                if ($24_1) {
                                  break block2;
                                }
                                break block1;
                              }
                              i64toi32_i32$1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - (HEAP32[($3_1 + 44 | 0) >> 2] | 0) | 0;
                              i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                              $199 = i64toi32_i32$1;
                              $199$hi = i64toi32_i32$5;
                              i64toi32_i32$0 = $3_1;
                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
                              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
                              $201$hi = i64toi32_i32$1;
                              i64toi32_i32$1 = $35$hi;
                              i64toi32_i32$1 = $201$hi;
                              i64toi32_i32$0 = i64toi32_i32$5;
                              i64toi32_i32$5 = $35$hi;
                              i64toi32_i32$4 = $35_1;
                              i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                              i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                              }
                              $203$hi = i64toi32_i32$2;
                              i64toi32_i32$2 = $199$hi;
                              i64toi32_i32$1 = $199;
                              i64toi32_i32$0 = $203$hi;
                              i64toi32_i32$4 = i64toi32_i32$3;
                              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                              i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                              if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                              }
                              $35_1 = i64toi32_i32$5;
                              $35$hi = i64toi32_i32$3;
                              $1_1 = $5_1;
                              break block4;
                            }
                            $15_1 = 0;
                            $208 = $5_1 + 2 | 0;
                            break block9;
                          }
                          block10: {
                            if (($1_1 - 48 | 0) >>> 0 >= 10 >>> 0) {
                              break block10;
                            }
                            if ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                              break block10;
                            }
                            $1_1 = (HEAPU8[($5_1 + 1 | 0) >> 0] | 0) - 48 | 0;
                            $2_1 = global$0 - 16 | 0;
                            HEAP32[($2_1 + 12 | 0) >> 2] = $23_1;
                            $1_1 = $23_1 + ($1_1 >>> 0 > 1 >>> 0 ? ($1_1 << 2 | 0) - 4 | 0 : 0) | 0;
                            HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 + 4 | 0;
                            $15_1 = HEAP32[$1_1 >> 2] | 0;
                            $208 = $5_1 + 3 | 0;
                            break block9;
                          }
                          $15_1 = HEAP32[$23_1 >> 2] | 0;
                          $23_1 = $23_1 + 4 | 0;
                          $208 = $5_1 + 1 | 0;
                        }
                        $1_1 = $208;
                        $19_1 = 0;
                        $5_1 = 0;
                        if (((HEAPU8[$1_1 >> 0] | 0) - 48 | 0) >>> 0 < 10 >>> 0) {
                          label3: while (1) {
                            $5_1 = ((HEAPU8[$1_1 >> 0] | 0) + Math_imul($5_1, 10) | 0) - 48 | 0;
                            $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                            $1_1 = $1_1 + 1 | 0;
                            if (($2_1 - 48 | 0) >>> 0 < 10 >>> 0) {
                              continue label3;
                            }
                            break label3;
                          }
                        }
                        $9_1 = HEAPU8[$1_1 >> 0] | 0;
                        if (($9_1 | 0) != (109 | 0)) {
                          $274 = $1_1;
                        } else {
                          $16_1 = 0;
                          $19_1 = ($15_1 | 0) != (0 | 0);
                          $9_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                          $0_1 = 0;
                          $274 = $1_1 + 1 | 0;
                        }
                        $2_1 = $274;
                        $1_1 = $2_1 + 1 | 0;
                        $6_1 = 3;
                        $7_1 = $19_1;
                        block15: {
                          block11: {
                            switch ($9_1 - 65 | 0 | 0) {
                              case 39:
                                $282 = $2_1 + 2 | 0;
                                $2_1 = (HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
                                $1_1 = $2_1 ? $282 : $1_1;
                                $6_1 = $2_1 ? -2 : -1;
                                break block15;
                              case 43:
                                $292 = $2_1 + 2 | 0;
                                $2_1 = (HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
                                $1_1 = $2_1 ? $292 : $1_1;
                                $6_1 = $2_1 ? 3 : 1;
                                break block15;
                              case 51:
                              case 57:
                                $6_1 = 1;
                                break block15;
                              case 11:
                                $6_1 = 2;
                                break block15;
                              case 0:
                              case 2:
                              case 4:
                              case 5:
                              case 6:
                              case 18:
                              case 23:
                              case 26:
                              case 32:
                              case 34:
                              case 35:
                              case 36:
                              case 37:
                              case 38:
                              case 40:
                              case 45:
                              case 46:
                              case 47:
                              case 50:
                              case 52:
                              case 55:
                                break block11;
                              case 41:
                                break block15;
                              default:
                                break block12;
                            }
                          }
                          $6_1 = 0;
                          $1_1 = $2_1;
                        }
                        $302 = $6_1;
                        $2_1 = HEAPU8[$1_1 >> 0] | 0;
                        $6_1 = ($2_1 & 47 | 0 | 0) == (3 | 0);
                        $9_1 = $6_1 ? 1 : $302;
                        block18: {
                          $4_1 = $6_1 ? $2_1 | 32 | 0 : $2_1;
                          if (($4_1 | 0) == (91 | 0)) {
                            break block18;
                          }
                          block19: {
                            if (($4_1 | 0) != (110 | 0)) {
                              if (($4_1 | 0) != (99 | 0)) {
                                break block19;
                              }
                              $5_1 = ($5_1 | 0) <= (1 | 0) ? 1 : $5_1;
                              break block18;
                            }
                            i64toi32_i32$3 = $35$hi;
                            $46($15_1 | 0, $9_1 | 0, $35_1 | 0, i64toi32_i32$3 | 0);
                            break block4;
                          }
                          i64toi32_i32$3 = 0;
                          $17($3_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
                          label4: while (1) {
                            block20: {
                              $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                              if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                $340 = HEAPU8[$2_1 >> 0] | 0;
                                break block20;
                              }
                              $340 = $0($3_1 | 0) | 0;
                            }
                            $2_1 = $340;
                            if (($2_1 | 0) == (32 | 0) | ($2_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                              continue label4;
                            }
                            break label4;
                          }
                          $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                          i64toi32_i32$2 = $3_1;
                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
                          i64toi32_i32$2 = i64toi32_i32$3;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$4 = 0;
                          if ((i64toi32_i32$1 | 0) > (i64toi32_i32$3 | 0)) {
                            $387 = 1;
                          } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$3 | 0)) {
                              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                                $388 = 0;
                              } else {
                                $388 = 1;
                              }
                              $389 = $388;
                            } else {
                              $389 = 0;
                            }
                            $387 = $389;
                          }
                          if ($387) {
                            $2_1 = $2_1 - 1 | 0;
                            HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
                          }
                          i64toi32_i32$1 = $2_1 - (HEAP32[($3_1 + 44 | 0) >> 2] | 0) | 0;
                          i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
                          $363 = i64toi32_i32$1;
                          $363$hi = i64toi32_i32$2;
                          i64toi32_i32$4 = $3_1;
                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 120 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 124 | 0) >> 2] | 0;
                          $365$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $35$hi;
                          i64toi32_i32$1 = $365$hi;
                          i64toi32_i32$4 = i64toi32_i32$2;
                          i64toi32_i32$2 = $35$hi;
                          i64toi32_i32$3 = $35_1;
                          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                          }
                          $367$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $363$hi;
                          i64toi32_i32$1 = $363;
                          i64toi32_i32$4 = $367$hi;
                          i64toi32_i32$3 = i64toi32_i32$0;
                          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                          }
                          $35_1 = i64toi32_i32$2;
                          $35$hi = i64toi32_i32$0;
                        }
                        i64toi32_i32$1 = $5_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        $29_1 = i64toi32_i32$1;
                        $29$hi = i64toi32_i32$0;
                        $17($3_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
                        block21: {
                          $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                          if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                            HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                            break block21;
                          }
                          if (($0($3_1 | 0) | 0 | 0) < (0 | 0)) {
                            break block22;
                          }
                        }
                        i64toi32_i32$5 = $3_1;
                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
                        i64toi32_i32$5 = i64toi32_i32$0;
                        i64toi32_i32$0 = 0;
                        i64toi32_i32$3 = 0;
                        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                          $390 = 1;
                        } else {
                          if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                              $391 = 0;
                            } else {
                              $391 = 1;
                            }
                            $392 = $391;
                          } else {
                            $392 = 0;
                          }
                          $390 = $392;
                        }
                        if ($390) {
                          HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                        }
                        $2_1 = 16;
                        block24: {
                          block93: {
                            block91: {
                              block23: {
                                block28: {
                                  switch ($4_1 - 88 | 0 | 0) {
                                    default:
                                      $2_1 = $4_1 - 65 | 0;
                                      if ($2_1 >>> 0 > 6 >>> 0) {
                                        break block24;
                                      }
                                      if (!((1 << $2_1 | 0) & 113 | 0)) {
                                        break block24;
                                      }
                                    case 9:
                                    case 13:
                                    case 14:
                                    case 15:
                                      i64toi32_i32$5 = 0;
                                      $29_1 = 0;
                                      $29$hi = i64toi32_i32$5;
                                      i64toi32_i32$5 = 0;
                                      $30_1 = 0;
                                      $30$hi = i64toi32_i32$5;
                                      $8_1 = 0;
                                      $7_1 = 0;
                                      i64toi32_i32$5 = 0;
                                      $32_1 = 0;
                                      $32$hi = i64toi32_i32$5;
                                      $10_1 = 0;
                                      i64toi32_i32$5 = 0;
                                      $31_1 = 0;
                                      $31$hi = i64toi32_i32$5;
                                      $12_1 = 0;
                                      $14_1 = 0;
                                      $6_1 = 0;
                                      i64toi32_i32$5 = 0;
                                      $33_1 = 0;
                                      $33$hi = i64toi32_i32$5;
                                      $4_1 = 0;
                                      i64toi32_i32$5 = 0;
                                      $34_1 = 0;
                                      $34$hi = i64toi32_i32$5;
                                      i64toi32_i32$5 = 0;
                                      $36_1 = 0;
                                      $36$hi = i64toi32_i32$5;
                                      $17_1 = global$0 - 48 | 0;
                                      global$0 = $17_1;
                                      block38: {
                                        $18_1 = $9_1;
                                        if ($9_1 >>> 0 <= 2 >>> 0) {
                                          $2_1 = $9_1 << 2 | 0;
                                          $22_1 = HEAP32[($2_1 + 2908 | 0) >> 2] | 0;
                                          $20_1 = HEAP32[($2_1 + 2896 | 0) >> 2] | 0;
                                          label5: while (1) {
                                            block31: {
                                              $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                              if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                $427 = HEAPU8[$2_1 >> 0] | 0;
                                                break block31;
                                              }
                                              $427 = $0($3_1 | 0) | 0;
                                            }
                                            $2_1 = $427;
                                            if (($2_1 | 0) == (32 | 0) | ($2_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                                              continue label5;
                                            }
                                            break label5;
                                          }
                                          $5_1 = 1;
                                          block33: {
                                            block32: {
                                              switch ($2_1 - 43 | 0 | 0) {
                                                case 0:
                                                case 2:
                                                  break block32;
                                                default:
                                                  break block33;
                                              }
                                            }
                                            $5_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
                                            $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                            if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                              HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                              $2_1 = HEAPU8[$2_1 >> 0] | 0;
                                              break block33;
                                            }
                                            $2_1 = $0($3_1 | 0) | 0;
                                          }
                                          block36: {
                                            block35: {
                                              label6: while (1) {
                                                if ((HEAP8[($8_1 + 1024 | 0) >> 0] | 0 | 0) == ($2_1 | 32 | 0 | 0)) {
                                                  block34: {
                                                    if ($8_1 >>> 0 > 6 >>> 0) {
                                                      break block34;
                                                    }
                                                    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                    if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                                                      break block34;
                                                    }
                                                    $2_1 = $0($3_1 | 0) | 0;
                                                  }
                                                  $8_1 = $8_1 + 1 | 0;
                                                  if (($8_1 | 0) != (8 | 0)) {
                                                    continue label6;
                                                  }
                                                  break block35;
                                                }
                                                break label6;
                                              }
                                              if (($8_1 | 0) != (3 | 0)) {
                                                if (($8_1 | 0) == (8 | 0)) {
                                                  break block35;
                                                }
                                                break block36;
                                              }
                                              i64toi32_i32$3 = $3_1;
                                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
                                              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
                                              i64toi32_i32$3 = i64toi32_i32$5;
                                              i64toi32_i32$5 = 0;
                                              i64toi32_i32$0 = 0;
                                              if ((i64toi32_i32$1 | 0) > (i64toi32_i32$5 | 0)) {
                                                $393 = 1;
                                              } else {
                                                if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$5 | 0)) {
                                                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                                                    $394 = 0;
                                                  } else {
                                                    $394 = 1;
                                                  }
                                                  $395 = $394;
                                                } else {
                                                  $395 = 0;
                                                }
                                                $393 = $395;
                                              }
                                              if ($393) {
                                                HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                              }
                                            }
                                            $6_1 = global$0 - 16 | 0;
                                            global$0 = $6_1;
                                            block37: {
                                              $5_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround($5_1 | 0) * Math_fround(Infinity))), wasm2js_scratch_load_i32(2));
                                              $2_1 = $5_1 & 2147483647 | 0;
                                              if (($2_1 - 8388608 | 0) >>> 0 <= 2130706431 >>> 0) {
                                                i64toi32_i32$3 = 0;
                                                i64toi32_i32$0 = $2_1;
                                                i64toi32_i32$1 = 0;
                                                i64toi32_i32$5 = 25;
                                                i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
                                                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                                  i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
                                                  $396 = 0;
                                                } else {
                                                  i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                                                  $396 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
                                                }
                                                i64toi32_i32$3 = $396;
                                                i64toi32_i32$0 = 1065353216;
                                                i64toi32_i32$5 = 0;
                                                i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                                                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                                                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                                                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                                                }
                                                $507 = i64toi32_i32$4;
                                                $507$hi = i64toi32_i32$2;
                                                break block37;
                                              }
                                              i64toi32_i32$2 = 0;
                                              i64toi32_i32$1 = $5_1;
                                              i64toi32_i32$3 = 0;
                                              i64toi32_i32$5 = 25;
                                              i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
                                              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                                i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
                                                $397 = 0;
                                              } else {
                                                i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
                                                $397 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
                                              }
                                              i64toi32_i32$2 = $397;
                                              i64toi32_i32$1 = 2147418112;
                                              i64toi32_i32$5 = 0;
                                              i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                                              $507 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                                              $507$hi = i64toi32_i32$1;
                                              if ($2_1 >>> 0 >= 2139095040 >>> 0) {
                                                break block37;
                                              }
                                              i64toi32_i32$1 = 0;
                                              $507 = 0;
                                              $507$hi = i64toi32_i32$1;
                                              if (!$2_1) {
                                                break block37;
                                              }
                                              i64toi32_i32$1 = 0;
                                              $520 = $2_1;
                                              $2_1 = Math_clz32($2_1);
                                              i64toi32_i32$2 = 0;
                                              $5($6_1 | 0, $520 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, $2_1 + 81 | 0 | 0);
                                              i64toi32_i32$3 = $6_1;
                                              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                                              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                                              $29_1 = i64toi32_i32$2;
                                              $29$hi = i64toi32_i32$1;
                                              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                                              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                                              i64toi32_i32$3 = i64toi32_i32$1;
                                              i64toi32_i32$1 = 65536;
                                              i64toi32_i32$5 = 0;
                                              i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
                                              $529 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
                                              $529$hi = i64toi32_i32$1;
                                              i64toi32_i32$1 = 0;
                                              i64toi32_i32$2 = 16265 - $2_1 | 0;
                                              i64toi32_i32$3 = 0;
                                              i64toi32_i32$5 = 48;
                                              i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
                                              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                                i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
                                                $398 = 0;
                                              } else {
                                                i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
                                                $398 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
                                              }
                                              $533$hi = i64toi32_i32$3;
                                              i64toi32_i32$3 = $529$hi;
                                              i64toi32_i32$1 = $529;
                                              i64toi32_i32$2 = $533$hi;
                                              i64toi32_i32$5 = $398;
                                              i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                                              $507 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                                              $507$hi = i64toi32_i32$2;
                                            }
                                            i64toi32_i32$2 = $507$hi;
                                            $30_1 = $507;
                                            $30$hi = i64toi32_i32$2;
                                            i64toi32_i32$2 = $29$hi;
                                            i64toi32_i32$1 = $17_1;
                                            HEAP32[i64toi32_i32$1 >> 2] = $29_1;
                                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                            $538 = i64toi32_i32$1;
                                            i64toi32_i32$2 = $30$hi;
                                            $539 = $30_1;
                                            $539$hi = i64toi32_i32$2;
                                            i64toi32_i32$2 = 0;
                                            i64toi32_i32$3 = $5_1 & -2147483648 | 0;
                                            i64toi32_i32$1 = 0;
                                            i64toi32_i32$5 = 32;
                                            i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
                                            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                              i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
                                              $399 = 0;
                                            } else {
                                              i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
                                              $399 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
                                            }
                                            $543$hi = i64toi32_i32$1;
                                            i64toi32_i32$1 = $539$hi;
                                            i64toi32_i32$2 = $539;
                                            i64toi32_i32$3 = $543$hi;
                                            i64toi32_i32$5 = $399;
                                            i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                                            $544 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                                            i64toi32_i32$2 = $538;
                                            HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $544;
                                            HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$3;
                                            global$0 = $6_1 + 16 | 0;
                                            i64toi32_i32$1 = $17_1;
                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                                            $29_1 = i64toi32_i32$3;
                                            $29$hi = i64toi32_i32$2;
                                            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                                            $30_1 = i64toi32_i32$2;
                                            $30$hi = i64toi32_i32$3;
                                            break block38;
                                          }
                                          block85: {
                                            block41: {
                                              block39: {
                                                if ($8_1) {
                                                  break block39;
                                                }
                                                $8_1 = 0;
                                                label7: while (1) {
                                                  if ((HEAP8[($8_1 + 1327 | 0) >> 0] | 0 | 0) != ($2_1 | 32 | 0 | 0)) {
                                                    break block39;
                                                  }
                                                  block40: {
                                                    if ($8_1 >>> 0 > 1 >>> 0) {
                                                      break block40;
                                                    }
                                                    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                    if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                                                      break block40;
                                                    }
                                                    $2_1 = $0($3_1 | 0) | 0;
                                                  }
                                                  $8_1 = $8_1 + 1 | 0;
                                                  if (($8_1 | 0) != (3 | 0)) {
                                                    continue label7;
                                                  }
                                                  break label7;
                                                }
                                                break block41;
                                              }
                                              block43: {
                                                switch ($8_1 | 0) {
                                                  case 0:
                                                    block44: {
                                                      if (($2_1 | 0) != (48 | 0)) {
                                                        break block44;
                                                      }
                                                      block45: {
                                                        $9_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                        if (($9_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                          HEAP32[($3_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                                          $591 = HEAPU8[$9_1 >> 0] | 0;
                                                          break block45;
                                                        }
                                                        $591 = $0($3_1 | 0) | 0;
                                                      }
                                                      if (($591 & -33 | 0 | 0) == (88 | 0)) {
                                                        $2_1 = global$0 - 432 | 0;
                                                        global$0 = $2_1;
                                                        block46: {
                                                          $9_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                          if (($9_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                            HEAP32[($3_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                                            $611 = HEAPU8[$9_1 >> 0] | 0;
                                                            break block46;
                                                          }
                                                          $611 = $0($3_1 | 0) | 0;
                                                        }
                                                        $8_1 = $611;
                                                        block47: {
                                                          block49: {
                                                            label8: while (1) {
                                                              if (($8_1 | 0) != (48 | 0)) {
                                                                block48: {
                                                                  if (($8_1 | 0) != (46 | 0)) {
                                                                    break block47;
                                                                  }
                                                                  $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                                  if (($6_1 | 0) == (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                                    break block48;
                                                                  }
                                                                  HEAP32[($3_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                                  $630 = HEAPU8[$6_1 >> 0] | 0;
                                                                  break block49;
                                                                }
                                                              } else {
                                                                $9_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                                if (($9_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                                  $7_1 = 1;
                                                                  HEAP32[($3_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                                                  $648 = HEAPU8[$9_1 >> 0] | 0;
                                                                } else {
                                                                  $7_1 = 1;
                                                                  $648 = $0($3_1 | 0) | 0;
                                                                }
                                                                $8_1 = $648;
                                                                continue label8;
                                                              }
                                                              break label8;
                                                            }
                                                            $630 = $0($3_1 | 0) | 0;
                                                          }
                                                          $8_1 = $630;
                                                          $6_1 = 1;
                                                          if (($8_1 | 0) != (48 | 0)) {
                                                            break block47;
                                                          }
                                                          label9: while (1) {
                                                            i64toi32_i32$3 = $31$hi;
                                                            i64toi32_i32$1 = $31_1;
                                                            i64toi32_i32$2 = 0;
                                                            i64toi32_i32$5 = 1;
                                                            i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                                                            i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                                                            i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                                                            i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
                                                            $31_1 = i64toi32_i32$0;
                                                            $31$hi = i64toi32_i32$4;
                                                            block50: {
                                                              $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                              if (($7_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                                HEAP32[($3_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                                                                $668 = HEAPU8[$7_1 >> 0] | 0;
                                                                break block50;
                                                              }
                                                              $668 = $0($3_1 | 0) | 0;
                                                            }
                                                            $8_1 = $668;
                                                            if (($8_1 | 0) == (48 | 0)) {
                                                              continue label9;
                                                            }
                                                            break label9;
                                                          }
                                                          $7_1 = 1;
                                                        }
                                                        i64toi32_i32$4 = 1073676288;
                                                        $30_1 = 0;
                                                        $30$hi = i64toi32_i32$4;
                                                        label10: while (1) {
                                                          block52: {
                                                            $9_1 = $8_1 | 32 | 0;
                                                            block53: {
                                                              block51: {
                                                                $10_1 = $8_1 - 48 | 0;
                                                                if ($10_1 >>> 0 < 10 >>> 0) {
                                                                  break block51;
                                                                }
                                                                if (($8_1 | 0) != (46 | 0) & ($9_1 - 97 | 0) >>> 0 >= 6 >>> 0 | 0) {
                                                                  break block52;
                                                                }
                                                                if (($8_1 | 0) != (46 | 0)) {
                                                                  break block51;
                                                                }
                                                                if ($6_1) {
                                                                  break block52;
                                                                }
                                                                $6_1 = 1;
                                                                i64toi32_i32$4 = $29$hi;
                                                                $31_1 = $29_1;
                                                                $31$hi = i64toi32_i32$4;
                                                                break block53;
                                                              }
                                                              $7_1 = ($8_1 | 0) > (57 | 0) ? $9_1 - 87 | 0 : $10_1;
                                                              block54: {
                                                                i64toi32_i32$4 = $29$hi;
                                                                i64toi32_i32$3 = $29_1;
                                                                i64toi32_i32$1 = 0;
                                                                i64toi32_i32$5 = 7;
                                                                if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
                                                                  $400 = 1;
                                                                } else {
                                                                  if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                                                                    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0) {
                                                                      $401 = 0;
                                                                    } else {
                                                                      $401 = 1;
                                                                    }
                                                                    $402 = $401;
                                                                  } else {
                                                                    $402 = 0;
                                                                  }
                                                                  $400 = $402;
                                                                }
                                                                if ($400) {
                                                                  $12_1 = $7_1 + ($12_1 << 4 | 0) | 0;
                                                                  break block54;
                                                                }
                                                                i64toi32_i32$3 = $29$hi;
                                                                i64toi32_i32$5 = $29_1;
                                                                i64toi32_i32$4 = 0;
                                                                i64toi32_i32$1 = 28;
                                                                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
                                                                  $10($2_1 + 48 | 0 | 0, $7_1 | 0);
                                                                  i64toi32_i32$5 = $34$hi;
                                                                  i64toi32_i32$5 = $30$hi;
                                                                  i64toi32_i32$5 = $34$hi;
                                                                  i64toi32_i32$3 = $30$hi;
                                                                  i64toi32_i32$1 = 0;
                                                                  i64toi32_i32$4 = 1073414144;
                                                                  $1($2_1 + 32 | 0 | 0, $34_1 | 0, i64toi32_i32$5 | 0, $30_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                                                  i64toi32_i32$3 = $2_1;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
                                                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
                                                                  $714 = i64toi32_i32$4;
                                                                  $714$hi = i64toi32_i32$1;
                                                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 56 | 0) >> 2] | 0;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 60 | 0) >> 2] | 0;
                                                                  $716 = i64toi32_i32$1;
                                                                  $716$hi = i64toi32_i32$4;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
                                                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
                                                                  $34_1 = i64toi32_i32$4;
                                                                  $34$hi = i64toi32_i32$1;
                                                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
                                                                  $30_1 = i64toi32_i32$1;
                                                                  $30$hi = i64toi32_i32$4;
                                                                  i64toi32_i32$4 = $714$hi;
                                                                  i64toi32_i32$1 = $716$hi;
                                                                  i64toi32_i32$3 = $34$hi;
                                                                  i64toi32_i32$5 = $30$hi;
                                                                  $1($2_1 + 16 | 0 | 0, $714 | 0, i64toi32_i32$4 | 0, $716 | 0, i64toi32_i32$1 | 0, $34_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$5 | 0);
                                                                  i64toi32_i32$1 = $2_1;
                                                                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
                                                                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                                                                  $725 = i64toi32_i32$5;
                                                                  $725$hi = i64toi32_i32$3;
                                                                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
                                                                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
                                                                  $727 = i64toi32_i32$3;
                                                                  $727$hi = i64toi32_i32$5;
                                                                  i64toi32_i32$5 = $32$hi;
                                                                  i64toi32_i32$5 = $33$hi;
                                                                  i64toi32_i32$5 = $725$hi;
                                                                  i64toi32_i32$3 = $727$hi;
                                                                  i64toi32_i32$1 = $32$hi;
                                                                  i64toi32_i32$4 = $33$hi;
                                                                  $9($2_1 | 0, $725 | 0, i64toi32_i32$5 | 0, $727 | 0, i64toi32_i32$3 | 0, $32_1 | 0, i64toi32_i32$1 | 0, $33_1 | 0, i64toi32_i32$4 | 0);
                                                                  i64toi32_i32$3 = $2_1;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                                                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                                                                  $33_1 = i64toi32_i32$4;
                                                                  $33$hi = i64toi32_i32$1;
                                                                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                                                                  $32_1 = i64toi32_i32$1;
                                                                  $32$hi = i64toi32_i32$4;
                                                                  break block54;
                                                                }
                                                                if (!$7_1) {
                                                                  break block54;
                                                                }
                                                                if ($4_1) {
                                                                  break block54;
                                                                }
                                                                i64toi32_i32$4 = $34$hi;
                                                                i64toi32_i32$4 = $30$hi;
                                                                i64toi32_i32$4 = $34$hi;
                                                                i64toi32_i32$1 = $30$hi;
                                                                i64toi32_i32$3 = 0;
                                                                i64toi32_i32$5 = 1073610752;
                                                                $1($2_1 + 80 | 0 | 0, $34_1 | 0, i64toi32_i32$4 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
                                                                i64toi32_i32$1 = $2_1;
                                                                i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
                                                                i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
                                                                $744 = i64toi32_i32$5;
                                                                $744$hi = i64toi32_i32$3;
                                                                i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
                                                                i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] | 0;
                                                                $746 = i64toi32_i32$3;
                                                                $746$hi = i64toi32_i32$5;
                                                                i64toi32_i32$5 = $32$hi;
                                                                i64toi32_i32$5 = $33$hi;
                                                                i64toi32_i32$5 = $744$hi;
                                                                i64toi32_i32$3 = $746$hi;
                                                                i64toi32_i32$1 = $32$hi;
                                                                i64toi32_i32$4 = $33$hi;
                                                                $9($2_1 - -64 | 0 | 0, $744 | 0, i64toi32_i32$5 | 0, $746 | 0, i64toi32_i32$3 | 0, $32_1 | 0, i64toi32_i32$1 | 0, $33_1 | 0, i64toi32_i32$4 | 0);
                                                                i64toi32_i32$3 = $2_1;
                                                                i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 72 | 0) >> 2] | 0;
                                                                i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 76 | 0) >> 2] | 0;
                                                                $33_1 = i64toi32_i32$4;
                                                                $33$hi = i64toi32_i32$1;
                                                                $4_1 = 1;
                                                                i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
                                                                i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
                                                                $32_1 = i64toi32_i32$1;
                                                                $32$hi = i64toi32_i32$4;
                                                              }
                                                              i64toi32_i32$4 = $29$hi;
                                                              i64toi32_i32$3 = $29_1;
                                                              i64toi32_i32$1 = 0;
                                                              i64toi32_i32$5 = 1;
                                                              i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                                                              i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                                                              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                                                                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                                                              }
                                                              $29_1 = i64toi32_i32$2;
                                                              $29$hi = i64toi32_i32$0;
                                                              $7_1 = 1;
                                                            }
                                                            $9_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                            if (($9_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                              HEAP32[($3_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                                              $770 = HEAPU8[$9_1 >> 0] | 0;
                                                            } else {
                                                              $770 = $0($3_1 | 0) | 0;
                                                            }
                                                            $8_1 = $770;
                                                            continue label10;
                                                          }
                                                          break label10;
                                                        }
                                                        block55: {
                                                          if (!$7_1) {
                                                            i64toi32_i32$4 = $3_1;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = i64toi32_i32$0;
                                                            i64toi32_i32$0 = 0;
                                                            i64toi32_i32$5 = 0;
                                                            if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
                                                              $403 = 1;
                                                            } else {
                                                              if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
                                                                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                                                                  $404 = 0;
                                                                } else {
                                                                  $404 = 1;
                                                                }
                                                                $405 = $404;
                                                              } else {
                                                                $405 = 0;
                                                              }
                                                              $403 = $405;
                                                            }
                                                            if ($403) {
                                                              HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                                            }
                                                            i64toi32_i32$4 = 0;
                                                            $17($3_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                                            $16($2_1 + 96 | 0 | 0, +(+($5_1 | 0) * 0));
                                                            i64toi32_i32$5 = $2_1;
                                                            i64toi32_i32$4 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
                                                            $32_1 = i64toi32_i32$4;
                                                            $32$hi = i64toi32_i32$3;
                                                            i64toi32_i32$5 = $2_1;
                                                            i64toi32_i32$3 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
                                                            $791 = i64toi32_i32$3;
                                                            $791$hi = i64toi32_i32$4;
                                                            break block55;
                                                          }
                                                          i64toi32_i32$4 = $29$hi;
                                                          i64toi32_i32$5 = $29_1;
                                                          i64toi32_i32$3 = 0;
                                                          i64toi32_i32$0 = 7;
                                                          if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
                                                            $406 = 1;
                                                          } else {
                                                            if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
                                                              if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0) {
                                                                $407 = 0;
                                                              } else {
                                                                $407 = 1;
                                                              }
                                                              $408 = $407;
                                                            } else {
                                                              $408 = 0;
                                                            }
                                                            $406 = $408;
                                                          }
                                                          if ($406) {
                                                            i64toi32_i32$5 = $29$hi;
                                                            $30_1 = $29_1;
                                                            $30$hi = i64toi32_i32$5;
                                                            label11: while (1) {
                                                              $12_1 = $12_1 << 4 | 0;
                                                              i64toi32_i32$5 = $30$hi;
                                                              i64toi32_i32$0 = $30_1;
                                                              i64toi32_i32$4 = 0;
                                                              i64toi32_i32$3 = 1;
                                                              i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                                                              i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                                                              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                                                                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                                                              }
                                                              $30_1 = i64toi32_i32$1;
                                                              $30$hi = i64toi32_i32$2;
                                                              i64toi32_i32$5 = i64toi32_i32$1;
                                                              i64toi32_i32$0 = 0;
                                                              i64toi32_i32$3 = 8;
                                                              if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
                                                                continue label11;
                                                              }
                                                              break label11;
                                                            }
                                                          }
                                                          block56: {
                                                            if (($8_1 & -33 | 0 | 0) == (80 | 0)) {
                                                              i64toi32_i32$5 = $47($3_1 | 0) | 0;
                                                              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                                                              $30_1 = i64toi32_i32$5;
                                                              $30$hi = i64toi32_i32$2;
                                                              i64toi32_i32$3 = i64toi32_i32$5;
                                                              i64toi32_i32$5 = -2147483648;
                                                              i64toi32_i32$0 = 0;
                                                              if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
                                                                break block56;
                                                              }
                                                              i64toi32_i32$3 = 0;
                                                              $32_1 = 0;
                                                              $32$hi = i64toi32_i32$3;
                                                              i64toi32_i32$3 = 0;
                                                              $17($3_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                                              i64toi32_i32$3 = 0;
                                                              $791 = 0;
                                                              $791$hi = i64toi32_i32$3;
                                                              break block55;
                                                            }
                                                            i64toi32_i32$3 = 0;
                                                            $30_1 = 0;
                                                            $30$hi = i64toi32_i32$3;
                                                            i64toi32_i32$0 = $3_1;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = i64toi32_i32$3;
                                                            i64toi32_i32$3 = 0;
                                                            i64toi32_i32$5 = 0;
                                                            if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
                                                              $409 = 1;
                                                            } else {
                                                              if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
                                                                if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
                                                                  $410 = 0;
                                                                } else {
                                                                  $410 = 1;
                                                                }
                                                                $411 = $410;
                                                              } else {
                                                                $411 = 0;
                                                              }
                                                              $409 = $411;
                                                            }
                                                            if ($409) {
                                                              break block56;
                                                            }
                                                            HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                                          }
                                                          if (!$12_1) {
                                                            $16($2_1 + 112 | 0 | 0, +(+($5_1 | 0) * 0));
                                                            i64toi32_i32$5 = $2_1;
                                                            i64toi32_i32$0 = HEAP32[($2_1 + 112 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
                                                            $32_1 = i64toi32_i32$0;
                                                            $32$hi = i64toi32_i32$2;
                                                            i64toi32_i32$5 = $2_1;
                                                            i64toi32_i32$2 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
                                                            $791 = i64toi32_i32$2;
                                                            $791$hi = i64toi32_i32$0;
                                                            break block55;
                                                          }
                                                          i64toi32_i32$0 = $31$hi;
                                                          i64toi32_i32$0 = $29$hi;
                                                          i64toi32_i32$4 = $6_1;
                                                          i64toi32_i32$0 = $31$hi;
                                                          i64toi32_i32$2 = $29$hi;
                                                          i64toi32_i32$3 = i64toi32_i32$4 ? $31_1 : $29_1;
                                                          i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
                                                          i64toi32_i32$4 = i64toi32_i32$3;
                                                          i64toi32_i32$3 = 0;
                                                          i64toi32_i32$2 = 2;
                                                          i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                                                          if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                                                            i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
                                                            $412 = 0;
                                                          } else {
                                                            i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
                                                            $412 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
                                                          }
                                                          $831$hi = i64toi32_i32$3;
                                                          i64toi32_i32$3 = $30$hi;
                                                          i64toi32_i32$3 = $831$hi;
                                                          i64toi32_i32$5 = $412;
                                                          i64toi32_i32$4 = $30$hi;
                                                          i64toi32_i32$2 = $30_1;
                                                          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                                                          i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
                                                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                                                            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                                                          }
                                                          i64toi32_i32$3 = i64toi32_i32$0;
                                                          i64toi32_i32$5 = 0;
                                                          i64toi32_i32$2 = 32;
                                                          i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
                                                          i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
                                                          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                                          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
                                                          $29_1 = i64toi32_i32$4;
                                                          $29$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = 0;
                                                          $838$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = $29$hi;
                                                          i64toi32_i32$1 = i64toi32_i32$4;
                                                          i64toi32_i32$3 = $838$hi;
                                                          i64toi32_i32$2 = 0 - $22_1 | 0;
                                                          if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
                                                            $413 = 1;
                                                          } else {
                                                            if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
                                                              if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
                                                                $414 = 0;
                                                              } else {
                                                                $414 = 1;
                                                              }
                                                              $415 = $414;
                                                            } else {
                                                              $415 = 0;
                                                            }
                                                            $413 = $415;
                                                          }
                                                          if ($413) {
                                                            HEAP32[5060 >> 2] = 68;
                                                            $10($2_1 + 160 | 0 | 0, $5_1 | 0);
                                                            i64toi32_i32$2 = $2_1;
                                                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
                                                            $846 = i64toi32_i32$1;
                                                            $846$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
                                                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
                                                            $848 = i64toi32_i32$0;
                                                            $848$hi = i64toi32_i32$1;
                                                            i64toi32_i32$1 = $846$hi;
                                                            i64toi32_i32$0 = $848$hi;
                                                            i64toi32_i32$2 = -1;
                                                            i64toi32_i32$3 = 2147418111;
                                                            $1($2_1 + 144 | 0 | 0, $846 | 0, i64toi32_i32$1 | 0, $848 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$2 | 0, -1 | 0, i64toi32_i32$3 | 0);
                                                            i64toi32_i32$0 = $2_1;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
                                                            $852 = i64toi32_i32$3;
                                                            $852$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] | 0;
                                                            $854 = i64toi32_i32$2;
                                                            $854$hi = i64toi32_i32$3;
                                                            i64toi32_i32$3 = $852$hi;
                                                            i64toi32_i32$2 = $854$hi;
                                                            i64toi32_i32$0 = -1;
                                                            i64toi32_i32$1 = 2147418111;
                                                            $1($2_1 + 128 | 0 | 0, $852 | 0, i64toi32_i32$3 | 0, $854 | 0, i64toi32_i32$2 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
                                                            i64toi32_i32$2 = $2_1;
                                                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
                                                            $32_1 = i64toi32_i32$1;
                                                            $32$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 136 | 0) >> 2] | 0;
                                                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 140 | 0) >> 2] | 0;
                                                            $791 = i64toi32_i32$0;
                                                            $791$hi = i64toi32_i32$1;
                                                            break block55;
                                                          }
                                                          i64toi32_i32$0 = $22_1 - 226 | 0;
                                                          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                                                          $861$hi = i64toi32_i32$1;
                                                          i64toi32_i32$1 = $29$hi;
                                                          i64toi32_i32$1 = $861$hi;
                                                          i64toi32_i32$2 = i64toi32_i32$0;
                                                          i64toi32_i32$0 = $29$hi;
                                                          i64toi32_i32$3 = $29_1;
                                                          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                                                            $416 = 1;
                                                          } else {
                                                            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                                                              if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
                                                                $417 = 0;
                                                              } else {
                                                                $417 = 1;
                                                              }
                                                              $418 = $417;
                                                            } else {
                                                              $418 = 0;
                                                            }
                                                            $416 = $418;
                                                          }
                                                          if ($416) {
                                                            if (($12_1 | 0) >= (0 | 0)) {
                                                              label12: while (1) {
                                                                i64toi32_i32$2 = $32$hi;
                                                                i64toi32_i32$2 = $33$hi;
                                                                i64toi32_i32$2 = $32$hi;
                                                                i64toi32_i32$1 = $33$hi;
                                                                i64toi32_i32$3 = 0;
                                                                i64toi32_i32$0 = -1073807360;
                                                                $9($2_1 + 416 | 0 | 0, $32_1 | 0, i64toi32_i32$2 | 0, $33_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
                                                                i64toi32_i32$0 = i64toi32_i32$2;
                                                                i64toi32_i32$0 = i64toi32_i32$1;
                                                                i64toi32_i32$0 = i64toi32_i32$2;
                                                                i64toi32_i32$3 = i64toi32_i32$1;
                                                                i64toi32_i32$1 = 1073610752;
                                                                $6_1 = $41($32_1 | 0, i64toi32_i32$2 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
                                                                i64toi32_i32$1 = i64toi32_i32$2;
                                                                i64toi32_i32$1 = i64toi32_i32$3;
                                                                i64toi32_i32$1 = i64toi32_i32$2;
                                                                i64toi32_i32$0 = $2_1;
                                                                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] | 0;
                                                                i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] | 0;
                                                                $879 = i64toi32_i32$1;
                                                                $879$hi = i64toi32_i32$3;
                                                                $7_1 = ($6_1 | 0) < (0 | 0);
                                                                i64toi32_i32$5 = $7_1;
                                                                i64toi32_i32$3 = i64toi32_i32$2;
                                                                i64toi32_i32$1 = $879$hi;
                                                                i64toi32_i32$2 = i64toi32_i32$5 ? $32_1 : $879;
                                                                i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
                                                                $883 = i64toi32_i32$2;
                                                                $883$hi = i64toi32_i32$0;
                                                                i64toi32_i32$0 = $33$hi;
                                                                i64toi32_i32$5 = $2_1;
                                                                i64toi32_i32$0 = HEAP32[($2_1 + 424 | 0) >> 2] | 0;
                                                                i64toi32_i32$2 = HEAP32[($2_1 + 428 | 0) >> 2] | 0;
                                                                $886 = i64toi32_i32$0;
                                                                $886$hi = i64toi32_i32$2;
                                                                i64toi32_i32$3 = $7_1;
                                                                i64toi32_i32$2 = $33$hi;
                                                                i64toi32_i32$0 = $886$hi;
                                                                i64toi32_i32$1 = i64toi32_i32$3 ? $33_1 : $886;
                                                                i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
                                                                $888 = i64toi32_i32$1;
                                                                $888$hi = i64toi32_i32$5;
                                                                i64toi32_i32$5 = $32$hi;
                                                                i64toi32_i32$1 = i64toi32_i32$2;
                                                                i64toi32_i32$3 = $883$hi;
                                                                i64toi32_i32$0 = $888$hi;
                                                                $9($2_1 + 400 | 0 | 0, $32_1 | 0, i64toi32_i32$5 | 0, $33_1 | 0, i64toi32_i32$2 | 0, $883 | 0, i64toi32_i32$3 | 0, $888 | 0, i64toi32_i32$0 | 0);
                                                                i64toi32_i32$0 = $29$hi;
                                                                i64toi32_i32$1 = $29_1;
                                                                i64toi32_i32$3 = 0;
                                                                i64toi32_i32$5 = 1;
                                                                i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                                                                i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                                                                i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                                                                i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
                                                                $29_1 = i64toi32_i32$2;
                                                                $29$hi = i64toi32_i32$4;
                                                                i64toi32_i32$0 = $2_1;
                                                                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 408 | 0) >> 2] | 0;
                                                                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 412 | 0) >> 2] | 0;
                                                                $33_1 = i64toi32_i32$4;
                                                                $33$hi = i64toi32_i32$1;
                                                                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 400 | 0) >> 2] | 0;
                                                                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 404 | 0) >> 2] | 0;
                                                                $32_1 = i64toi32_i32$1;
                                                                $32$hi = i64toi32_i32$4;
                                                                $12_1 = $12_1 << 1 | 0 | ($6_1 | 0) >= (0 | 0) | 0;
                                                                if (($12_1 | 0) >= (0 | 0)) {
                                                                  continue label12;
                                                                }
                                                                break label12;
                                                              }
                                                            }
                                                            block57: {
                                                              i64toi32_i32$4 = $29$hi;
                                                              i64toi32_i32$1 = $22_1;
                                                              i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                                                              $904$hi = i64toi32_i32$4;
                                                              i64toi32_i32$4 = $29$hi;
                                                              i64toi32_i32$0 = $29_1;
                                                              i64toi32_i32$1 = $904$hi;
                                                              i64toi32_i32$5 = $22_1;
                                                              i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
                                                              i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
                                                              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                                                              i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
                                                              i64toi32_i32$4 = i64toi32_i32$3;
                                                              i64toi32_i32$0 = 0;
                                                              i64toi32_i32$5 = 32;
                                                              i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                                                              i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                                                              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                                                                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                                                              }
                                                              $30_1 = i64toi32_i32$1;
                                                              $30$hi = i64toi32_i32$3;
                                                              $6_1 = i64toi32_i32$1;
                                                              $912 = (i64toi32_i32$1 | 0) > (0 | 0) ? i64toi32_i32$1 : 0;
                                                              $913 = $20_1;
                                                              i64toi32_i32$3 = 0;
                                                              $916$hi = i64toi32_i32$3;
                                                              i64toi32_i32$3 = $30$hi;
                                                              i64toi32_i32$2 = i64toi32_i32$1;
                                                              i64toi32_i32$4 = $916$hi;
                                                              i64toi32_i32$5 = $20_1;
                                                              if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
                                                                $419 = 1;
                                                              } else {
                                                                if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
                                                                  if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0) {
                                                                    $420 = 0;
                                                                  } else {
                                                                    $420 = 1;
                                                                  }
                                                                  $421 = $420;
                                                                } else {
                                                                  $421 = 0;
                                                                }
                                                                $419 = $421;
                                                              }
                                                              $6_1 = $419 ? $912 : $913;
                                                              if (($6_1 | 0) >= (113 | 0)) {
                                                                $10($2_1 + 384 | 0 | 0, $5_1 | 0);
                                                                i64toi32_i32$5 = $2_1;
                                                                i64toi32_i32$2 = HEAP32[($2_1 + 392 | 0) >> 2] | 0;
                                                                i64toi32_i32$3 = HEAP32[($2_1 + 396 | 0) >> 2] | 0;
                                                                $31_1 = i64toi32_i32$2;
                                                                $31$hi = i64toi32_i32$3;
                                                                i64toi32_i32$5 = $2_1;
                                                                i64toi32_i32$3 = HEAP32[($2_1 + 384 | 0) >> 2] | 0;
                                                                i64toi32_i32$2 = HEAP32[($2_1 + 388 | 0) >> 2] | 0;
                                                                $34_1 = i64toi32_i32$3;
                                                                $34$hi = i64toi32_i32$2;
                                                                i64toi32_i32$2 = 0;
                                                                $928 = 0;
                                                                $928$hi = i64toi32_i32$2;
                                                                break block57;
                                                              }
                                                              $16($2_1 + 352 | 0 | 0, + +$35(144 - $6_1 | 0 | 0));
                                                              $10($2_1 + 336 | 0 | 0, $5_1 | 0);
                                                              i64toi32_i32$5 = $2_1;
                                                              i64toi32_i32$2 = HEAP32[($2_1 + 352 | 0) >> 2] | 0;
                                                              i64toi32_i32$3 = HEAP32[($2_1 + 356 | 0) >> 2] | 0;
                                                              $940 = i64toi32_i32$2;
                                                              $940$hi = i64toi32_i32$3;
                                                              i64toi32_i32$5 = $2_1;
                                                              i64toi32_i32$3 = HEAP32[($2_1 + 360 | 0) >> 2] | 0;
                                                              i64toi32_i32$2 = HEAP32[($2_1 + 364 | 0) >> 2] | 0;
                                                              $942 = i64toi32_i32$3;
                                                              $942$hi = i64toi32_i32$2;
                                                              i64toi32_i32$5 = $2_1;
                                                              i64toi32_i32$2 = HEAP32[($2_1 + 336 | 0) >> 2] | 0;
                                                              i64toi32_i32$3 = HEAP32[($2_1 + 340 | 0) >> 2] | 0;
                                                              $34_1 = i64toi32_i32$2;
                                                              $34$hi = i64toi32_i32$3;
                                                              i64toi32_i32$5 = $2_1;
                                                              i64toi32_i32$3 = HEAP32[($2_1 + 344 | 0) >> 2] | 0;
                                                              i64toi32_i32$2 = HEAP32[($2_1 + 348 | 0) >> 2] | 0;
                                                              $31_1 = i64toi32_i32$3;
                                                              $31$hi = i64toi32_i32$2;
                                                              i64toi32_i32$2 = $940$hi;
                                                              i64toi32_i32$3 = $942$hi;
                                                              i64toi32_i32$5 = $34$hi;
                                                              i64toi32_i32$4 = $31$hi;
                                                              $50($2_1 + 368 | 0 | 0, $940 | 0, i64toi32_i32$2 | 0, $942 | 0, i64toi32_i32$3 | 0, $34_1 | 0, i64toi32_i32$5 | 0, $31_1 | 0, i64toi32_i32$4 | 0);
                                                              i64toi32_i32$3 = $2_1;
                                                              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 376 | 0) >> 2] | 0;
                                                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 380 | 0) >> 2] | 0;
                                                              $36_1 = i64toi32_i32$4;
                                                              $36$hi = i64toi32_i32$5;
                                                              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 368 | 0) >> 2] | 0;
                                                              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 372 | 0) >> 2] | 0;
                                                              $928 = i64toi32_i32$5;
                                                              $928$hi = i64toi32_i32$4;
                                                            }
                                                            i64toi32_i32$4 = $928$hi;
                                                            $30_1 = $928;
                                                            $30$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = $32$hi;
                                                            i64toi32_i32$4 = $33$hi;
                                                            i64toi32_i32$4 = $32$hi;
                                                            i64toi32_i32$5 = $33$hi;
                                                            i64toi32_i32$3 = 0;
                                                            i64toi32_i32$2 = 0;
                                                            $5_1 = !($12_1 & 1 | 0) & (($21($32_1 | 0, i64toi32_i32$4 | 0, $33_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0 | 0) != (0 | 0) & ($6_1 | 0) < (32 | 0) | 0) | 0;
                                                            $22($2_1 + 320 | 0 | 0, $12_1 + $5_1 | 0 | 0);
                                                            i64toi32_i32$2 = $34$hi;
                                                            i64toi32_i32$2 = $31$hi;
                                                            i64toi32_i32$5 = $2_1;
                                                            i64toi32_i32$2 = HEAP32[($2_1 + 320 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[($2_1 + 324 | 0) >> 2] | 0;
                                                            $975 = i64toi32_i32$2;
                                                            $975$hi = i64toi32_i32$3;
                                                            i64toi32_i32$5 = $2_1;
                                                            i64toi32_i32$3 = HEAP32[($2_1 + 328 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[($2_1 + 332 | 0) >> 2] | 0;
                                                            $977 = i64toi32_i32$3;
                                                            $977$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = $34$hi;
                                                            i64toi32_i32$3 = $31$hi;
                                                            i64toi32_i32$5 = $975$hi;
                                                            i64toi32_i32$4 = $977$hi;
                                                            $1($2_1 + 304 | 0 | 0, $34_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$3 | 0, $975 | 0, i64toi32_i32$5 | 0, $977 | 0, i64toi32_i32$4 | 0);
                                                            i64toi32_i32$3 = $2_1;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
                                                            i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
                                                            $981 = i64toi32_i32$4;
                                                            $981$hi = i64toi32_i32$5;
                                                            i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 312 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 316 | 0) >> 2] | 0;
                                                            $983 = i64toi32_i32$5;
                                                            $983$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = $30$hi;
                                                            i64toi32_i32$4 = $36$hi;
                                                            i64toi32_i32$4 = $981$hi;
                                                            i64toi32_i32$5 = $983$hi;
                                                            i64toi32_i32$3 = $30$hi;
                                                            i64toi32_i32$2 = $36$hi;
                                                            $9($2_1 + 272 | 0 | 0, $981 | 0, i64toi32_i32$4 | 0, $983 | 0, i64toi32_i32$5 | 0, $30_1 | 0, i64toi32_i32$3 | 0, $36_1 | 0, i64toi32_i32$2 | 0);
                                                            i64toi32_i32$2 = $34$hi;
                                                            i64toi32_i32$2 = $31$hi;
                                                            i64toi32_i32$2 = $32$hi;
                                                            i64toi32_i32$0 = $5_1;
                                                            i64toi32_i32$2 = 0;
                                                            i64toi32_i32$3 = $32$hi;
                                                            i64toi32_i32$4 = i64toi32_i32$0 ? 0 : $32_1;
                                                            i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
                                                            $992 = i64toi32_i32$4;
                                                            $992$hi = i64toi32_i32$5;
                                                            i64toi32_i32$5 = $33$hi;
                                                            i64toi32_i32$2 = i64toi32_i32$0;
                                                            i64toi32_i32$5 = 0;
                                                            i64toi32_i32$4 = $33$hi;
                                                            i64toi32_i32$3 = i64toi32_i32$2 ? 0 : $33_1;
                                                            i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
                                                            $995 = i64toi32_i32$3;
                                                            $995$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = $34$hi;
                                                            i64toi32_i32$3 = $31$hi;
                                                            i64toi32_i32$2 = $992$hi;
                                                            i64toi32_i32$4 = $995$hi;
                                                            $1($2_1 + 288 | 0 | 0, $34_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, i64toi32_i32$3 | 0, $992 | 0, i64toi32_i32$2 | 0, $995 | 0, i64toi32_i32$4 | 0);
                                                            i64toi32_i32$3 = $2_1;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 288 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 292 | 0) >> 2] | 0;
                                                            $999 = i64toi32_i32$4;
                                                            $999$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 296 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 300 | 0) >> 2] | 0;
                                                            $1001 = i64toi32_i32$2;
                                                            $1001$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 272 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 276 | 0) >> 2] | 0;
                                                            $1003 = i64toi32_i32$4;
                                                            $1003$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 280 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 284 | 0) >> 2] | 0;
                                                            $1005 = i64toi32_i32$2;
                                                            $1005$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = $999$hi;
                                                            i64toi32_i32$2 = $1001$hi;
                                                            i64toi32_i32$3 = $1003$hi;
                                                            i64toi32_i32$0 = $1005$hi;
                                                            $9($2_1 + 256 | 0 | 0, $999 | 0, i64toi32_i32$4 | 0, $1001 | 0, i64toi32_i32$2 | 0, $1003 | 0, i64toi32_i32$3 | 0, $1005 | 0, i64toi32_i32$0 | 0);
                                                            i64toi32_i32$2 = $2_1;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 256 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 260 | 0) >> 2] | 0;
                                                            $1009 = i64toi32_i32$0;
                                                            $1009$hi = i64toi32_i32$3;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 264 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 268 | 0) >> 2] | 0;
                                                            $1011 = i64toi32_i32$3;
                                                            $1011$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = $30$hi;
                                                            i64toi32_i32$0 = $36$hi;
                                                            i64toi32_i32$0 = $1009$hi;
                                                            i64toi32_i32$3 = $1011$hi;
                                                            i64toi32_i32$2 = $30$hi;
                                                            i64toi32_i32$4 = $36$hi;
                                                            $33($2_1 + 240 | 0 | 0, $1009 | 0, i64toi32_i32$0 | 0, $1011 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$2 | 0, $36_1 | 0, i64toi32_i32$4 | 0);
                                                            i64toi32_i32$3 = $2_1;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 240 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 244 | 0) >> 2] | 0;
                                                            $30_1 = i64toi32_i32$4;
                                                            $30$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 248 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 252 | 0) >> 2] | 0;
                                                            $31_1 = i64toi32_i32$2;
                                                            $31$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = $30$hi;
                                                            i64toi32_i32$2 = $31$hi;
                                                            i64toi32_i32$3 = 0;
                                                            i64toi32_i32$0 = 0;
                                                            if (!($21($30_1 | 0, i64toi32_i32$4 | 0, $31_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0)) {
                                                              HEAP32[5060 >> 2] = 68;
                                                            }
                                                            i64toi32_i32$0 = $30$hi;
                                                            i64toi32_i32$0 = $31$hi;
                                                            i64toi32_i32$0 = $29$hi;
                                                            i64toi32_i32$0 = $30$hi;
                                                            i64toi32_i32$3 = $31$hi;
                                                            $49($2_1 + 224 | 0 | 0, $30_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, i64toi32_i32$3 | 0, $29_1 | 0);
                                                            i64toi32_i32$2 = $2_1;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 224 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 228 | 0) >> 2] | 0;
                                                            $32_1 = i64toi32_i32$3;
                                                            $32$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 232 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 236 | 0) >> 2] | 0;
                                                            $791 = i64toi32_i32$0;
                                                            $791$hi = i64toi32_i32$3;
                                                            break block55;
                                                          }
                                                          HEAP32[5060 >> 2] = 68;
                                                          $10($2_1 + 208 | 0 | 0, $5_1 | 0);
                                                          i64toi32_i32$2 = $2_1;
                                                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 208 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 212 | 0) >> 2] | 0;
                                                          $1038 = i64toi32_i32$3;
                                                          $1038$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 216 | 0) >> 2] | 0;
                                                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 220 | 0) >> 2] | 0;
                                                          $1040 = i64toi32_i32$0;
                                                          $1040$hi = i64toi32_i32$3;
                                                          i64toi32_i32$3 = $1038$hi;
                                                          i64toi32_i32$0 = $1040$hi;
                                                          i64toi32_i32$2 = 0;
                                                          i64toi32_i32$4 = 65536;
                                                          $1($2_1 + 192 | 0 | 0, $1038 | 0, i64toi32_i32$3 | 0, $1040 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                                          i64toi32_i32$0 = $2_1;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] | 0;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 196 | 0) >> 2] | 0;
                                                          $1044 = i64toi32_i32$4;
                                                          $1044$hi = i64toi32_i32$2;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 200 | 0) >> 2] | 0;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 204 | 0) >> 2] | 0;
                                                          $1046 = i64toi32_i32$2;
                                                          $1046$hi = i64toi32_i32$4;
                                                          i64toi32_i32$4 = $1044$hi;
                                                          i64toi32_i32$2 = $1046$hi;
                                                          i64toi32_i32$0 = 0;
                                                          i64toi32_i32$3 = 65536;
                                                          $1($2_1 + 176 | 0 | 0, $1044 | 0, i64toi32_i32$4 | 0, $1046 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                                          i64toi32_i32$2 = $2_1;
                                                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
                                                          $32_1 = i64toi32_i32$3;
                                                          $32$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
                                                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
                                                          $791 = i64toi32_i32$0;
                                                          $791$hi = i64toi32_i32$3;
                                                        }
                                                        i64toi32_i32$3 = $791$hi;
                                                        $29_1 = $791;
                                                        $29$hi = i64toi32_i32$3;
                                                        i64toi32_i32$3 = $32$hi;
                                                        i64toi32_i32$0 = $17_1;
                                                        HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $32_1;
                                                        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$3;
                                                        i64toi32_i32$3 = $29$hi;
                                                        HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $29_1;
                                                        HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$3;
                                                        global$0 = $2_1 + 432 | 0;
                                                        i64toi32_i32$2 = i64toi32_i32$0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
                                                        $29_1 = i64toi32_i32$3;
                                                        $29$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$0;
                                                        $30$hi = i64toi32_i32$3;
                                                        break block38;
                                                      }
                                                      i64toi32_i32$2 = $3_1;
                                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
                                                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
                                                      i64toi32_i32$2 = i64toi32_i32$3;
                                                      i64toi32_i32$3 = 0;
                                                      i64toi32_i32$4 = 0;
                                                      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
                                                        $422 = 1;
                                                      } else {
                                                        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
                                                          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                                                            $423 = 0;
                                                          } else {
                                                            $423 = 1;
                                                          }
                                                          $424 = $423;
                                                        } else {
                                                          $424 = 0;
                                                        }
                                                        $422 = $424;
                                                      }
                                                      if ($422) {
                                                        break block44;
                                                      }
                                                      HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                                    }
                                                    $9_1 = $5_1;
                                                    $5_1 = 0;
                                                    $4_1 = global$0 - 8976 | 0;
                                                    global$0 = $4_1;
                                                    $8_1 = 0 - $22_1 | 0;
                                                    $28_1 = $8_1 - $20_1 | 0;
                                                    block58: {
                                                      block60: {
                                                        label13: while (1) {
                                                          if (($2_1 | 0) != (48 | 0)) {
                                                            block59: {
                                                              if (($2_1 | 0) != (46 | 0)) {
                                                                break block58;
                                                              }
                                                              $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                              if (($2_1 | 0) == (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                                break block59;
                                                              }
                                                              HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                              $1093 = HEAPU8[$2_1 >> 0] | 0;
                                                              break block60;
                                                            }
                                                          } else {
                                                            $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                            if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                              $5_1 = 1;
                                                              HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                              $1111 = HEAPU8[$2_1 >> 0] | 0;
                                                            } else {
                                                              $5_1 = 1;
                                                              $1111 = $0($3_1 | 0) | 0;
                                                            }
                                                            $2_1 = $1111;
                                                            continue label13;
                                                          }
                                                          break label13;
                                                        }
                                                        $1093 = $0($3_1 | 0) | 0;
                                                      }
                                                      $2_1 = $1093;
                                                      $10_1 = 1;
                                                      if (($2_1 | 0) != (48 | 0)) {
                                                        break block58;
                                                      }
                                                      label14: while (1) {
                                                        i64toi32_i32$2 = $29$hi;
                                                        i64toi32_i32$4 = $29_1;
                                                        i64toi32_i32$0 = 0;
                                                        i64toi32_i32$3 = 1;
                                                        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
                                                        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
                                                        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                                                        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                                                        $29_1 = i64toi32_i32$5;
                                                        $29$hi = i64toi32_i32$1;
                                                        block61: {
                                                          $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                          if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                            HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                            $1131 = HEAPU8[$2_1 >> 0] | 0;
                                                            break block61;
                                                          }
                                                          $1131 = $0($3_1 | 0) | 0;
                                                        }
                                                        $2_1 = $1131;
                                                        if (($2_1 | 0) == (48 | 0)) {
                                                          continue label14;
                                                        }
                                                        break label14;
                                                      }
                                                      $5_1 = 1;
                                                    }
                                                    HEAP32[($4_1 + 784 | 0) >> 2] = 0;
                                                    $13_1 = $2_1 - 48 | 0;
                                                    $1140 = $17_1;
                                                    block72: {
                                                      block70: {
                                                        block68: {
                                                          block69: {
                                                            block71: {
                                                              block65: {
                                                                block63: {
                                                                  block62: {
                                                                    $6_1 = ($2_1 | 0) == (46 | 0);
                                                                    if ($6_1) {
                                                                      break block62;
                                                                    }
                                                                    if ($13_1 >>> 0 <= 9 >>> 0) {
                                                                      break block62;
                                                                    }
                                                                    break block63;
                                                                  }
                                                                  label15: while (1) {
                                                                    block64: {
                                                                      if ($6_1 & 1 | 0) {
                                                                        if (!$10_1) {
                                                                          i64toi32_i32$1 = $30$hi;
                                                                          $29_1 = $30_1;
                                                                          $29$hi = i64toi32_i32$1;
                                                                          $10_1 = 1;
                                                                          break block64;
                                                                        }
                                                                        $6_1 = !$5_1;
                                                                        break block65;
                                                                      }
                                                                      i64toi32_i32$1 = $30$hi;
                                                                      i64toi32_i32$2 = $30_1;
                                                                      i64toi32_i32$4 = 0;
                                                                      i64toi32_i32$3 = 1;
                                                                      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                                                                      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                                                                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                                                                        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                                                                      }
                                                                      $30_1 = i64toi32_i32$0;
                                                                      $30$hi = i64toi32_i32$5;
                                                                      if (($7_1 | 0) <= (2044 | 0)) {
                                                                        $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : i64toi32_i32$0;
                                                                        $5_1 = ($4_1 + 784 | 0) + ($7_1 << 2 | 0) | 0;
                                                                        $1168 = $5_1;
                                                                        if ($14_1) {
                                                                          $1177 = ($2_1 + Math_imul(HEAP32[$5_1 >> 2] | 0, 10) | 0) - 48 | 0;
                                                                        } else {
                                                                          $1177 = $13_1;
                                                                        }
                                                                        HEAP32[$1168 >> 2] = $1177;
                                                                        $5_1 = 1;
                                                                        $2_1 = $14_1 + 1 | 0;
                                                                        $1181 = $2_1;
                                                                        $2_1 = ($2_1 | 0) == (9 | 0);
                                                                        $14_1 = $2_1 ? 0 : $1181;
                                                                        $7_1 = $2_1 + $7_1 | 0;
                                                                        break block64;
                                                                      }
                                                                      if (($2_1 | 0) == (48 | 0)) {
                                                                        break block64;
                                                                      }
                                                                      HEAP32[($4_1 + 8960 | 0) >> 2] = HEAP32[($4_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
                                                                      $12_1 = 18396;
                                                                    }
                                                                    block66: {
                                                                      $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                                      if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                                        HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                                        $1206 = HEAPU8[$2_1 >> 0] | 0;
                                                                        break block66;
                                                                      }
                                                                      $1206 = $0($3_1 | 0) | 0;
                                                                    }
                                                                    $2_1 = $1206;
                                                                    $13_1 = $2_1 - 48 | 0;
                                                                    $6_1 = ($2_1 | 0) == (46 | 0);
                                                                    if ($6_1) {
                                                                      continue label15;
                                                                    }
                                                                    if ($13_1 >>> 0 < 10 >>> 0) {
                                                                      continue label15;
                                                                    }
                                                                    break label15;
                                                                  }
                                                                }
                                                                i64toi32_i32$5 = $29$hi;
                                                                i64toi32_i32$5 = $30$hi;
                                                                i64toi32_i32$4 = $10_1;
                                                                i64toi32_i32$5 = $29$hi;
                                                                i64toi32_i32$2 = $30$hi;
                                                                i64toi32_i32$3 = i64toi32_i32$4 ? $29_1 : $30_1;
                                                                i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$2;
                                                                $29_1 = i64toi32_i32$3;
                                                                $29$hi = i64toi32_i32$1;
                                                                block67: {
                                                                  if (!$5_1) {
                                                                    break block67;
                                                                  }
                                                                  if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
                                                                    break block67;
                                                                  }
                                                                  i64toi32_i32$1 = $47($3_1 | 0) | 0;
                                                                  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                                                  $32_1 = i64toi32_i32$1;
                                                                  $32$hi = i64toi32_i32$3;
                                                                  i64toi32_i32$4 = i64toi32_i32$1;
                                                                  i64toi32_i32$1 = -2147483648;
                                                                  i64toi32_i32$2 = 0;
                                                                  if ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0) {
                                                                    break block68;
                                                                  }
                                                                  if (!$5_1) {
                                                                    break block69;
                                                                  }
                                                                  i64toi32_i32$4 = $29$hi;
                                                                  i64toi32_i32$4 = i64toi32_i32$3;
                                                                  i64toi32_i32$4 = $29$hi;
                                                                  i64toi32_i32$2 = $29_1;
                                                                  i64toi32_i32$1 = $32_1;
                                                                  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                                                                  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                                                                  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                                                                    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                                                                  }
                                                                  $29_1 = i64toi32_i32$5;
                                                                  $29$hi = i64toi32_i32$0;
                                                                  break block70;
                                                                }
                                                                $6_1 = !$5_1;
                                                                if (($2_1 | 0) < (0 | 0)) {
                                                                  break block71;
                                                                }
                                                              }
                                                              i64toi32_i32$4 = $3_1;
                                                              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                                                              i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                                                              i64toi32_i32$4 = i64toi32_i32$0;
                                                              i64toi32_i32$0 = 0;
                                                              i64toi32_i32$1 = 0;
                                                              if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
                                                                $425 = 1;
                                                              } else {
                                                                if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
                                                                  if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
                                                                    $426 = 0;
                                                                  } else {
                                                                    $426 = 1;
                                                                  }
                                                                  $428 = $426;
                                                                } else {
                                                                  $428 = 0;
                                                                }
                                                                $425 = $428;
                                                              }
                                                              if ($425) {
                                                                break block71;
                                                              }
                                                              HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                                            }
                                                            if (!$6_1) {
                                                              break block70;
                                                            }
                                                          }
                                                          HEAP32[5060 >> 2] = 28;
                                                        }
                                                        i64toi32_i32$4 = 0;
                                                        $30_1 = 0;
                                                        $30$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = 0;
                                                        $17($3_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                                        i64toi32_i32$4 = 0;
                                                        $1249 = 0;
                                                        $1249$hi = i64toi32_i32$4;
                                                        break block72;
                                                      }
                                                      $2_1 = HEAP32[($4_1 + 784 | 0) >> 2] | 0;
                                                      if (!$2_1) {
                                                        $16($4_1 | 0, +(+($9_1 | 0) * 0));
                                                        i64toi32_i32$1 = $4_1;
                                                        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$4;
                                                        $30$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                                                        $1249 = i64toi32_i32$2;
                                                        $1249$hi = i64toi32_i32$4;
                                                        break block72;
                                                      }
                                                      block73: {
                                                        i64toi32_i32$4 = $30$hi;
                                                        i64toi32_i32$1 = $30_1;
                                                        i64toi32_i32$2 = 0;
                                                        i64toi32_i32$0 = 9;
                                                        if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
                                                          $429 = 1;
                                                        } else {
                                                          if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
                                                            if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$0 >>> 0) {
                                                              $430 = 0;
                                                            } else {
                                                              $430 = 1;
                                                            }
                                                            $431 = $430;
                                                          } else {
                                                            $431 = 0;
                                                          }
                                                          $429 = $431;
                                                        }
                                                        if ($429) {
                                                          break block73;
                                                        }
                                                        i64toi32_i32$1 = $29$hi;
                                                        i64toi32_i32$1 = $30$hi;
                                                        i64toi32_i32$1 = $29$hi;
                                                        i64toi32_i32$0 = $29_1;
                                                        i64toi32_i32$4 = $30$hi;
                                                        i64toi32_i32$2 = $30_1;
                                                        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
                                                          break block73;
                                                        }
                                                        if ($2_1 >>> $20_1 | 0 ? ($20_1 | 0) <= (30 | 0) : 0) {
                                                          break block73;
                                                        }
                                                        $10($4_1 + 48 | 0 | 0, $9_1 | 0);
                                                        $22($4_1 + 32 | 0 | 0, $2_1 | 0);
                                                        i64toi32_i32$2 = $4_1;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
                                                        $1282 = i64toi32_i32$0;
                                                        $1282$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
                                                        $1284 = i64toi32_i32$1;
                                                        $1284$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
                                                        $1286 = i64toi32_i32$0;
                                                        $1286$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
                                                        $1288 = i64toi32_i32$1;
                                                        $1288$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = $1282$hi;
                                                        i64toi32_i32$1 = $1284$hi;
                                                        i64toi32_i32$2 = $1286$hi;
                                                        i64toi32_i32$4 = $1288$hi;
                                                        $1($4_1 + 16 | 0 | 0, $1282 | 0, i64toi32_i32$0 | 0, $1284 | 0, i64toi32_i32$1 | 0, $1286 | 0, i64toi32_i32$2 | 0, $1288 | 0, i64toi32_i32$4 | 0);
                                                        i64toi32_i32$1 = $4_1;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$4;
                                                        $30$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
                                                        $1249 = i64toi32_i32$2;
                                                        $1249$hi = i64toi32_i32$4;
                                                        break block72;
                                                      }
                                                      i64toi32_i32$4 = 0;
                                                      $1295$hi = i64toi32_i32$4;
                                                      i64toi32_i32$4 = $29$hi;
                                                      i64toi32_i32$4 = $1295$hi;
                                                      i64toi32_i32$1 = $8_1 >>> 1 | 0;
                                                      i64toi32_i32$2 = $29$hi;
                                                      i64toi32_i32$0 = $29_1;
                                                      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
                                                        $432 = 1;
                                                      } else {
                                                        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
                                                          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
                                                            $433 = 0;
                                                          } else {
                                                            $433 = 1;
                                                          }
                                                          $434 = $433;
                                                        } else {
                                                          $434 = 0;
                                                        }
                                                        $432 = $434;
                                                      }
                                                      if ($432) {
                                                        HEAP32[5060 >> 2] = 68;
                                                        $10($4_1 + 96 | 0 | 0, $9_1 | 0);
                                                        i64toi32_i32$0 = $4_1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
                                                        $1304 = i64toi32_i32$1;
                                                        $1304$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 104 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 108 | 0) >> 2] | 0;
                                                        $1306 = i64toi32_i32$4;
                                                        $1306$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = $1304$hi;
                                                        i64toi32_i32$4 = $1306$hi;
                                                        i64toi32_i32$0 = -1;
                                                        i64toi32_i32$2 = 2147418111;
                                                        $1($4_1 + 80 | 0 | 0, $1304 | 0, i64toi32_i32$1 | 0, $1306 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$2 | 0);
                                                        i64toi32_i32$4 = $4_1;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
                                                        $1310 = i64toi32_i32$2;
                                                        $1310$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
                                                        $1312 = i64toi32_i32$0;
                                                        $1312$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = $1310$hi;
                                                        i64toi32_i32$0 = $1312$hi;
                                                        i64toi32_i32$4 = -1;
                                                        i64toi32_i32$1 = 2147418111;
                                                        $1($4_1 - -64 | 0 | 0, $1310 | 0, i64toi32_i32$2 | 0, $1312 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0);
                                                        i64toi32_i32$0 = $4_1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$1;
                                                        $30$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
                                                        $1249 = i64toi32_i32$4;
                                                        $1249$hi = i64toi32_i32$1;
                                                        break block72;
                                                      }
                                                      i64toi32_i32$4 = $22_1 - 226 | 0;
                                                      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
                                                      $1319$hi = i64toi32_i32$1;
                                                      i64toi32_i32$1 = $29$hi;
                                                      i64toi32_i32$1 = $1319$hi;
                                                      i64toi32_i32$0 = i64toi32_i32$4;
                                                      i64toi32_i32$4 = $29$hi;
                                                      i64toi32_i32$2 = $29_1;
                                                      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                                                        $435 = 1;
                                                      } else {
                                                        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                                                          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
                                                            $436 = 0;
                                                          } else {
                                                            $436 = 1;
                                                          }
                                                          $437 = $436;
                                                        } else {
                                                          $437 = 0;
                                                        }
                                                        $435 = $437;
                                                      }
                                                      if ($435) {
                                                        HEAP32[5060 >> 2] = 68;
                                                        $10($4_1 + 144 | 0 | 0, $9_1 | 0);
                                                        i64toi32_i32$2 = $4_1;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 144 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 148 | 0) >> 2] | 0;
                                                        $1328 = i64toi32_i32$0;
                                                        $1328$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
                                                        $1330 = i64toi32_i32$1;
                                                        $1330$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = $1328$hi;
                                                        i64toi32_i32$1 = $1330$hi;
                                                        i64toi32_i32$2 = 0;
                                                        i64toi32_i32$4 = 65536;
                                                        $1($4_1 + 128 | 0 | 0, $1328 | 0, i64toi32_i32$0 | 0, $1330 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                                        i64toi32_i32$1 = $4_1;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] | 0;
                                                        $1334 = i64toi32_i32$4;
                                                        $1334$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] | 0;
                                                        $1336 = i64toi32_i32$2;
                                                        $1336$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = $1334$hi;
                                                        i64toi32_i32$2 = $1336$hi;
                                                        i64toi32_i32$1 = 0;
                                                        i64toi32_i32$0 = 65536;
                                                        $1($4_1 + 112 | 0 | 0, $1334 | 0, i64toi32_i32$4 | 0, $1336 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                                                        i64toi32_i32$2 = $4_1;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$0;
                                                        $30$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
                                                        $1249 = i64toi32_i32$1;
                                                        $1249$hi = i64toi32_i32$0;
                                                        break block72;
                                                      }
                                                      if ($14_1) {
                                                        if (($14_1 | 0) <= (8 | 0)) {
                                                          $2_1 = ($4_1 + 784 | 0) + ($7_1 << 2 | 0) | 0;
                                                          $8_1 = HEAP32[$2_1 >> 2] | 0;
                                                          label16: while (1) {
                                                            $8_1 = Math_imul($8_1, 10);
                                                            $14_1 = $14_1 + 1 | 0;
                                                            if (($14_1 | 0) != (9 | 0)) {
                                                              continue label16;
                                                            }
                                                            break label16;
                                                          }
                                                          HEAP32[$2_1 >> 2] = $8_1;
                                                        }
                                                        $7_1 = $7_1 + 1 | 0;
                                                      }
                                                      i64toi32_i32$0 = $29$hi;
                                                      $10_1 = $29_1;
                                                      block74: {
                                                        if (($12_1 | 0) >= (9 | 0)) {
                                                          break block74;
                                                        }
                                                        if (($29_1 | 0) < ($12_1 | 0)) {
                                                          break block74;
                                                        }
                                                        if (($29_1 | 0) > (17 | 0)) {
                                                          break block74;
                                                        }
                                                        if (($29_1 | 0) == (9 | 0)) {
                                                          $10($4_1 + 192 | 0 | 0, $9_1 | 0);
                                                          $22($4_1 + 176 | 0 | 0, HEAP32[($4_1 + 784 | 0) >> 2] | 0 | 0);
                                                          i64toi32_i32$2 = $4_1;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
                                                          $1382 = i64toi32_i32$0;
                                                          $1382$hi = i64toi32_i32$1;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 204 | 0) >> 2] | 0;
                                                          $1384 = i64toi32_i32$1;
                                                          $1384$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 176 | 0) >> 2] | 0;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 180 | 0) >> 2] | 0;
                                                          $1386 = i64toi32_i32$0;
                                                          $1386$hi = i64toi32_i32$1;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 184 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
                                                          $1388 = i64toi32_i32$1;
                                                          $1388$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = $1382$hi;
                                                          i64toi32_i32$1 = $1384$hi;
                                                          i64toi32_i32$2 = $1386$hi;
                                                          i64toi32_i32$4 = $1388$hi;
                                                          $1($4_1 + 160 | 0 | 0, $1382 | 0, i64toi32_i32$0 | 0, $1384 | 0, i64toi32_i32$1 | 0, $1386 | 0, i64toi32_i32$2 | 0, $1388 | 0, i64toi32_i32$4 | 0);
                                                          i64toi32_i32$1 = $4_1;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
                                                          $30_1 = i64toi32_i32$4;
                                                          $30$hi = i64toi32_i32$2;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] | 0;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] | 0;
                                                          $1249 = i64toi32_i32$2;
                                                          $1249$hi = i64toi32_i32$4;
                                                          break block72;
                                                        }
                                                        if (($10_1 | 0) <= (8 | 0)) {
                                                          $10($4_1 + 272 | 0 | 0, $9_1 | 0);
                                                          $22($4_1 + 256 | 0 | 0, HEAP32[($4_1 + 784 | 0) >> 2] | 0 | 0);
                                                          i64toi32_i32$1 = $4_1;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 272 | 0) >> 2] | 0;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 276 | 0) >> 2] | 0;
                                                          $1405 = i64toi32_i32$4;
                                                          $1405$hi = i64toi32_i32$2;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 280 | 0) >> 2] | 0;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 284 | 0) >> 2] | 0;
                                                          $1407 = i64toi32_i32$2;
                                                          $1407$hi = i64toi32_i32$4;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] | 0;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] | 0;
                                                          $1409 = i64toi32_i32$4;
                                                          $1409$hi = i64toi32_i32$2;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] | 0;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] | 0;
                                                          $1411 = i64toi32_i32$2;
                                                          $1411$hi = i64toi32_i32$4;
                                                          i64toi32_i32$4 = $1405$hi;
                                                          i64toi32_i32$2 = $1407$hi;
                                                          i64toi32_i32$1 = $1409$hi;
                                                          i64toi32_i32$0 = $1411$hi;
                                                          $1($4_1 + 240 | 0 | 0, $1405 | 0, i64toi32_i32$4 | 0, $1407 | 0, i64toi32_i32$2 | 0, $1409 | 0, i64toi32_i32$1 | 0, $1411 | 0, i64toi32_i32$0 | 0);
                                                          $10($4_1 + 224 | 0 | 0, HEAP32[(((0 - $10_1 | 0) << 2 | 0) + 2896 | 0) >> 2] | 0 | 0);
                                                          i64toi32_i32$2 = $4_1;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
                                                          $1422 = i64toi32_i32$0;
                                                          $1422$hi = i64toi32_i32$1;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 252 | 0) >> 2] | 0;
                                                          $1424 = i64toi32_i32$1;
                                                          $1424$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 224 | 0) >> 2] | 0;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 228 | 0) >> 2] | 0;
                                                          $1426 = i64toi32_i32$0;
                                                          $1426$hi = i64toi32_i32$1;
                                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 232 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 236 | 0) >> 2] | 0;
                                                          $1428 = i64toi32_i32$1;
                                                          $1428$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = $1422$hi;
                                                          i64toi32_i32$1 = $1424$hi;
                                                          i64toi32_i32$2 = $1426$hi;
                                                          i64toi32_i32$4 = $1428$hi;
                                                          $40($4_1 + 208 | 0 | 0, $1422 | 0, i64toi32_i32$0 | 0, $1424 | 0, i64toi32_i32$1 | 0, $1426 | 0, i64toi32_i32$2 | 0, $1428 | 0, i64toi32_i32$4 | 0);
                                                          i64toi32_i32$1 = $4_1;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] | 0;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] | 0;
                                                          $30_1 = i64toi32_i32$4;
                                                          $30$hi = i64toi32_i32$2;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] | 0;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] | 0;
                                                          $1249 = i64toi32_i32$2;
                                                          $1249$hi = i64toi32_i32$4;
                                                          break block72;
                                                        }
                                                        $2_1 = ($20_1 + Math_imul($10_1, -3) | 0) + 27 | 0;
                                                        $5_1 = HEAP32[($4_1 + 784 | 0) >> 2] | 0;
                                                        if ($5_1 >>> $2_1 | 0 ? ($2_1 | 0) <= (30 | 0) : 0) {
                                                          break block74;
                                                        }
                                                        $10($4_1 + 352 | 0 | 0, $9_1 | 0);
                                                        $22($4_1 + 336 | 0 | 0, $5_1 | 0);
                                                        i64toi32_i32$1 = $4_1;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 352 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 356 | 0) >> 2] | 0;
                                                        $1455 = i64toi32_i32$4;
                                                        $1455$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 360 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 364 | 0) >> 2] | 0;
                                                        $1457 = i64toi32_i32$2;
                                                        $1457$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 336 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 340 | 0) >> 2] | 0;
                                                        $1459 = i64toi32_i32$4;
                                                        $1459$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 344 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 348 | 0) >> 2] | 0;
                                                        $1461 = i64toi32_i32$2;
                                                        $1461$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = $1455$hi;
                                                        i64toi32_i32$2 = $1457$hi;
                                                        i64toi32_i32$1 = $1459$hi;
                                                        i64toi32_i32$0 = $1461$hi;
                                                        $1($4_1 + 320 | 0 | 0, $1455 | 0, i64toi32_i32$4 | 0, $1457 | 0, i64toi32_i32$2 | 0, $1459 | 0, i64toi32_i32$1 | 0, $1461 | 0, i64toi32_i32$0 | 0);
                                                        $10($4_1 + 304 | 0 | 0, HEAP32[(($10_1 << 2 | 0) + 2824 | 0) >> 2] | 0 | 0);
                                                        i64toi32_i32$2 = $4_1;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 320 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 324 | 0) >> 2] | 0;
                                                        $1471 = i64toi32_i32$0;
                                                        $1471$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 328 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 332 | 0) >> 2] | 0;
                                                        $1473 = i64toi32_i32$1;
                                                        $1473$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 304 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 308 | 0) >> 2] | 0;
                                                        $1475 = i64toi32_i32$0;
                                                        $1475$hi = i64toi32_i32$1;
                                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 312 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 316 | 0) >> 2] | 0;
                                                        $1477 = i64toi32_i32$1;
                                                        $1477$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = $1471$hi;
                                                        i64toi32_i32$1 = $1473$hi;
                                                        i64toi32_i32$2 = $1475$hi;
                                                        i64toi32_i32$4 = $1477$hi;
                                                        $1($4_1 + 288 | 0 | 0, $1471 | 0, i64toi32_i32$0 | 0, $1473 | 0, i64toi32_i32$1 | 0, $1475 | 0, i64toi32_i32$2 | 0, $1477 | 0, i64toi32_i32$4 | 0);
                                                        i64toi32_i32$1 = $4_1;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 288 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$4;
                                                        $30$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 300 | 0) >> 2] | 0;
                                                        $1249 = i64toi32_i32$2;
                                                        $1249$hi = i64toi32_i32$4;
                                                        break block72;
                                                      }
                                                      label17: while (1) {
                                                        $2_1 = $7_1;
                                                        $7_1 = $2_1 - 1 | 0;
                                                        if (!(HEAP32[(($4_1 + 784 | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0)) {
                                                          continue label17;
                                                        }
                                                        break label17;
                                                      }
                                                      $14_1 = 0;
                                                      block75: {
                                                        $5_1 = ($10_1 | 0) % (9 | 0) | 0;
                                                        if (!$5_1) {
                                                          $6_1 = 0;
                                                          break block75;
                                                        }
                                                        $6_1 = 0;
                                                        $5_1 = ($10_1 | 0) < (0 | 0) ? $5_1 + 9 | 0 : $5_1;
                                                        block76: {
                                                          if (!$2_1) {
                                                            $2_1 = 0;
                                                            break block76;
                                                          }
                                                          $7_1 = HEAP32[(((0 - $5_1 | 0) << 2 | 0) + 2896 | 0) >> 2] | 0;
                                                          $12_1 = (1e9 | 0) / ($7_1 | 0) | 0;
                                                          $13_1 = 0;
                                                          $8_1 = 0;
                                                          label18: while (1) {
                                                            $21_1 = ($4_1 + 784 | 0) + ($8_1 << 2 | 0) | 0;
                                                            $1516 = $21_1;
                                                            $21_1 = HEAP32[$21_1 >> 2] | 0;
                                                            $25_1 = ($21_1 >>> 0) / ($7_1 >>> 0) | 0;
                                                            $13_1 = $13_1 + $25_1 | 0;
                                                            HEAP32[$1516 >> 2] = $13_1;
                                                            $13_1 = !$13_1 & ($6_1 | 0) == ($8_1 | 0) | 0;
                                                            $6_1 = $13_1 ? ($6_1 + 1 | 0) & 2047 | 0 : $6_1;
                                                            $10_1 = $13_1 ? $10_1 - 9 | 0 : $10_1;
                                                            $13_1 = Math_imul($12_1, $21_1 - Math_imul($7_1, $25_1) | 0);
                                                            $8_1 = $8_1 + 1 | 0;
                                                            if (($8_1 | 0) != ($2_1 | 0)) {
                                                              continue label18;
                                                            }
                                                            break label18;
                                                          }
                                                          if (!$13_1) {
                                                            break block76;
                                                          }
                                                          HEAP32[(($4_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
                                                          $2_1 = $2_1 + 1 | 0;
                                                        }
                                                        $10_1 = ($10_1 - $5_1 | 0) + 9 | 0;
                                                      }
                                                      label21: while (1) {
                                                        $8_1 = ($4_1 + 784 | 0) + ($6_1 << 2 | 0) | 0;
                                                        block77: {
                                                          label20: while (1) {
                                                            if (($10_1 | 0) >= (36 | 0)) {
                                                              if (($10_1 | 0) != (36 | 0)) {
                                                                break block77;
                                                              }
                                                              if ((HEAP32[$8_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
                                                                break block77;
                                                              }
                                                            }
                                                            $5_1 = $2_1 + 2047 | 0;
                                                            $13_1 = 0;
                                                            label19: while (1) {
                                                              i64toi32_i32$4 = 0;
                                                              $1584 = $13_1;
                                                              $1584$hi = i64toi32_i32$4;
                                                              $7_1 = $5_1 & 2047 | 0;
                                                              $5_1 = ($4_1 + 784 | 0) + ($7_1 << 2 | 0) | 0;
                                                              i64toi32_i32$1 = $5_1;
                                                              i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                                                              i64toi32_i32$2 = 0;
                                                              i64toi32_i32$1 = i64toi32_i32$4;
                                                              i64toi32_i32$4 = 0;
                                                              i64toi32_i32$0 = 29;
                                                              i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
                                                              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                                                i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
                                                                $438 = 0;
                                                              } else {
                                                                i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
                                                                $438 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
                                                              }
                                                              $1594$hi = i64toi32_i32$4;
                                                              i64toi32_i32$4 = $1584$hi;
                                                              i64toi32_i32$2 = $1584;
                                                              i64toi32_i32$1 = $1594$hi;
                                                              i64toi32_i32$0 = $438;
                                                              i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                                                              i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                                                              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                                                                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                                                              }
                                                              $29_1 = i64toi32_i32$3;
                                                              $29$hi = i64toi32_i32$5;
                                                              i64toi32_i32$4 = i64toi32_i32$3;
                                                              i64toi32_i32$2 = 0;
                                                              i64toi32_i32$0 = 1000000001;
                                                              if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
                                                                $1608 = 0;
                                                              } else {
                                                                i64toi32_i32$4 = $29$hi;
                                                                i64toi32_i32$5 = 0;
                                                                i64toi32_i32$5 = __wasm_i64_udiv($29_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$5 | 0) | 0;
                                                                i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                                                                $30_1 = i64toi32_i32$5;
                                                                $30$hi = i64toi32_i32$4;
                                                                i64toi32_i32$5 = 0;
                                                                i64toi32_i32$5 = __wasm_i64_mul($30_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$5 | 0) | 0;
                                                                i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                                                                $1602 = i64toi32_i32$5;
                                                                $1602$hi = i64toi32_i32$4;
                                                                i64toi32_i32$4 = $29$hi;
                                                                i64toi32_i32$0 = $29_1;
                                                                i64toi32_i32$5 = $1602$hi;
                                                                i64toi32_i32$2 = $1602;
                                                                i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
                                                                i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
                                                                i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                                                i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
                                                                $29_1 = i64toi32_i32$1;
                                                                $29$hi = i64toi32_i32$3;
                                                                i64toi32_i32$3 = $30$hi;
                                                                $1608 = $30_1;
                                                              }
                                                              $13_1 = $1608;
                                                              $1610 = $5_1;
                                                              i64toi32_i32$3 = $29$hi;
                                                              $5_1 = $29_1;
                                                              HEAP32[$1610 >> 2] = $5_1;
                                                              $2_1 = ($7_1 | 0) != (($2_1 - 1 | 0) & 2047 | 0 | 0) ? $2_1 : ($6_1 | 0) == ($7_1 | 0) ? $2_1 : $5_1 ? $2_1 : $7_1;
                                                              $5_1 = $7_1 - 1 | 0;
                                                              if (($6_1 | 0) != ($7_1 | 0)) {
                                                                continue label19;
                                                              }
                                                              break label19;
                                                            }
                                                            $14_1 = $14_1 - 29 | 0;
                                                            if (!$13_1) {
                                                              continue label20;
                                                            }
                                                            break label20;
                                                          }
                                                          $6_1 = ($6_1 - 1 | 0) & 2047 | 0;
                                                          if (($2_1 | 0) == ($6_1 | 0)) {
                                                            $5_1 = $4_1 + 784 | 0;
                                                            $7_1 = $5_1 + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
                                                            $2_1 = ($2_1 - 1 | 0) & 2047 | 0;
                                                            HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] | 0 | (HEAP32[(($2_1 << 2 | 0) + $5_1 | 0) >> 2] | 0) | 0;
                                                          }
                                                          $10_1 = $10_1 + 9 | 0;
                                                          HEAP32[(($4_1 + 784 | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $13_1;
                                                          continue label21;
                                                        }
                                                        break label21;
                                                      }
                                                      block81: {
                                                        label27: while (1) {
                                                          $7_1 = ($2_1 + 1 | 0) & 2047 | 0;
                                                          $13_1 = ($4_1 + 784 | 0) + ((($2_1 - 1 | 0) & 2047 | 0) << 2 | 0) | 0;
                                                          label26: while (1) {
                                                            $12_1 = ($10_1 | 0) > (45 | 0) ? 9 : 1;
                                                            block80: {
                                                              label24: while (1) {
                                                                $5_1 = $6_1;
                                                                $8_1 = 0;
                                                                block79: {
                                                                  label22: while (1) {
                                                                    block78: {
                                                                      $6_1 = ($5_1 + $8_1 | 0) & 2047 | 0;
                                                                      if (($6_1 | 0) == ($2_1 | 0)) {
                                                                        break block78;
                                                                      }
                                                                      $6_1 = HEAP32[(($4_1 + 784 | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
                                                                      $21_1 = HEAP32[(($8_1 << 2 | 0) + 2848 | 0) >> 2] | 0;
                                                                      if ($6_1 >>> 0 < $21_1 >>> 0) {
                                                                        break block78;
                                                                      }
                                                                      if ($6_1 >>> 0 > $21_1 >>> 0) {
                                                                        break block79;
                                                                      }
                                                                      $8_1 = $8_1 + 1 | 0;
                                                                      if (($8_1 | 0) != (4 | 0)) {
                                                                        continue label22;
                                                                      }
                                                                    }
                                                                    break label22;
                                                                  }
                                                                  if (($10_1 | 0) != (36 | 0)) {
                                                                    break block79;
                                                                  }
                                                                  i64toi32_i32$3 = 0;
                                                                  $29_1 = 0;
                                                                  $29$hi = i64toi32_i32$3;
                                                                  $8_1 = 0;
                                                                  i64toi32_i32$3 = 0;
                                                                  $30_1 = 0;
                                                                  $30$hi = i64toi32_i32$3;
                                                                  label23: while (1) {
                                                                    $6_1 = ($5_1 + $8_1 | 0) & 2047 | 0;
                                                                    if (($2_1 | 0) == ($6_1 | 0)) {
                                                                      $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
                                                                      HEAP32[((($2_1 << 2 | 0) + $4_1 | 0) + 780 | 0) >> 2] = 0;
                                                                    }
                                                                    $22($4_1 + 768 | 0 | 0, HEAP32[(($4_1 + 784 | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                    i64toi32_i32$3 = $29$hi;
                                                                    i64toi32_i32$3 = $30$hi;
                                                                    i64toi32_i32$3 = $29$hi;
                                                                    i64toi32_i32$0 = $30$hi;
                                                                    i64toi32_i32$4 = 0;
                                                                    i64toi32_i32$2 = 1075633366;
                                                                    $1($4_1 + 752 | 0 | 0, $29_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$2 | 0);
                                                                    i64toi32_i32$0 = $4_1;
                                                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 752 | 0) >> 2] | 0;
                                                                    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 756 | 0) >> 2] | 0;
                                                                    $1745 = i64toi32_i32$2;
                                                                    $1745$hi = i64toi32_i32$4;
                                                                    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 760 | 0) >> 2] | 0;
                                                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 764 | 0) >> 2] | 0;
                                                                    $1747 = i64toi32_i32$4;
                                                                    $1747$hi = i64toi32_i32$2;
                                                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 768 | 0) >> 2] | 0;
                                                                    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 772 | 0) >> 2] | 0;
                                                                    $1749 = i64toi32_i32$2;
                                                                    $1749$hi = i64toi32_i32$4;
                                                                    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 776 | 0) >> 2] | 0;
                                                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 780 | 0) >> 2] | 0;
                                                                    $1751 = i64toi32_i32$4;
                                                                    $1751$hi = i64toi32_i32$2;
                                                                    i64toi32_i32$2 = $1745$hi;
                                                                    i64toi32_i32$4 = $1747$hi;
                                                                    i64toi32_i32$0 = $1749$hi;
                                                                    i64toi32_i32$3 = $1751$hi;
                                                                    $9($4_1 + 736 | 0 | 0, $1745 | 0, i64toi32_i32$2 | 0, $1747 | 0, i64toi32_i32$4 | 0, $1749 | 0, i64toi32_i32$0 | 0, $1751 | 0, i64toi32_i32$3 | 0);
                                                                    i64toi32_i32$4 = $4_1;
                                                                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 744 | 0) >> 2] | 0;
                                                                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 748 | 0) >> 2] | 0;
                                                                    $30_1 = i64toi32_i32$3;
                                                                    $30$hi = i64toi32_i32$0;
                                                                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
                                                                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
                                                                    $29_1 = i64toi32_i32$0;
                                                                    $29$hi = i64toi32_i32$3;
                                                                    $8_1 = $8_1 + 1 | 0;
                                                                    if (($8_1 | 0) != (4 | 0)) {
                                                                      continue label23;
                                                                    }
                                                                    break label23;
                                                                  }
                                                                  $10(i64toi32_i32$4 + 720 | 0 | 0, $9_1 | 0);
                                                                  i64toi32_i32$3 = $30$hi;
                                                                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
                                                                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
                                                                  $1768 = i64toi32_i32$3;
                                                                  $1768$hi = i64toi32_i32$0;
                                                                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 728 | 0) >> 2] | 0;
                                                                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 732 | 0) >> 2] | 0;
                                                                  $1770 = i64toi32_i32$0;
                                                                  $1770$hi = i64toi32_i32$3;
                                                                  i64toi32_i32$3 = $29$hi;
                                                                  i64toi32_i32$0 = $30$hi;
                                                                  i64toi32_i32$4 = $1768$hi;
                                                                  i64toi32_i32$2 = $1770$hi;
                                                                  $1($4_1 + 704 | 0 | 0, $29_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$0 | 0, $1768 | 0, i64toi32_i32$4 | 0, $1770 | 0, i64toi32_i32$2 | 0);
                                                                  i64toi32_i32$0 = $4_1;
                                                                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 712 | 0) >> 2] | 0;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 716 | 0) >> 2] | 0;
                                                                  $30_1 = i64toi32_i32$2;
                                                                  $30$hi = i64toi32_i32$4;
                                                                  i64toi32_i32$4 = 0;
                                                                  $29_1 = 0;
                                                                  $29$hi = i64toi32_i32$4;
                                                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 704 | 0) >> 2] | 0;
                                                                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 708 | 0) >> 2] | 0;
                                                                  $32_1 = i64toi32_i32$4;
                                                                  $32$hi = i64toi32_i32$2;
                                                                  $12_1 = $14_1 + 113 | 0;
                                                                  $7_1 = $12_1 - $22_1 | 0;
                                                                  $8_1 = ($7_1 | 0) < ($20_1 | 0);
                                                                  $6_1 = $8_1 ? ($7_1 | 0) > (0 | 0) ? $7_1 : 0 : $20_1;
                                                                  if (($6_1 | 0) <= (112 | 0)) {
                                                                    break block80;
                                                                  }
                                                                  break block81;
                                                                }
                                                                $14_1 = $12_1 + $14_1 | 0;
                                                                $6_1 = $2_1;
                                                                if (($5_1 | 0) == ($2_1 | 0)) {
                                                                  continue label24;
                                                                }
                                                                break label24;
                                                              }
                                                              $21_1 = 1e9 >>> $12_1 | 0;
                                                              $25_1 = (-1 << $12_1 | 0) ^ -1 | 0;
                                                              $8_1 = 0;
                                                              $6_1 = $5_1;
                                                              label25: while (1) {
                                                                $26_1 = ($4_1 + 784 | 0) + ($5_1 << 2 | 0) | 0;
                                                                $1810 = $26_1;
                                                                $26_1 = HEAP32[$26_1 >> 2] | 0;
                                                                $8_1 = $8_1 + ($26_1 >>> $12_1 | 0) | 0;
                                                                HEAP32[$1810 >> 2] = $8_1;
                                                                $8_1 = !$8_1 & ($5_1 | 0) == ($6_1 | 0) | 0;
                                                                $6_1 = $8_1 ? ($6_1 + 1 | 0) & 2047 | 0 : $6_1;
                                                                $10_1 = $8_1 ? $10_1 - 9 | 0 : $10_1;
                                                                $8_1 = Math_imul($25_1 & $26_1 | 0, $21_1);
                                                                $5_1 = ($5_1 + 1 | 0) & 2047 | 0;
                                                                if (($5_1 | 0) != ($2_1 | 0)) {
                                                                  continue label25;
                                                                }
                                                                break label25;
                                                              }
                                                              if (!$8_1) {
                                                                continue label26;
                                                              }
                                                              if (($6_1 | 0) != ($7_1 | 0)) {
                                                                HEAP32[(($4_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $8_1;
                                                                $2_1 = $7_1;
                                                                continue label27;
                                                              }
                                                              HEAP32[$13_1 >> 2] = HEAP32[$13_1 >> 2] | 0 | 1 | 0;
                                                              continue label26;
                                                            }
                                                            break label26;
                                                          }
                                                          break label27;
                                                        }
                                                        $16($4_1 + 656 | 0 | 0, + +$35(225 - $6_1 | 0 | 0));
                                                        i64toi32_i32$0 = $4_1;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 656 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 660 | 0) >> 2] | 0;
                                                        $1871 = i64toi32_i32$2;
                                                        $1871$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 664 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 668 | 0) >> 2] | 0;
                                                        $1873 = i64toi32_i32$4;
                                                        $1873$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = $32$hi;
                                                        i64toi32_i32$2 = $30$hi;
                                                        i64toi32_i32$2 = $1871$hi;
                                                        i64toi32_i32$4 = $1873$hi;
                                                        i64toi32_i32$0 = $32$hi;
                                                        i64toi32_i32$3 = $30$hi;
                                                        $50($4_1 + 688 | 0 | 0, $1871 | 0, i64toi32_i32$2 | 0, $1873 | 0, i64toi32_i32$4 | 0, $32_1 | 0, i64toi32_i32$0 | 0, $30_1 | 0, i64toi32_i32$3 | 0);
                                                        i64toi32_i32$4 = $4_1;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 696 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 700 | 0) >> 2] | 0;
                                                        $33_1 = i64toi32_i32$3;
                                                        $33$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
                                                        $34_1 = i64toi32_i32$0;
                                                        $34$hi = i64toi32_i32$3;
                                                        $16(i64toi32_i32$4 + 640 | 0 | 0, + +$35(113 - $6_1 | 0 | 0));
                                                        i64toi32_i32$3 = $32$hi;
                                                        i64toi32_i32$3 = $30$hi;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
                                                        $1890 = i64toi32_i32$3;
                                                        $1890$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 648 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 652 | 0) >> 2] | 0;
                                                        $1892 = i64toi32_i32$0;
                                                        $1892$hi = i64toi32_i32$3;
                                                        i64toi32_i32$3 = $32$hi;
                                                        i64toi32_i32$0 = $30$hi;
                                                        i64toi32_i32$4 = $1890$hi;
                                                        i64toi32_i32$2 = $1892$hi;
                                                        $48($4_1 + 672 | 0 | 0, $32_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$0 | 0, $1890 | 0, i64toi32_i32$4 | 0, $1892 | 0, i64toi32_i32$2 | 0);
                                                        i64toi32_i32$2 = i64toi32_i32$3;
                                                        i64toi32_i32$2 = i64toi32_i32$0;
                                                        i64toi32_i32$0 = $4_1;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 672 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 676 | 0) >> 2] | 0;
                                                        $29_1 = i64toi32_i32$2;
                                                        $29$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 680 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 684 | 0) >> 2] | 0;
                                                        $31_1 = i64toi32_i32$4;
                                                        $31$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = i64toi32_i32$3;
                                                        i64toi32_i32$4 = $30$hi;
                                                        i64toi32_i32$0 = $29$hi;
                                                        i64toi32_i32$3 = $31$hi;
                                                        $33($4_1 + 624 | 0 | 0, $32_1 | 0, i64toi32_i32$2 | 0, $30_1 | 0, i64toi32_i32$4 | 0, $29_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, i64toi32_i32$3 | 0);
                                                        i64toi32_i32$3 = $34$hi;
                                                        i64toi32_i32$3 = $33$hi;
                                                        i64toi32_i32$4 = $4_1;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
                                                        $1908 = i64toi32_i32$3;
                                                        $1908$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 632 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 636 | 0) >> 2] | 0;
                                                        $1910 = i64toi32_i32$0;
                                                        $1910$hi = i64toi32_i32$3;
                                                        i64toi32_i32$3 = $34$hi;
                                                        i64toi32_i32$0 = $33$hi;
                                                        i64toi32_i32$4 = $1908$hi;
                                                        i64toi32_i32$2 = $1910$hi;
                                                        $9($4_1 + 608 | 0 | 0, $34_1 | 0, i64toi32_i32$3 | 0, $33_1 | 0, i64toi32_i32$0 | 0, $1908 | 0, i64toi32_i32$4 | 0, $1910 | 0, i64toi32_i32$2 | 0);
                                                        i64toi32_i32$0 = $4_1;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
                                                        $30_1 = i64toi32_i32$2;
                                                        $30$hi = i64toi32_i32$4;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] | 0;
                                                        $32_1 = i64toi32_i32$4;
                                                        $32$hi = i64toi32_i32$2;
                                                      }
                                                      block82: {
                                                        $10_1 = ($5_1 + 4 | 0) & 2047 | 0;
                                                        if (($10_1 | 0) == ($2_1 | 0)) {
                                                          break block82;
                                                        }
                                                        block83: {
                                                          $10_1 = HEAP32[(($4_1 + 784 | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
                                                          if ($10_1 >>> 0 <= 499999999 >>> 0) {
                                                            if (!$10_1 & (($5_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0) | 0) {
                                                              break block83;
                                                            }
                                                            $16($4_1 + 496 | 0 | 0, +(+($9_1 | 0) * .25));
                                                            i64toi32_i32$2 = $29$hi;
                                                            i64toi32_i32$2 = $31$hi;
                                                            i64toi32_i32$0 = $4_1;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 496 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 500 | 0) >> 2] | 0;
                                                            $1947 = i64toi32_i32$2;
                                                            $1947$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 504 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 508 | 0) >> 2] | 0;
                                                            $1949 = i64toi32_i32$4;
                                                            $1949$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = $29$hi;
                                                            i64toi32_i32$4 = $31$hi;
                                                            i64toi32_i32$0 = $1947$hi;
                                                            i64toi32_i32$3 = $1949$hi;
                                                            $9($4_1 + 480 | 0 | 0, $29_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$4 | 0, $1947 | 0, i64toi32_i32$0 | 0, $1949 | 0, i64toi32_i32$3 | 0);
                                                            i64toi32_i32$4 = $4_1;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 488 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 492 | 0) >> 2] | 0;
                                                            $31_1 = i64toi32_i32$3;
                                                            $31$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
                                                            $29_1 = i64toi32_i32$0;
                                                            $29$hi = i64toi32_i32$3;
                                                            break block83;
                                                          }
                                                          if (($10_1 | 0) != (5e8 | 0)) {
                                                            $16($4_1 + 592 | 0 | 0, +(+($9_1 | 0) * .75));
                                                            i64toi32_i32$3 = $29$hi;
                                                            i64toi32_i32$3 = $31$hi;
                                                            i64toi32_i32$4 = $4_1;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
                                                            $1966 = i64toi32_i32$3;
                                                            $1966$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 600 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 604 | 0) >> 2] | 0;
                                                            $1968 = i64toi32_i32$0;
                                                            $1968$hi = i64toi32_i32$3;
                                                            i64toi32_i32$3 = $29$hi;
                                                            i64toi32_i32$0 = $31$hi;
                                                            i64toi32_i32$4 = $1966$hi;
                                                            i64toi32_i32$2 = $1968$hi;
                                                            $9($4_1 + 576 | 0 | 0, $29_1 | 0, i64toi32_i32$3 | 0, $31_1 | 0, i64toi32_i32$0 | 0, $1966 | 0, i64toi32_i32$4 | 0, $1968 | 0, i64toi32_i32$2 | 0);
                                                            i64toi32_i32$0 = $4_1;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 584 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 588 | 0) >> 2] | 0;
                                                            $31_1 = i64toi32_i32$2;
                                                            $31$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 576 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 580 | 0) >> 2] | 0;
                                                            $29_1 = i64toi32_i32$4;
                                                            $29$hi = i64toi32_i32$2;
                                                            break block83;
                                                          }
                                                          $37_1 = +($9_1 | 0);
                                                          if (($2_1 | 0) == (($5_1 + 5 | 0) & 2047 | 0 | 0)) {
                                                            $16($4_1 + 528 | 0 | 0, +($37_1 * .5));
                                                            i64toi32_i32$2 = $29$hi;
                                                            i64toi32_i32$2 = $31$hi;
                                                            i64toi32_i32$0 = $4_1;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 528 | 0) >> 2] | 0;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 532 | 0) >> 2] | 0;
                                                            $1989 = i64toi32_i32$2;
                                                            $1989$hi = i64toi32_i32$4;
                                                            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 536 | 0) >> 2] | 0;
                                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 540 | 0) >> 2] | 0;
                                                            $1991 = i64toi32_i32$4;
                                                            $1991$hi = i64toi32_i32$2;
                                                            i64toi32_i32$2 = $29$hi;
                                                            i64toi32_i32$4 = $31$hi;
                                                            i64toi32_i32$0 = $1989$hi;
                                                            i64toi32_i32$3 = $1991$hi;
                                                            $9($4_1 + 512 | 0 | 0, $29_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$4 | 0, $1989 | 0, i64toi32_i32$0 | 0, $1991 | 0, i64toi32_i32$3 | 0);
                                                            i64toi32_i32$4 = $4_1;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 520 | 0) >> 2] | 0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 524 | 0) >> 2] | 0;
                                                            $31_1 = i64toi32_i32$3;
                                                            $31$hi = i64toi32_i32$0;
                                                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
                                                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
                                                            $29_1 = i64toi32_i32$0;
                                                            $29$hi = i64toi32_i32$3;
                                                            break block83;
                                                          }
                                                          $16($4_1 + 560 | 0 | 0, +($37_1 * .75));
                                                          i64toi32_i32$3 = $29$hi;
                                                          i64toi32_i32$3 = $31$hi;
                                                          i64toi32_i32$4 = $4_1;
                                                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
                                                          $2005 = i64toi32_i32$3;
                                                          $2005$hi = i64toi32_i32$0;
                                                          i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 568 | 0) >> 2] | 0;
                                                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 572 | 0) >> 2] | 0;
                                                          $2007 = i64toi32_i32$0;
                                                          $2007$hi = i64toi32_i32$3;
                                                          i64toi32_i32$3 = $29$hi;
                                                          i64toi32_i32$0 = $31$hi;
                                                          i64toi32_i32$4 = $2005$hi;
                                                          i64toi32_i32$2 = $2007$hi;
                                                          $9($4_1 + 544 | 0 | 0, $29_1 | 0, i64toi32_i32$3 | 0, $31_1 | 0, i64toi32_i32$0 | 0, $2005 | 0, i64toi32_i32$4 | 0, $2007 | 0, i64toi32_i32$2 | 0);
                                                          i64toi32_i32$0 = $4_1;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 552 | 0) >> 2] | 0;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 556 | 0) >> 2] | 0;
                                                          $31_1 = i64toi32_i32$2;
                                                          $31$hi = i64toi32_i32$4;
                                                          i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 544 | 0) >> 2] | 0;
                                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 548 | 0) >> 2] | 0;
                                                          $29_1 = i64toi32_i32$4;
                                                          $29$hi = i64toi32_i32$2;
                                                        }
                                                        if (($6_1 | 0) > (111 | 0)) {
                                                          break block82;
                                                        }
                                                        i64toi32_i32$2 = $29$hi;
                                                        i64toi32_i32$2 = $31$hi;
                                                        i64toi32_i32$2 = $29$hi;
                                                        i64toi32_i32$4 = $31$hi;
                                                        i64toi32_i32$0 = 0;
                                                        i64toi32_i32$3 = 1073676288;
                                                        $48($4_1 + 464 | 0 | 0, $29_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                                        i64toi32_i32$4 = $4_1;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
                                                        $2019 = i64toi32_i32$3;
                                                        $2019$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 472 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 476 | 0) >> 2] | 0;
                                                        $2021 = i64toi32_i32$0;
                                                        $2021$hi = i64toi32_i32$3;
                                                        i64toi32_i32$3 = $2019$hi;
                                                        i64toi32_i32$0 = $2021$hi;
                                                        i64toi32_i32$4 = 0;
                                                        i64toi32_i32$2 = 0;
                                                        if ($21($2019 | 0, i64toi32_i32$3 | 0, $2021 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0) {
                                                          break block82;
                                                        }
                                                        i64toi32_i32$2 = $29$hi;
                                                        i64toi32_i32$2 = $31$hi;
                                                        i64toi32_i32$2 = $29$hi;
                                                        i64toi32_i32$4 = $31$hi;
                                                        i64toi32_i32$0 = 0;
                                                        i64toi32_i32$3 = 1073676288;
                                                        $9($4_1 + 448 | 0 | 0, $29_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                                        i64toi32_i32$4 = $4_1;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 456 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 460 | 0) >> 2] | 0;
                                                        $31_1 = i64toi32_i32$3;
                                                        $31$hi = i64toi32_i32$0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
                                                        $29_1 = i64toi32_i32$0;
                                                        $29$hi = i64toi32_i32$3;
                                                      }
                                                      i64toi32_i32$3 = $32$hi;
                                                      i64toi32_i32$3 = $30$hi;
                                                      i64toi32_i32$3 = $29$hi;
                                                      i64toi32_i32$3 = $31$hi;
                                                      i64toi32_i32$3 = $32$hi;
                                                      i64toi32_i32$0 = $30$hi;
                                                      i64toi32_i32$4 = $29$hi;
                                                      i64toi32_i32$2 = $31$hi;
                                                      $9($4_1 + 432 | 0 | 0, $32_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$0 | 0, $29_1 | 0, i64toi32_i32$4 | 0, $31_1 | 0, i64toi32_i32$2 | 0);
                                                      i64toi32_i32$0 = $4_1;
                                                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 432 | 0) >> 2] | 0;
                                                      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 436 | 0) >> 2] | 0;
                                                      $2040 = i64toi32_i32$2;
                                                      $2040$hi = i64toi32_i32$4;
                                                      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 440 | 0) >> 2] | 0;
                                                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 444 | 0) >> 2] | 0;
                                                      $2042 = i64toi32_i32$4;
                                                      $2042$hi = i64toi32_i32$2;
                                                      i64toi32_i32$2 = $34$hi;
                                                      i64toi32_i32$2 = $33$hi;
                                                      i64toi32_i32$2 = $2040$hi;
                                                      i64toi32_i32$4 = $2042$hi;
                                                      i64toi32_i32$0 = $34$hi;
                                                      i64toi32_i32$3 = $33$hi;
                                                      $33($4_1 + 416 | 0 | 0, $2040 | 0, i64toi32_i32$2 | 0, $2042 | 0, i64toi32_i32$4 | 0, $34_1 | 0, i64toi32_i32$0 | 0, $33_1 | 0, i64toi32_i32$3 | 0);
                                                      i64toi32_i32$4 = $4_1;
                                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 424 | 0) >> 2] | 0;
                                                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 428 | 0) >> 2] | 0;
                                                      $30_1 = i64toi32_i32$3;
                                                      $30$hi = i64toi32_i32$0;
                                                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
                                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
                                                      $32_1 = i64toi32_i32$0;
                                                      $32$hi = i64toi32_i32$3;
                                                      block84: {
                                                        if (($28_1 - 2 | 0 | 0) >= ($12_1 & 2147483647 | 0 | 0)) {
                                                          break block84;
                                                        }
                                                        i64toi32_i32$3 = $30$hi;
                                                        i64toi32_i32$4 = $30_1;
                                                        i64toi32_i32$0 = 2147483647;
                                                        i64toi32_i32$2 = -1;
                                                        i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
                                                        $2056 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
                                                        i64toi32_i32$4 = $4_1;
                                                        HEAP32[(i64toi32_i32$4 + 408 | 0) >> 2] = $2056;
                                                        HEAP32[(i64toi32_i32$4 + 412 | 0) >> 2] = i64toi32_i32$0;
                                                        i64toi32_i32$0 = $32$hi;
                                                        HEAP32[(i64toi32_i32$4 + 400 | 0) >> 2] = $32_1;
                                                        HEAP32[(i64toi32_i32$4 + 404 | 0) >> 2] = i64toi32_i32$0;
                                                        i64toi32_i32$0 = i64toi32_i32$3;
                                                        i64toi32_i32$0 = $32$hi;
                                                        i64toi32_i32$4 = i64toi32_i32$3;
                                                        i64toi32_i32$3 = 0;
                                                        i64toi32_i32$2 = 1073610752;
                                                        $1($4_1 + 384 | 0 | 0, $32_1 | 0, i64toi32_i32$0 | 0, $30_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0);
                                                        i64toi32_i32$4 = $4_1;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 400 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 404 | 0) >> 2] | 0;
                                                        $2064 = i64toi32_i32$2;
                                                        $2064$hi = i64toi32_i32$3;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 408 | 0) >> 2] | 0;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 412 | 0) >> 2] | 0;
                                                        $2066 = i64toi32_i32$3;
                                                        $2066$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = $2064$hi;
                                                        i64toi32_i32$3 = $2066$hi;
                                                        i64toi32_i32$4 = 1081081856;
                                                        $2_1 = $41($2064 | 0, i64toi32_i32$2 | 0, $2066 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0;
                                                        i64toi32_i32$4 = $30$hi;
                                                        i64toi32_i32$2 = $4_1;
                                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 392 | 0) >> 2] | 0;
                                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 396 | 0) >> 2] | 0;
                                                        $2070 = i64toi32_i32$4;
                                                        $2070$hi = i64toi32_i32$3;
                                                        $5_1 = ($2_1 | 0) < (0 | 0);
                                                        i64toi32_i32$5 = $5_1;
                                                        i64toi32_i32$3 = $30$hi;
                                                        i64toi32_i32$4 = $2070$hi;
                                                        i64toi32_i32$0 = i64toi32_i32$5 ? $30_1 : $2070;
                                                        i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$4;
                                                        $30_1 = i64toi32_i32$0;
                                                        $30$hi = i64toi32_i32$2;
                                                        i64toi32_i32$2 = $32$hi;
                                                        i64toi32_i32$5 = $4_1;
                                                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 384 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 388 | 0) >> 2] | 0;
                                                        $2077 = i64toi32_i32$2;
                                                        $2077$hi = i64toi32_i32$0;
                                                        i64toi32_i32$3 = $5_1;
                                                        i64toi32_i32$0 = $32$hi;
                                                        i64toi32_i32$2 = $2077$hi;
                                                        i64toi32_i32$4 = i64toi32_i32$3 ? $32_1 : $2077;
                                                        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$2;
                                                        $32_1 = i64toi32_i32$4;
                                                        $32$hi = i64toi32_i32$5;
                                                        i64toi32_i32$5 = $29$hi;
                                                        i64toi32_i32$5 = $31$hi;
                                                        i64toi32_i32$5 = $29$hi;
                                                        i64toi32_i32$4 = $31$hi;
                                                        i64toi32_i32$3 = 0;
                                                        i64toi32_i32$2 = 0;
                                                        $14_1 = $14_1 + (($2_1 | 0) >= (0 | 0)) | 0;
                                                        if (!(($21($29_1 | 0, i64toi32_i32$5 | 0, $31_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0 | 0) != (0 | 0) & ($5_1 ? $8_1 : $8_1 & ($6_1 | 0) != ($7_1 | 0) | 0) | 0) & ($28_1 | 0) >= ($14_1 + 110 | 0 | 0) | 0) {
                                                          break block84;
                                                        }
                                                        HEAP32[5060 >> 2] = 68;
                                                      }
                                                      i64toi32_i32$2 = $32$hi;
                                                      i64toi32_i32$2 = $30$hi;
                                                      i64toi32_i32$2 = $32$hi;
                                                      i64toi32_i32$3 = $30$hi;
                                                      $49($4_1 + 368 | 0 | 0, $32_1 | 0, i64toi32_i32$2 | 0, $30_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0);
                                                      i64toi32_i32$4 = $4_1;
                                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 368 | 0) >> 2] | 0;
                                                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 372 | 0) >> 2] | 0;
                                                      $30_1 = i64toi32_i32$3;
                                                      $30$hi = i64toi32_i32$2;
                                                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 376 | 0) >> 2] | 0;
                                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 380 | 0) >> 2] | 0;
                                                      $1249 = i64toi32_i32$2;
                                                      $1249$hi = i64toi32_i32$3;
                                                    }
                                                    i64toi32_i32$3 = $1249$hi;
                                                    i64toi32_i32$2 = $1140;
                                                    HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $1249;
                                                    HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$3;
                                                    i64toi32_i32$3 = $30$hi;
                                                    i64toi32_i32$2 = $17_1;
                                                    HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = $30_1;
                                                    HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = i64toi32_i32$3;
                                                    global$0 = $4_1 + 8976 | 0;
                                                    i64toi32_i32$4 = i64toi32_i32$2;
                                                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
                                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
                                                    $29_1 = i64toi32_i32$3;
                                                    $29$hi = i64toi32_i32$2;
                                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
                                                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
                                                    $30_1 = i64toi32_i32$2;
                                                    $30$hi = i64toi32_i32$3;
                                                    break block38;
                                                  case 3:
                                                    break block41;
                                                  default:
                                                    break block43;
                                                }
                                              }
                                              break block85;
                                            }
                                            block87: {
                                              block86: {
                                                $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                  $2132 = HEAPU8[$2_1 >> 0] | 0;
                                                  break block86;
                                                }
                                                $2132 = $0($3_1 | 0) | 0;
                                              }
                                              if (($2132 | 0) == (40 | 0)) {
                                                $8_1 = 1;
                                                break block87;
                                              }
                                              i64toi32_i32$3 = 2147450880;
                                              $29_1 = 0;
                                              $29$hi = i64toi32_i32$3;
                                              i64toi32_i32$4 = $3_1;
                                              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                                              i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                                              i64toi32_i32$4 = i64toi32_i32$3;
                                              i64toi32_i32$3 = 0;
                                              i64toi32_i32$5 = 0;
                                              if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
                                                $439 = 1;
                                              } else {
                                                if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
                                                  if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
                                                    $440 = 0;
                                                  } else {
                                                    $440 = 1;
                                                  }
                                                  $441 = $440;
                                                } else {
                                                  $441 = 0;
                                                }
                                                $439 = $441;
                                              }
                                              if ($439) {
                                                break block38;
                                              }
                                              HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                              break block38;
                                            }
                                            label28: while (1) {
                                              block88: {
                                                $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                                if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                                  $2155 = HEAPU8[$2_1 >> 0] | 0;
                                                  break block88;
                                                }
                                                $2155 = $0($3_1 | 0) | 0;
                                              }
                                              $2_1 = $2155;
                                              $5_1 = $2_1 - 65 | 0;
                                              block90: {
                                                block89: {
                                                  if (($2_1 - 48 | 0) >>> 0 < 10 >>> 0) {
                                                    break block89;
                                                  }
                                                  if ($5_1 >>> 0 < 26 >>> 0) {
                                                    break block89;
                                                  }
                                                  if (($2_1 | 0) == (95 | 0)) {
                                                    break block89;
                                                  }
                                                  if (($2_1 - 97 | 0) >>> 0 >= 26 >>> 0) {
                                                    break block90;
                                                  }
                                                }
                                                $8_1 = $8_1 + 1 | 0;
                                                continue label28;
                                              }
                                              break label28;
                                            }
                                            i64toi32_i32$4 = 2147450880;
                                            $29_1 = 0;
                                            $29$hi = i64toi32_i32$4;
                                            if (($2_1 | 0) == (41 | 0)) {
                                              break block38;
                                            }
                                          }
                                          i64toi32_i32$5 = $3_1;
                                          i64toi32_i32$4 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
                                          i64toi32_i32$2 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
                                          i64toi32_i32$5 = i64toi32_i32$4;
                                          i64toi32_i32$4 = 0;
                                          i64toi32_i32$3 = 0;
                                          if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
                                            $442 = 1;
                                          } else {
                                            if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
                                              if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                                                $443 = 0;
                                              } else {
                                                $443 = 1;
                                              }
                                              $444 = $443;
                                            } else {
                                              $444 = 0;
                                            }
                                            $442 = $444;
                                          }
                                          if ($442) {
                                            HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                          }
                                          HEAP32[5060 >> 2] = 28;
                                          i64toi32_i32$5 = 0;
                                          $17($3_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
                                        }
                                        i64toi32_i32$5 = 0;
                                        $29_1 = 0;
                                        $29$hi = i64toi32_i32$5;
                                      }
                                      i64toi32_i32$5 = $30$hi;
                                      i64toi32_i32$2 = $11_1;
                                      HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $30_1;
                                      HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
                                      i64toi32_i32$5 = $29$hi;
                                      HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $29_1;
                                      HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
                                      global$0 = $17_1 + 48 | 0;
                                      i64toi32_i32$3 = $3_1;
                                      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
                                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
                                      $2190 = i64toi32_i32$5;
                                      $2190$hi = i64toi32_i32$2;
                                      i64toi32_i32$5 = (HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0) - (HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0) | 0;
                                      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
                                      $2196 = i64toi32_i32$5;
                                      $2196$hi = i64toi32_i32$2;
                                      i64toi32_i32$2 = 0;
                                      i64toi32_i32$3 = 0;
                                      i64toi32_i32$5 = $2196$hi;
                                      i64toi32_i32$4 = $2196;
                                      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
                                      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
                                      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                                      $2197$hi = i64toi32_i32$1;
                                      i64toi32_i32$1 = $2190$hi;
                                      i64toi32_i32$2 = $2190;
                                      i64toi32_i32$3 = $2197$hi;
                                      i64toi32_i32$4 = i64toi32_i32$0;
                                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
                                        break block91;
                                      }
                                      break block92;
                                    case 3:
                                    case 11:
                                    case 27:
                                      if (($4_1 | 16 | 0 | 0) == (115 | 0)) {
                                        $12($11_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                                        HEAP8[($11_1 + 32 | 0) >> 0] = 0;
                                        if (($4_1 | 0) != (115 | 0)) {
                                          break block93;
                                        }
                                        HEAP8[($11_1 + 65 | 0) >> 0] = 0;
                                        HEAP8[($11_1 + 46 | 0) >> 0] = 0;
                                        $445 = 0;
                                        HEAP16[($11_1 + 42 | 0) >> 1] = $445;
                                        HEAP16[($11_1 + 44 | 0) >> 1] = $445 >>> 16 | 0;
                                        break block93;
                                      }
                                      $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                                      $6_1 = ($2_1 | 0) == (94 | 0);
                                      $12($11_1 + 32 | 0 | 0, $6_1 | 0, 257 | 0) | 0;
                                      HEAP8[($11_1 + 32 | 0) >> 0] = 0;
                                      $7_1 = $6_1 ? $1_1 + 2 | 0 : $1_1 + 1 | 0;
                                      block95: {
                                        block96: {
                                          block94: {
                                            $1_1 = HEAPU8[($1_1 + ($6_1 ? 2 : 1) | 0) >> 0] | 0;
                                            if (($1_1 | 0) != (45 | 0)) {
                                              if (($1_1 | 0) == (93 | 0)) {
                                                break block94;
                                              }
                                              $6_1 = ($2_1 | 0) != (94 | 0);
                                              $2238 = $7_1;
                                              break block95;
                                            }
                                            $6_1 = ($2_1 | 0) != (94 | 0);
                                            HEAP8[($11_1 + 78 | 0) >> 0] = $6_1;
                                            break block96;
                                          }
                                          $6_1 = ($2_1 | 0) != (94 | 0);
                                          HEAP8[($11_1 + 126 | 0) >> 0] = $6_1;
                                        }
                                        $2238 = $7_1 + 1 | 0;
                                      }
                                      $1_1 = $2238;
                                      label30: while (1) {
                                        block97: {
                                          $2_1 = HEAPU8[$1_1 >> 0] | 0;
                                          if (($2_1 | 0) != (45 | 0)) {
                                            if (!$2_1) {
                                              break block22;
                                            }
                                            if (($2_1 | 0) == (93 | 0)) {
                                              break block93;
                                            }
                                            break block97;
                                          }
                                          $2_1 = 45;
                                          $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                                          if (!$7_1) {
                                            break block97;
                                          }
                                          if (($7_1 | 0) == (93 | 0)) {
                                            break block97;
                                          }
                                          $18_1 = $1_1 + 1 | 0;
                                          block98: {
                                            $1_1 = HEAPU8[($1_1 - 1 | 0) >> 0] | 0;
                                            if ($7_1 >>> 0 <= $1_1 >>> 0) {
                                              $2_1 = $7_1;
                                              break block98;
                                            }
                                            label29: while (1) {
                                              $1_1 = $1_1 + 1 | 0;
                                              HEAP8[($1_1 + ($11_1 + 32 | 0) | 0) >> 0] = $6_1;
                                              $2_1 = HEAPU8[$18_1 >> 0] | 0;
                                              if ($1_1 >>> 0 < $2_1 >>> 0) {
                                                continue label29;
                                              }
                                              break label29;
                                            }
                                          }
                                          $1_1 = $18_1;
                                        }
                                        HEAP8[(($2_1 + $11_1 | 0) + 33 | 0) >> 0] = $6_1;
                                        $1_1 = $1_1 + 1 | 0;
                                        continue label30;
                                      }
                                      ;
                                    case 23:
                                      $2_1 = 8;
                                      break block23;
                                    case 12:
                                    case 29:
                                      $2_1 = 10;
                                      break block23;
                                    case 0:
                                    case 24:
                                    case 32:
                                      break block23;
                                    case 1:
                                    case 2:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 7:
                                    case 8:
                                    case 10:
                                    case 16:
                                    case 18:
                                    case 19:
                                    case 20:
                                    case 21:
                                    case 22:
                                    case 25:
                                    case 26:
                                    case 28:
                                    case 30:
                                    case 31:
                                      break block24;
                                    case 17:
                                      break block28;
                                  }
                                }
                                $2_1 = 0;
                              }
                              i64toi32_i32$2 = 0;
                              $29_1 = 0;
                              $29$hi = i64toi32_i32$2;
                              $6_1 = 0;
                              $7_1 = 0;
                              $18_1 = 0;
                              $8_1 = global$0 - 16 | 0;
                              global$0 = $8_1;
                              block99: {
                                if (!(($2_1 | 0) != (1 | 0) & $2_1 >>> 0 <= 36 >>> 0 | 0)) {
                                  HEAP32[5060 >> 2] = 28;
                                  break block99;
                                }
                                label31: while (1) {
                                  block100: {
                                    $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                    if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                      HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                      $2312 = HEAPU8[$5_1 >> 0] | 0;
                                      break block100;
                                    }
                                    $2312 = $0($3_1 | 0) | 0;
                                  }
                                  $5_1 = $2312;
                                  if (($5_1 | 0) == (32 | 0) | ($5_1 - 9 | 0) >>> 0 < 5 >>> 0 | 0) {
                                    continue label31;
                                  }
                                  break label31;
                                }
                                block102: {
                                  block101: {
                                    switch ($5_1 - 43 | 0 | 0) {
                                      case 0:
                                      case 2:
                                        break block101;
                                      default:
                                        break block102;
                                    }
                                  }
                                  $18_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
                                  $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                  if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                    HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                    $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                    break block102;
                                  }
                                  $5_1 = $0($3_1 | 0) | 0;
                                }
                                block112: {
                                  block111: {
                                    block106: {
                                      block107: {
                                        block103: {
                                          if (($2_1 | 0) != (0 | 0) & ($2_1 | 0) != (16 | 0) | 0) {
                                            break block103;
                                          }
                                          if (($5_1 | 0) != (48 | 0)) {
                                            break block103;
                                          }
                                          block104: {
                                            $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                            if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                              HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                              $2358 = HEAPU8[$5_1 >> 0] | 0;
                                              break block104;
                                            }
                                            $2358 = $0($3_1 | 0) | 0;
                                          }
                                          $5_1 = $2358;
                                          if (($5_1 & -33 | 0 | 0) == (88 | 0)) {
                                            $2_1 = 16;
                                            block105: {
                                              $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                              if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                $2376 = HEAPU8[$5_1 >> 0] | 0;
                                                break block105;
                                              }
                                              $2376 = $0($3_1 | 0) | 0;
                                            }
                                            $5_1 = $2376;
                                            if ((HEAPU8[($5_1 + 2929 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
                                              break block106;
                                            }
                                            i64toi32_i32$4 = $3_1;
                                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                                            i64toi32_i32$4 = i64toi32_i32$2;
                                            i64toi32_i32$2 = 0;
                                            i64toi32_i32$3 = 0;
                                            if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
                                              $446 = 1;
                                            } else {
                                              if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
                                                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                                                  $447 = 0;
                                                } else {
                                                  $447 = 1;
                                                }
                                                $448 = $447;
                                              } else {
                                                $448 = 0;
                                              }
                                              $446 = $448;
                                            }
                                            if ($446) {
                                              HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                            }
                                            i64toi32_i32$4 = 0;
                                            $17($3_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                            break block99;
                                          }
                                          if ($2_1) {
                                            break block107;
                                          }
                                          $2_1 = 8;
                                          break block106;
                                        }
                                        $2_1 = $2_1 ? $2_1 : 10;
                                        if ($2_1 >>> 0 > (HEAPU8[($5_1 + 2929 | 0) >> 0] | 0) >>> 0) {
                                          break block107;
                                        }
                                        i64toi32_i32$3 = $3_1;
                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
                                        i64toi32_i32$3 = i64toi32_i32$4;
                                        i64toi32_i32$4 = 0;
                                        i64toi32_i32$2 = 0;
                                        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                                          $449 = 1;
                                        } else {
                                          if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                                            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                                              $450 = 0;
                                            } else {
                                              $450 = 1;
                                            }
                                            $451 = $450;
                                          } else {
                                            $451 = 0;
                                          }
                                          $449 = $451;
                                        }
                                        if ($449) {
                                          HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                        }
                                        i64toi32_i32$3 = 0;
                                        $17($3_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                        HEAP32[5060 >> 2] = 28;
                                        break block99;
                                      }
                                      if (($2_1 | 0) != (10 | 0)) {
                                        break block106;
                                      }
                                      $6_1 = $5_1 - 48 | 0;
                                      if ($6_1 >>> 0 <= 9 >>> 0) {
                                        $2_1 = 0;
                                        label32: while (1) {
                                          $2_1 = Math_imul($2_1, 10) + $6_1 | 0;
                                          $2420 = $2_1 >>> 0 < 429496729 >>> 0;
                                          block108: {
                                            $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                            if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                              HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                              $2432 = HEAPU8[$5_1 >> 0] | 0;
                                              break block108;
                                            }
                                            $2432 = $0($3_1 | 0) | 0;
                                          }
                                          $5_1 = $2432;
                                          $6_1 = $5_1 - 48 | 0;
                                          if ($2420 & $6_1 >>> 0 <= 9 >>> 0 | 0) {
                                            continue label32;
                                          }
                                          break label32;
                                        }
                                        i64toi32_i32$3 = 0;
                                        $29_1 = $2_1;
                                        $29$hi = i64toi32_i32$3;
                                      }
                                      block109: {
                                        if ($6_1 >>> 0 > 9 >>> 0) {
                                          break block109;
                                        }
                                        i64toi32_i32$3 = $29$hi;
                                        i64toi32_i32$1 = 0;
                                        i64toi32_i32$1 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
                                        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                        $30_1 = i64toi32_i32$1;
                                        $30$hi = i64toi32_i32$3;
                                        i64toi32_i32$3 = 0;
                                        $31_1 = $6_1;
                                        $31$hi = i64toi32_i32$3;
                                        label33: while (1) {
                                          i64toi32_i32$3 = $30$hi;
                                          i64toi32_i32$3 = $31$hi;
                                          i64toi32_i32$3 = $30$hi;
                                          i64toi32_i32$2 = $30_1;
                                          i64toi32_i32$1 = $31$hi;
                                          i64toi32_i32$4 = $31_1;
                                          i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
                                          i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                                          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                                          }
                                          $29_1 = i64toi32_i32$5;
                                          $29$hi = i64toi32_i32$0;
                                          block110: {
                                            $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                            if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                              HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                              $2463 = HEAPU8[$2_1 >> 0] | 0;
                                              break block110;
                                            }
                                            $2463 = $0($3_1 | 0) | 0;
                                          }
                                          $5_1 = $2463;
                                          $6_1 = $5_1 - 48 | 0;
                                          if ($6_1 >>> 0 > 9 >>> 0) {
                                            break block109;
                                          }
                                          i64toi32_i32$0 = $29$hi;
                                          i64toi32_i32$3 = $29_1;
                                          i64toi32_i32$2 = 429496729;
                                          i64toi32_i32$4 = -1717986918;
                                          if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0) {
                                            break block109;
                                          }
                                          i64toi32_i32$3 = i64toi32_i32$0;
                                          i64toi32_i32$0 = 0;
                                          i64toi32_i32$0 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
                                          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                          $30_1 = i64toi32_i32$0;
                                          $30$hi = i64toi32_i32$3;
                                          i64toi32_i32$3 = 0;
                                          $31_1 = $6_1;
                                          $31$hi = i64toi32_i32$3;
                                          i64toi32_i32$4 = $6_1;
                                          i64toi32_i32$0 = -1;
                                          i64toi32_i32$2 = -1;
                                          i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
                                          $2479 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
                                          $2479$hi = i64toi32_i32$0;
                                          i64toi32_i32$0 = $30$hi;
                                          i64toi32_i32$3 = $30_1;
                                          i64toi32_i32$4 = $2479$hi;
                                          i64toi32_i32$2 = $2479;
                                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
                                            continue label33;
                                          }
                                          break label33;
                                        }
                                        $2_1 = 10;
                                        break block111;
                                      }
                                      $2_1 = 10;
                                      if ($6_1 >>> 0 <= 9 >>> 0) {
                                        break block111;
                                      }
                                      break block112;
                                    }
                                    if ($2_1 & ($2_1 - 1 | 0) | 0) {
                                      $7_1 = HEAPU8[($5_1 + 2929 | 0) >> 0] | 0;
                                      if ($7_1 >>> 0 < $2_1 >>> 0) {
                                        label34: while (1) {
                                          $6_1 = Math_imul($2_1, $6_1) + $7_1 | 0;
                                          $2499 = $6_1 >>> 0 < 119304647 >>> 0;
                                          block113: {
                                            $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                            if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                              HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                              $2511 = HEAPU8[$5_1 >> 0] | 0;
                                              break block113;
                                            }
                                            $2511 = $0($3_1 | 0) | 0;
                                          }
                                          $5_1 = $2511;
                                          $7_1 = HEAPU8[($5_1 + 2929 | 0) >> 0] | 0;
                                          if ($2499 & $7_1 >>> 0 < $2_1 >>> 0 | 0) {
                                            continue label34;
                                          }
                                          break label34;
                                        }
                                        i64toi32_i32$3 = 0;
                                        $29_1 = $6_1;
                                        $29$hi = i64toi32_i32$3;
                                      }
                                      if ($2_1 >>> 0 <= $7_1 >>> 0) {
                                        break block111;
                                      }
                                      i64toi32_i32$3 = 0;
                                      $30_1 = $2_1;
                                      $30$hi = i64toi32_i32$3;
                                      label35: while (1) {
                                        i64toi32_i32$3 = $29$hi;
                                        i64toi32_i32$3 = $30$hi;
                                        i64toi32_i32$3 = $29$hi;
                                        i64toi32_i32$0 = $30$hi;
                                        i64toi32_i32$0 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$0 | 0) | 0;
                                        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                        $31_1 = i64toi32_i32$0;
                                        $31$hi = i64toi32_i32$3;
                                        i64toi32_i32$3 = 0;
                                        i64toi32_i32$2 = $7_1;
                                        i64toi32_i32$0 = 0;
                                        i64toi32_i32$4 = 255;
                                        i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
                                        $32_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
                                        $32$hi = i64toi32_i32$0;
                                        i64toi32_i32$3 = $32_1;
                                        i64toi32_i32$2 = -1;
                                        i64toi32_i32$4 = -1;
                                        i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
                                        $2537 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
                                        $2537$hi = i64toi32_i32$2;
                                        i64toi32_i32$2 = $31$hi;
                                        i64toi32_i32$0 = $31_1;
                                        i64toi32_i32$3 = $2537$hi;
                                        i64toi32_i32$4 = $2537;
                                        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
                                          break block111;
                                        }
                                        i64toi32_i32$0 = i64toi32_i32$2;
                                        i64toi32_i32$0 = $32$hi;
                                        i64toi32_i32$0 = i64toi32_i32$2;
                                        i64toi32_i32$4 = $31_1;
                                        i64toi32_i32$2 = $32$hi;
                                        i64toi32_i32$3 = $32_1;
                                        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                                        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                                        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                                        }
                                        $29_1 = i64toi32_i32$1;
                                        $29$hi = i64toi32_i32$5;
                                        $2542 = $2_1;
                                        block114: {
                                          $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                          if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                            HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                            $2554 = HEAPU8[$5_1 >> 0] | 0;
                                            break block114;
                                          }
                                          $2554 = $0($3_1 | 0) | 0;
                                        }
                                        $5_1 = $2554;
                                        $7_1 = HEAPU8[($5_1 + 2929 | 0) >> 0] | 0;
                                        if ($2542 >>> 0 <= $7_1 >>> 0) {
                                          break block111;
                                        }
                                        i64toi32_i32$5 = $30$hi;
                                        i64toi32_i32$5 = $29$hi;
                                        i64toi32_i32$5 = $30$hi;
                                        i64toi32_i32$4 = 0;
                                        i64toi32_i32$0 = $29$hi;
                                        i64toi32_i32$3 = 0;
                                        $4($8_1 | 0, $30_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0, $29_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                        i64toi32_i32$4 = $8_1;
                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
                                        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
                                        if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0)) {
                                          continue label35;
                                        }
                                        break label35;
                                      }
                                      break block111;
                                    }
                                    $10_1 = HEAP8[(((Math_imul($2_1, 23) >>> 5 | 0) & 7 | 0) + 3185 | 0) >> 0] | 0;
                                    $6_1 = HEAPU8[($5_1 + 2929 | 0) >> 0] | 0;
                                    if ($6_1 >>> 0 < $2_1 >>> 0) {
                                      label36: while (1) {
                                        $7_1 = $7_1 << $10_1 | 0 | $6_1 | 0;
                                        $2587 = $7_1 >>> 0 < 134217728 >>> 0;
                                        block115: {
                                          $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                          if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                            HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                            $2599 = HEAPU8[$5_1 >> 0] | 0;
                                            break block115;
                                          }
                                          $2599 = $0($3_1 | 0) | 0;
                                        }
                                        $5_1 = $2599;
                                        $6_1 = HEAPU8[($5_1 + 2929 | 0) >> 0] | 0;
                                        if ($2587 & $6_1 >>> 0 < $2_1 >>> 0 | 0) {
                                          continue label36;
                                        }
                                        break label36;
                                      }
                                      i64toi32_i32$0 = 0;
                                      $29_1 = $7_1;
                                      $29$hi = i64toi32_i32$0;
                                    }
                                    if ($2_1 >>> 0 <= $6_1 >>> 0) {
                                      break block111;
                                    }
                                    i64toi32_i32$0 = 0;
                                    $30_1 = $10_1;
                                    $30$hi = i64toi32_i32$0;
                                    i64toi32_i32$0 = -1;
                                    i64toi32_i32$4 = -1;
                                    i64toi32_i32$3 = $30$hi;
                                    i64toi32_i32$5 = $30_1;
                                    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
                                    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                      i64toi32_i32$3 = 0;
                                      $452 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
                                    } else {
                                      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
                                      $452 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
                                    }
                                    $31_1 = $452;
                                    $31$hi = i64toi32_i32$3;
                                    i64toi32_i32$3 = $29$hi;
                                    i64toi32_i32$3 = $31$hi;
                                    i64toi32_i32$0 = $31_1;
                                    i64toi32_i32$4 = $29$hi;
                                    i64toi32_i32$5 = $29_1;
                                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
                                      break block111;
                                    }
                                    label37: while (1) {
                                      i64toi32_i32$0 = 0;
                                      i64toi32_i32$5 = $6_1;
                                      i64toi32_i32$3 = 0;
                                      i64toi32_i32$4 = 255;
                                      i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
                                      $2624 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
                                      $2624$hi = i64toi32_i32$3;
                                      i64toi32_i32$3 = $29$hi;
                                      i64toi32_i32$3 = $30$hi;
                                      i64toi32_i32$3 = $29$hi;
                                      i64toi32_i32$0 = $29_1;
                                      i64toi32_i32$5 = $30$hi;
                                      i64toi32_i32$4 = $30_1;
                                      i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                                        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
                                        $453 = 0;
                                      } else {
                                        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
                                        $453 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
                                      }
                                      $2627$hi = i64toi32_i32$5;
                                      i64toi32_i32$5 = $2624$hi;
                                      i64toi32_i32$3 = $2624;
                                      i64toi32_i32$0 = $2627$hi;
                                      i64toi32_i32$4 = $453;
                                      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
                                      $29_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
                                      $29$hi = i64toi32_i32$0;
                                      $2629 = $2_1;
                                      block116: {
                                        $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                        if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                          HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                          $2641 = HEAPU8[$5_1 >> 0] | 0;
                                          break block116;
                                        }
                                        $2641 = $0($3_1 | 0) | 0;
                                      }
                                      $5_1 = $2641;
                                      $6_1 = HEAPU8[($5_1 + 2929 | 0) >> 0] | 0;
                                      if ($2629 >>> 0 <= $6_1 >>> 0) {
                                        break block111;
                                      }
                                      i64toi32_i32$0 = $29$hi;
                                      i64toi32_i32$0 = $31$hi;
                                      i64toi32_i32$0 = $29$hi;
                                      i64toi32_i32$5 = $29_1;
                                      i64toi32_i32$3 = $31$hi;
                                      i64toi32_i32$4 = $31_1;
                                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
                                        continue label37;
                                      }
                                      break label37;
                                    }
                                  }
                                  if ($2_1 >>> 0 <= (HEAPU8[($5_1 + 2929 | 0) >> 0] | 0) >>> 0) {
                                    break block112;
                                  }
                                  label38: while (1) {
                                    $2658 = $2_1;
                                    block117: {
                                      $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                      if (($5_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                        HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                        $2670 = HEAPU8[$5_1 >> 0] | 0;
                                        break block117;
                                      }
                                      $2670 = $0($3_1 | 0) | 0;
                                    }
                                    if ($2658 >>> 0 > (HEAPU8[($2670 + 2929 | 0) >> 0] | 0) >>> 0) {
                                      continue label38;
                                    }
                                    break label38;
                                  }
                                  HEAP32[5060 >> 2] = 68;
                                  $18_1 = 0;
                                  i64toi32_i32$5 = -1;
                                  $29_1 = -1;
                                  $29$hi = i64toi32_i32$5;
                                }
                                i64toi32_i32$4 = $3_1;
                                i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                                i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                                i64toi32_i32$4 = i64toi32_i32$5;
                                i64toi32_i32$5 = 0;
                                i64toi32_i32$3 = 0;
                                if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
                                  $454 = 1;
                                } else {
                                  if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
                                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                                      $455 = 0;
                                    } else {
                                      $455 = 1;
                                    }
                                    $456 = $455;
                                  } else {
                                    $456 = 0;
                                  }
                                  $454 = $456;
                                }
                                if ($454) {
                                  HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - 1 | 0;
                                }
                                block118: {
                                  i64toi32_i32$4 = $29$hi;
                                  i64toi32_i32$3 = $29_1;
                                  i64toi32_i32$0 = -1;
                                  i64toi32_i32$5 = -1;
                                  if ((i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0) {
                                    break block118;
                                  }
                                }
                                i64toi32_i32$3 = $29$hi;
                                i64toi32_i32$4 = $18_1;
                                i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
                                $30_1 = i64toi32_i32$4;
                                $30$hi = i64toi32_i32$3;
                                i64toi32_i32$3 = $29$hi;
                                i64toi32_i32$5 = $29_1;
                                i64toi32_i32$4 = $30$hi;
                                i64toi32_i32$0 = $30_1;
                                i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
                                $2690$hi = i64toi32_i32$4;
                                i64toi32_i32$4 = $30$hi;
                                i64toi32_i32$4 = $2690$hi;
                                i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
                                i64toi32_i32$5 = $30$hi;
                                i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                                i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                                i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
                                $29_1 = i64toi32_i32$2;
                                $29$hi = i64toi32_i32$1;
                              }
                              global$0 = $8_1 + 16 | 0;
                              i64toi32_i32$4 = $3_1;
                              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 120 | 0) >> 2] | 0;
                              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 124 | 0) >> 2] | 0;
                              $2696 = i64toi32_i32$1;
                              $2696$hi = i64toi32_i32$3;
                              i64toi32_i32$1 = (HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0) - (HEAP32[(i64toi32_i32$4 + 44 | 0) >> 2] | 0) | 0;
                              i64toi32_i32$3 = i64toi32_i32$1 >> 31 | 0;
                              $2702 = i64toi32_i32$1;
                              $2702$hi = i64toi32_i32$3;
                              i64toi32_i32$3 = 0;
                              i64toi32_i32$4 = 0;
                              i64toi32_i32$1 = $2702$hi;
                              i64toi32_i32$0 = $2702;
                              i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
                              i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
                              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                              i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
                              $2703$hi = i64toi32_i32$2;
                              i64toi32_i32$2 = $2696$hi;
                              i64toi32_i32$3 = $2696;
                              i64toi32_i32$4 = $2703$hi;
                              i64toi32_i32$0 = i64toi32_i32$5;
                              if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) | 0) {
                                break block92;
                              }
                              block119: {
                                if (($4_1 | 0) != (112 | 0)) {
                                  break block119;
                                }
                                if (!$15_1) {
                                  break block119;
                                }
                                i64toi32_i32$3 = $29$hi;
                                HEAP32[$15_1 >> 2] = $29_1;
                                break block24;
                              }
                              i64toi32_i32$3 = $29$hi;
                              $46($15_1 | 0, $9_1 | 0, $29_1 | 0, i64toi32_i32$3 | 0);
                              break block24;
                            }
                            if (!$15_1) {
                              break block24;
                            }
                            i64toi32_i32$0 = $11_1;
                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
                            $29_1 = i64toi32_i32$3;
                            $29$hi = i64toi32_i32$2;
                            i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
                            i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
                            $30_1 = i64toi32_i32$2;
                            $30$hi = i64toi32_i32$3;
                            block122: {
                              switch ($18_1 | 0) {
                                case 0:
                                  $2_1 = global$0 - 32 | 0;
                                  global$0 = $2_1;
                                  block123: {
                                    i64toi32_i32$3 = $29$hi;
                                    i64toi32_i32$0 = $29_1;
                                    i64toi32_i32$2 = 2147483647;
                                    i64toi32_i32$4 = -1;
                                    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
                                    $31_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
                                    $31$hi = i64toi32_i32$2;
                                    i64toi32_i32$3 = $31_1;
                                    i64toi32_i32$0 = 1065418752;
                                    i64toi32_i32$4 = 0;
                                    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
                                    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
                                    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                                    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                                    $2727 = i64toi32_i32$1;
                                    $2727$hi = i64toi32_i32$5;
                                    i64toi32_i32$5 = i64toi32_i32$2;
                                    i64toi32_i32$5 = i64toi32_i32$2;
                                    i64toi32_i32$2 = i64toi32_i32$3;
                                    i64toi32_i32$3 = 1082064896;
                                    i64toi32_i32$4 = 0;
                                    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
                                    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
                                    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                                    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
                                    $2729$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = $2727$hi;
                                    i64toi32_i32$5 = $2727;
                                    i64toi32_i32$2 = $2729$hi;
                                    i64toi32_i32$4 = i64toi32_i32$0;
                                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
                                      i64toi32_i32$5 = $29$hi;
                                      i64toi32_i32$4 = $29_1;
                                      i64toi32_i32$1 = 0;
                                      i64toi32_i32$2 = 25;
                                      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                                        i64toi32_i32$1 = 0;
                                        $457 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
                                      } else {
                                        i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
                                        $457 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
                                      }
                                      $5_1 = $457;
                                      i64toi32_i32$1 = $30$hi;
                                      $2735 = !($30_1 | i64toi32_i32$1 | 0);
                                      i64toi32_i32$1 = $29$hi;
                                      i64toi32_i32$5 = $29_1;
                                      i64toi32_i32$4 = 0;
                                      i64toi32_i32$2 = 33554431;
                                      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
                                      $31_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
                                      $31$hi = i64toi32_i32$4;
                                      i64toi32_i32$1 = $31_1;
                                      i64toi32_i32$5 = 0;
                                      i64toi32_i32$2 = 16777216;
                                      $2739 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                                      i64toi32_i32$1 = i64toi32_i32$4;
                                      i64toi32_i32$1 = i64toi32_i32$4;
                                      i64toi32_i32$2 = $31_1;
                                      i64toi32_i32$4 = 0;
                                      i64toi32_i32$5 = 16777216;
                                      if (!((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0 ? $2735 : $2739)) {
                                        $7_1 = $5_1 + 1073741825 | 0;
                                        break block123;
                                      }
                                      $7_1 = $5_1 + 1073741824 | 0;
                                      i64toi32_i32$2 = $30$hi;
                                      i64toi32_i32$2 = $31$hi;
                                      i64toi32_i32$5 = $31_1;
                                      i64toi32_i32$1 = 0;
                                      i64toi32_i32$4 = 16777216;
                                      i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
                                      $2750 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
                                      $2750$hi = i64toi32_i32$1;
                                      i64toi32_i32$1 = $30$hi;
                                      i64toi32_i32$2 = $30_1;
                                      i64toi32_i32$5 = $2750$hi;
                                      i64toi32_i32$4 = $2750;
                                      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
                                      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                                      i64toi32_i32$2 = 0;
                                      i64toi32_i32$4 = 0;
                                      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
                                        break block123;
                                      }
                                      $7_1 = $7_1 + ($5_1 & 1 | 0) | 0;
                                      break block123;
                                    }
                                    i64toi32_i32$1 = $30$hi;
                                    $2758 = !($30_1 | i64toi32_i32$1 | 0);
                                    i64toi32_i32$1 = $31$hi;
                                    i64toi32_i32$4 = $31_1;
                                    i64toi32_i32$5 = 2147418112;
                                    i64toi32_i32$2 = 0;
                                    $2760 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                                    i64toi32_i32$4 = i64toi32_i32$1;
                                    i64toi32_i32$2 = $31_1;
                                    i64toi32_i32$1 = 2147418112;
                                    i64toi32_i32$5 = 0;
                                    if (!((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $2758 : $2760)) {
                                      i64toi32_i32$2 = $29$hi;
                                      i64toi32_i32$5 = $29_1;
                                      i64toi32_i32$4 = 0;
                                      i64toi32_i32$1 = 25;
                                      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                                        i64toi32_i32$4 = 0;
                                        $458 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
                                      } else {
                                        i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
                                        $458 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
                                      }
                                      $7_1 = $458 & 4194303 | 0 | 2143289344 | 0;
                                      break block123;
                                    }
                                    $7_1 = 2139095040;
                                    i64toi32_i32$4 = $31$hi;
                                    i64toi32_i32$2 = $31_1;
                                    i64toi32_i32$5 = 1082064895;
                                    i64toi32_i32$1 = -1;
                                    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
                                      break block123;
                                    }
                                    $7_1 = 0;
                                    i64toi32_i32$2 = i64toi32_i32$4;
                                    i64toi32_i32$1 = $31_1;
                                    i64toi32_i32$4 = 0;
                                    i64toi32_i32$5 = 48;
                                    i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                                    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                      i64toi32_i32$4 = 0;
                                      $459 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
                                    } else {
                                      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
                                      $459 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
                                    }
                                    $5_1 = $459;
                                    if ($5_1 >>> 0 < 16145 >>> 0) {
                                      break block123;
                                    }
                                    i64toi32_i32$4 = $30$hi;
                                    i64toi32_i32$4 = $29$hi;
                                    i64toi32_i32$2 = $29_1;
                                    i64toi32_i32$1 = 65535;
                                    i64toi32_i32$5 = -1;
                                    i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
                                    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
                                    i64toi32_i32$2 = 65536;
                                    i64toi32_i32$5 = 0;
                                    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                                    $31_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                                    $31$hi = i64toi32_i32$2;
                                    i64toi32_i32$2 = $30$hi;
                                    i64toi32_i32$4 = $31$hi;
                                    $5($2_1 + 16 | 0 | 0, $30_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$4 | 0, $5_1 - 16129 | 0 | 0);
                                    i64toi32_i32$4 = i64toi32_i32$2;
                                    i64toi32_i32$4 = $31$hi;
                                    i64toi32_i32$4 = i64toi32_i32$2;
                                    i64toi32_i32$2 = $31$hi;
                                    $20($2_1 | 0, $30_1 | 0, i64toi32_i32$4 | 0, $31_1 | 0, i64toi32_i32$2 | 0, 16257 - $5_1 | 0 | 0);
                                    i64toi32_i32$1 = $2_1;
                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
                                    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                                    $30_1 = i64toi32_i32$2;
                                    $30$hi = i64toi32_i32$4;
                                    i64toi32_i32$1 = i64toi32_i32$2;
                                    i64toi32_i32$2 = 0;
                                    i64toi32_i32$5 = 25;
                                    i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                                    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                      i64toi32_i32$2 = 0;
                                      $460 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                                    } else {
                                      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                                      $460 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
                                    }
                                    $7_1 = $460;
                                    i64toi32_i32$4 = $2_1;
                                    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                                    $2797 = i64toi32_i32$2;
                                    $2797$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
                                    $2799 = i64toi32_i32$1;
                                    $2799$hi = i64toi32_i32$2;
                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
                                    $2801 = i64toi32_i32$2;
                                    $2801$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = $2799$hi;
                                    i64toi32_i32$4 = $2799;
                                    i64toi32_i32$2 = $2801$hi;
                                    i64toi32_i32$5 = $2801;
                                    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                                    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                                    i64toi32_i32$4 = 0;
                                    i64toi32_i32$5 = 0;
                                    $2803 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0;
                                    i64toi32_i32$1 = 0;
                                    $2804$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = $2797$hi;
                                    i64toi32_i32$5 = $2797;
                                    i64toi32_i32$2 = $2804$hi;
                                    i64toi32_i32$4 = $2803;
                                    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                                    $31_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                                    $31$hi = i64toi32_i32$2;
                                    $2807 = !($31_1 | i64toi32_i32$2 | 0);
                                    i64toi32_i32$2 = $30$hi;
                                    i64toi32_i32$1 = $30_1;
                                    i64toi32_i32$5 = 0;
                                    i64toi32_i32$4 = 33554431;
                                    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
                                    $30_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
                                    $30$hi = i64toi32_i32$5;
                                    i64toi32_i32$2 = $30_1;
                                    i64toi32_i32$1 = 0;
                                    i64toi32_i32$4 = 16777216;
                                    $2811 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                                    i64toi32_i32$2 = i64toi32_i32$5;
                                    i64toi32_i32$4 = $30_1;
                                    i64toi32_i32$5 = 0;
                                    i64toi32_i32$1 = 16777216;
                                    if (!((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $2807 : $2811)) {
                                      $7_1 = $7_1 + 1 | 0;
                                      break block123;
                                    }
                                    i64toi32_i32$4 = $31$hi;
                                    i64toi32_i32$4 = $30$hi;
                                    i64toi32_i32$1 = $30_1;
                                    i64toi32_i32$2 = 0;
                                    i64toi32_i32$5 = 16777216;
                                    i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
                                    $2820 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
                                    $2820$hi = i64toi32_i32$2;
                                    i64toi32_i32$2 = $31$hi;
                                    i64toi32_i32$4 = $31_1;
                                    i64toi32_i32$1 = $2820$hi;
                                    i64toi32_i32$5 = $2820;
                                    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                                    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                                    i64toi32_i32$4 = 0;
                                    i64toi32_i32$5 = 0;
                                    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
                                      break block123;
                                    }
                                    $7_1 = ($7_1 & 1 | 0) + $7_1 | 0;
                                  }
                                  global$0 = $2_1 + 32 | 0;
                                  $2829 = $15_1;
                                  $2830 = $7_1;
                                  i64toi32_i32$2 = $29$hi;
                                  i64toi32_i32$5 = $29_1;
                                  i64toi32_i32$1 = 0;
                                  i64toi32_i32$4 = 32;
                                  i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
                                  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                                    i64toi32_i32$1 = 0;
                                    $461 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
                                  } else {
                                    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
                                    $461 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
                                  }
                                  HEAP32[$2829 >> 2] = $2830 | ($461 & -2147483648 | 0) | 0;
                                  break block24;
                                case 1:
                                  i64toi32_i32$1 = $30$hi;
                                  i64toi32_i32$1 = $29$hi;
                                  i64toi32_i32$1 = $30$hi;
                                  i64toi32_i32$5 = $29$hi;
                                  HEAPF64[$15_1 >> 3] = +$39($30_1 | 0, i64toi32_i32$1 | 0, $29_1 | 0, i64toi32_i32$5 | 0);
                                  break block24;
                                case 2:
                                  break block122;
                                default:
                                  break block24;
                              }
                            }
                            i64toi32_i32$5 = $30$hi;
                            i64toi32_i32$1 = $15_1;
                            HEAP32[i64toi32_i32$1 >> 2] = $30_1;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
                            i64toi32_i32$5 = $29$hi;
                            HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $29_1;
                            HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
                            break block24;
                          }
                          $12_1 = ($4_1 | 0) == (99 | 0);
                          $6_1 = $12_1 ? $5_1 + 1 | 0 : 31;
                          block131: {
                            if (($9_1 | 0) == (1 | 0)) {
                              $2_1 = $15_1;
                              if ($19_1) {
                                $2_1 = $14($6_1 << 2 | 0 | 0) | 0;
                                if (!$2_1) {
                                  break block124;
                                }
                              }
                              i64toi32_i32$1 = $11_1;
                              i64toi32_i32$5 = 0;
                              HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = 0;
                              HEAP32[(i64toi32_i32$1 + 300 | 0) >> 2] = i64toi32_i32$5;
                              $5_1 = 0;
                              label41: while (1) {
                                $0_1 = $2_1;
                                block126: {
                                  label40: while (1) {
                                    block125: {
                                      $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                      if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                        HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                        $2872 = HEAPU8[$2_1 >> 0] | 0;
                                        break block125;
                                      }
                                      $2872 = $0($3_1 | 0) | 0;
                                    }
                                    $2_1 = $2872;
                                    if (!(HEAPU8[(($2_1 + $11_1 | 0) + 33 | 0) >> 0] | 0)) {
                                      break block126;
                                    }
                                    HEAP8[($11_1 + 27 | 0) >> 0] = $2_1;
                                    $9_1 = $11_1 + 28 | 0;
                                    $16_1 = 0;
                                    $10_1 = global$0 - 16 | 0;
                                    global$0 = $10_1;
                                    $2_1 = $11_1 + 296 | 0;
                                    $18_1 = $2_1 ? $2_1 : 5240;
                                    $2_1 = HEAP32[$18_1 >> 2] | 0;
                                    block128: {
                                      block130: {
                                        block127: {
                                          $7_1 = $11_1 + 27 | 0;
                                          if (!$7_1) {
                                            if ($2_1) {
                                              break block127;
                                            }
                                            break block128;
                                          }
                                          $16_1 = -2;
                                          $8_1 = $9_1 ? $9_1 : $10_1 + 12 | 0;
                                          block129: {
                                            if ($2_1) {
                                              $9_1 = 1;
                                              break block129;
                                            }
                                            $2_1 = HEAPU8[$7_1 >> 0] | 0;
                                            $9_1 = ($2_1 << 24 | 0) >> 24 | 0;
                                            if (($9_1 | 0) >= (0 | 0)) {
                                              HEAP32[$8_1 >> 2] = $2_1;
                                              $16_1 = ($9_1 | 0) != (0 | 0);
                                              break block128;
                                            }
                                            $2_1 = HEAP8[$7_1 >> 0] | 0;
                                            if (!(HEAP32[(HEAP32[5216 >> 2] | 0) >> 2] | 0)) {
                                              HEAP32[$8_1 >> 2] = $2_1 & 57343 | 0;
                                              $16_1 = 1;
                                              break block128;
                                            }
                                            $2_1 = ($2_1 & 255 | 0) - 194 | 0;
                                            if ($2_1 >>> 0 > 50 >>> 0) {
                                              break block127;
                                            }
                                            $2_1 = HEAP32[(($2_1 << 2 | 0) + 3200 | 0) >> 2] | 0;
                                            $9_1 = 0;
                                            if (!$9_1) {
                                              break block130;
                                            }
                                            $7_1 = $7_1 + 1 | 0;
                                          }
                                          $14_1 = HEAPU8[$7_1 >> 0] | 0;
                                          $13_1 = $14_1 >>> 3 | 0;
                                          if (($13_1 - 16 | 0 | (($2_1 >> 26 | 0) + $13_1 | 0) | 0) >>> 0 > 7 >>> 0) {
                                            break block127;
                                          }
                                          label39: while (1) {
                                            $9_1 = $9_1 - 1 | 0;
                                            $2_1 = $14_1 - 128 | 0 | ($2_1 << 6 | 0) | 0;
                                            if (($2_1 | 0) >= (0 | 0)) {
                                              HEAP32[$18_1 >> 2] = 0;
                                              HEAP32[$8_1 >> 2] = $2_1;
                                              $16_1 = 1 - $9_1 | 0;
                                              break block128;
                                            }
                                            if (!$9_1) {
                                              break block130;
                                            }
                                            $7_1 = $7_1 + 1 | 0;
                                            $14_1 = HEAPU8[$7_1 >> 0] | 0;
                                            if (($14_1 & 192 | 0 | 0) == (128 | 0)) {
                                              continue label39;
                                            }
                                            break label39;
                                          }
                                        }
                                        HEAP32[$18_1 >> 2] = 0;
                                        HEAP32[5060 >> 2] = 25;
                                        $16_1 = -1;
                                        break block128;
                                      }
                                      HEAP32[$18_1 >> 2] = $2_1;
                                    }
                                    global$0 = $10_1 + 16 | 0;
                                    $2_1 = $16_1;
                                    if (($2_1 | 0) == (-2 | 0)) {
                                      continue label40;
                                    }
                                    $16_1 = 0;
                                    if (($2_1 | 0) == (-1 | 0)) {
                                      break block22;
                                    }
                                    if ($0_1) {
                                      HEAP32[($0_1 + ($5_1 << 2 | 0) | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
                                      $5_1 = $5_1 + 1 | 0;
                                    }
                                    if (!($19_1 & ($5_1 | 0) == ($6_1 | 0) | 0)) {
                                      continue label40;
                                    }
                                    break label40;
                                  }
                                  $7_1 = 1;
                                  $6_1 = $6_1 << 1 | 0 | 1 | 0;
                                  $2_1 = $44($0_1 | 0, $6_1 << 2 | 0 | 0) | 0;
                                  if ($2_1) {
                                    continue label41;
                                  }
                                  break block12;
                                }
                                break label41;
                              }
                              $16_1 = 0;
                              $6_1 = $0_1;
                              if ($11_1 + 296 | 0) {
                                $3011 = HEAP32[($11_1 + 296 | 0) >> 2] | 0;
                              } else {
                                $3011 = 0;
                              }
                              if ($3011) {
                                break block22;
                              }
                              break block131;
                            }
                            if ($19_1) {
                              $5_1 = 0;
                              $2_1 = $14($6_1 | 0) | 0;
                              if (!$2_1) {
                                break block124;
                              }
                              label43: while (1) {
                                $0_1 = $2_1;
                                label42: while (1) {
                                  block132: {
                                    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                    if (($2_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                                      $3030 = HEAPU8[$2_1 >> 0] | 0;
                                      break block132;
                                    }
                                    $3030 = $0($3_1 | 0) | 0;
                                  }
                                  $2_1 = $3030;
                                  if (!(HEAPU8[(($2_1 + $11_1 | 0) + 33 | 0) >> 0] | 0)) {
                                    $6_1 = 0;
                                    $16_1 = $0_1;
                                    break block131;
                                  }
                                  HEAP8[($0_1 + $5_1 | 0) >> 0] = $2_1;
                                  $5_1 = $5_1 + 1 | 0;
                                  if (($5_1 | 0) != ($6_1 | 0)) {
                                    continue label42;
                                  }
                                  break label42;
                                }
                                $7_1 = 1;
                                $6_1 = $6_1 << 1 | 0 | 1 | 0;
                                $2_1 = $44($0_1 | 0, $6_1 | 0) | 0;
                                if ($2_1) {
                                  continue label43;
                                }
                                break label43;
                              }
                              $16_1 = $0_1;
                              $0_1 = 0;
                              break block12;
                            }
                            $5_1 = 0;
                            if ($15_1) {
                              label44: while (1) {
                                block133: {
                                  $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                  if (($0_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                    HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 + 1 | 0;
                                    $3069 = HEAPU8[$0_1 >> 0] | 0;
                                    break block133;
                                  }
                                  $3069 = $0($3_1 | 0) | 0;
                                }
                                $0_1 = $3069;
                                if (HEAPU8[(($0_1 + $11_1 | 0) + 33 | 0) >> 0] | 0) {
                                  HEAP8[($5_1 + $15_1 | 0) >> 0] = $0_1;
                                  $5_1 = $5_1 + 1 | 0;
                                  continue label44;
                                } else {
                                  $6_1 = 0;
                                  $0_1 = $15_1;
                                  $16_1 = $0_1;
                                  break block131;
                                }
                              }
                            }
                            label45: while (1) {
                              block134: {
                                $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                                if (($0_1 | 0) != (HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0)) {
                                  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 + 1 | 0;
                                  $3096 = HEAPU8[$0_1 >> 0] | 0;
                                  break block134;
                                }
                                $3096 = $0($3_1 | 0) | 0;
                              }
                              if (HEAPU8[(($3096 + $11_1 | 0) + 33 | 0) >> 0] | 0) {
                                continue label45;
                              }
                              break label45;
                            }
                            $0_1 = 0;
                            $16_1 = 0;
                            $6_1 = 0;
                          }
                          $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                          i64toi32_i32$2 = $3_1;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
                          i64toi32_i32$2 = i64toi32_i32$5;
                          i64toi32_i32$5 = 0;
                          i64toi32_i32$4 = 0;
                          if ((i64toi32_i32$1 | 0) > (i64toi32_i32$5 | 0)) {
                            $462 = 1;
                          } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$5 | 0)) {
                              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                                $463 = 0;
                              } else {
                                $463 = 1;
                              }
                              $464 = $463;
                            } else {
                              $464 = 0;
                            }
                            $462 = $464;
                          }
                          if ($462) {
                            $2_1 = $2_1 - 1 | 0;
                            HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
                          }
                          i64toi32_i32$4 = $3_1;
                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 120 | 0) >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 124 | 0) >> 2] | 0;
                          $3113 = i64toi32_i32$2;
                          $3113$hi = i64toi32_i32$1;
                          i64toi32_i32$2 = $2_1 - (HEAP32[(i64toi32_i32$4 + 44 | 0) >> 2] | 0) | 0;
                          i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
                          $3118 = i64toi32_i32$2;
                          $3118$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = $3113$hi;
                          i64toi32_i32$4 = $3113;
                          i64toi32_i32$2 = $3118$hi;
                          i64toi32_i32$5 = $3118;
                          i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                          i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                          }
                          $30_1 = i64toi32_i32$3;
                          $30$hi = i64toi32_i32$0;
                          if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0)) {
                            break block135;
                          }
                          i64toi32_i32$0 = $29$hi;
                          i64toi32_i32$0 = $30$hi;
                          i64toi32_i32$0 = $29$hi;
                          i64toi32_i32$1 = $29_1;
                          i64toi32_i32$4 = $30$hi;
                          i64toi32_i32$5 = i64toi32_i32$3;
                          if (($4_1 | 0) == (99 | 0) & ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) | 0) {
                            break block135;
                          }
                          if ($19_1) {
                            HEAP32[$15_1 >> 2] = $0_1;
                          }
                          block136: {
                            if ($12_1) {
                              break block136;
                            }
                            if ($6_1) {
                              HEAP32[($6_1 + ($5_1 << 2 | 0) | 0) >> 2] = 0;
                            }
                            if (!$16_1) {
                              $16_1 = 0;
                              break block136;
                            }
                            HEAP8[($5_1 + $16_1 | 0) >> 0] = 0;
                          }
                          $0_1 = $6_1;
                        }
                        i64toi32_i32$0 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - (HEAP32[($3_1 + 44 | 0) >> 2] | 0) | 0;
                        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                        $3148 = i64toi32_i32$0;
                        $3148$hi = i64toi32_i32$1;
                        i64toi32_i32$5 = $3_1;
                        i64toi32_i32$1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
                        $3150$hi = i64toi32_i32$0;
                        i64toi32_i32$0 = $35$hi;
                        i64toi32_i32$0 = $3150$hi;
                        i64toi32_i32$5 = i64toi32_i32$1;
                        i64toi32_i32$1 = $35$hi;
                        i64toi32_i32$4 = $35_1;
                        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                        }
                        $3152$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $3148$hi;
                        i64toi32_i32$0 = $3148;
                        i64toi32_i32$5 = $3152$hi;
                        i64toi32_i32$4 = i64toi32_i32$2;
                        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
                          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                        }
                        $35_1 = i64toi32_i32$1;
                        $35$hi = i64toi32_i32$2;
                        $24_1 = $24_1 + (($15_1 | 0) != (0 | 0)) | 0;
                      }
                      $5_1 = $1_1 + 1 | 0;
                      $1_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                      if ($1_1) {
                        continue label46;
                      }
                      break block2;
                    }
                    break label46;
                  }
                  $0_1 = $6_1;
                  break block92;
                }
                $7_1 = 1;
                $16_1 = 0;
                $0_1 = 0;
                break block12;
              }
              $7_1 = $19_1;
              break block137;
            }
            $7_1 = $19_1;
          }
          if ($24_1) {
            break block137;
          }
        }
        $24_1 = -1;
      }
      if (!$7_1) {
        break block2;
      }
      $8($16_1 | 0);
      $8($0_1 | 0);
    }
    global$0 = $11_1 + 304 | 0;
    global$0 = $3_1 + 144 | 0;
    global$0 = $27_1 + 16 | 0;
    return $24_1 | 0;
  }
  function $61($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $4_1 = 0;
    $4_1 = global$0 - 16 | 0;
    global$0 = $4_1;
    HEAP8[($4_1 + 15 | 0) >> 0] = 1;
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($0_1 + 32 | 0) >> 0] = $2_1;
    $3_1 = $0_1 - -64 | 0;
    HEAP8[$3_1 >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 33 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 65 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($0_1 + 34 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 66 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    HEAP8[($0_1 + 35 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 67 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
    HEAP8[($0_1 + 36 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 68 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
    HEAP8[($0_1 + 37 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 69 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
    HEAP8[($0_1 + 38 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 70 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
    HEAP8[($0_1 + 39 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 71 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    HEAP8[($0_1 + 40 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 72 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
    HEAP8[($0_1 + 41 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 73 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
    HEAP8[($0_1 + 42 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 74 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
    HEAP8[($0_1 + 43 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 75 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
    HEAP8[($0_1 + 44 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 76 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
    HEAP8[($0_1 + 45 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 77 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
    HEAP8[($0_1 + 46 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 78 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
    HEAP8[($0_1 + 47 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 79 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 16 | 0) >> 0] | 0;
    HEAP8[($0_1 + 48 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 80 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 17 | 0) >> 0] | 0;
    HEAP8[($0_1 + 49 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 81 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 18 | 0) >> 0] | 0;
    HEAP8[($0_1 + 50 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 82 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
    HEAP8[($0_1 + 51 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 83 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 20 | 0) >> 0] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 84 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 21 | 0) >> 0] | 0;
    HEAP8[($0_1 + 53 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 85 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 22 | 0) >> 0] | 0;
    HEAP8[($0_1 + 54 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 86 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 23 | 0) >> 0] | 0;
    HEAP8[($0_1 + 55 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 87 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 24 | 0) >> 0] | 0;
    HEAP8[($0_1 + 56 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 88 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
    HEAP8[($0_1 + 57 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 89 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 26 | 0) >> 0] | 0;
    HEAP8[($0_1 + 58 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 90 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 27 | 0) >> 0] | 0;
    HEAP8[($0_1 + 59 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 91 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 28 | 0) >> 0] | 0;
    HEAP8[($0_1 + 60 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 92 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 29 | 0) >> 0] | 0;
    HEAP8[($0_1 + 61 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 93 | 0) >> 0] = $2_1;
    $2_1 = HEAPU8[($1_1 + 30 | 0) >> 0] | 0;
    HEAP8[($0_1 + 62 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 94 | 0) >> 0] = $2_1;
    $1_1 = HEAPU8[($1_1 + 31 | 0) >> 0] | 0;
    HEAP8[($0_1 + 63 | 0) >> 0] = $1_1;
    HEAP8[($0_1 + 95 | 0) >> 0] = $1_1;
    $0_1 = $4_1 + 15 | 0;
    $19($3_1 | 0, $0_1 | 0);
    $19($3_1 | 0, $0_1 | 0);
    $19($3_1 | 0, $0_1 | 0);
    $19($3_1 | 0, $0_1 | 0);
    $19($3_1 | 0, $0_1 | 0);
    $19($3_1 | 0, $0_1 | 0);
    $19($3_1 | 0, $0_1 | 0);
    global$0 = $4_1 + 16 | 0;
  }
  function $62($0_1) {
    $0_1 = $0_1 | 0;
    var $2_1 = 0,
      $1_1 = 0,
      $4_1 = 0,
      $3_1 = 0,
      $7_1 = 0,
      $5_1 = 0,
      $6_1 = 0,
      $8_1 = 0,
      $9_1 = 0,
      $29_1 = 0,
      $34_1 = 0,
      $83 = 0,
      $143 = 0,
      $176 = 0,
      $182 = 0,
      $227 = 0,
      $323 = 0,
      $329 = 0,
      $374 = 0,
      $470 = 0,
      $475 = 0,
      $524 = 0,
      $583 = 0;
    $1_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
    $6_1 = HEAPU8[$0_1 >> 0] | 0;
    $5_1 = $1_1 ^ $6_1 | 0;
    $3_1 = $5_1 << 1 | 0;
    $29_1 = ((($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $3_1 ^ 27 | 0 : $3_1) ^ $1_1 | 0;
    $5_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $34_1 = $1_1 ^ $5_1 | 0;
    $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
    $4_1 = $1_1 ^ $3_1 | 0;
    $9_1 = $5_1 ^ $6_1 | 0;
    $1_1 = $4_1 ^ $9_1 | 0;
    $2_1 = $1_1 << 1 | 0;
    $2_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $7_1 = $34_1 ^ $2_1 | 0;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = (($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1) ^ $1_1 | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $29_1 ^ $7_1 | 0;
    $83 = $1_1;
    $1_1 = ($3_1 ^ $6_1 | 0) ^ $2_1 | 0;
    $2_1 = $1_1 << 1 | 0;
    $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $2_1 = $1_1 << 1 | 0;
    $1_1 = $83 ^ ((($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0;
    $2_1 = $4_1 << 1 | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 ^ ($3_1 ^ ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0) | 0;
    $3_1 = $3_1 ^ $5_1 | 0;
    $4_1 = $3_1 << 1 | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = ($5_1 ^ ((($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $4_1 ^ 27 | 0 : $4_1) | 0) ^ $7_1 | 0;
    $143 = $1_1;
    $1_1 = $9_1 << 1 | 0;
    HEAP8[$0_1 >> 0] = $143 ^ ($6_1 ^ ((($9_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1) | 0) | 0;
    $1_1 = HEAPU8[($0_1 + 5 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
    $3_1 = $1_1 ^ $6_1 | 0;
    $5_1 = $3_1 << 1 | 0;
    $176 = ((($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1) ^ $6_1 | 0;
    $5_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
    $182 = $3_1;
    $3_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
    $9_1 = $3_1 ^ $5_1 | 0;
    $4_1 = $182 ^ $9_1 | 0;
    $2_1 = $4_1 << 1 | 0;
    $2_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $7_1 = ($5_1 ^ $6_1 | 0) ^ $2_1 | 0;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = (($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1) ^ $4_1 | 0;
    HEAP8[($0_1 + 4 | 0) >> 0] = $176 ^ $7_1 | 0;
    $227 = $4_1;
    $4_1 = ($1_1 ^ $3_1 | 0) ^ $2_1 | 0;
    $2_1 = $4_1 << 1 | 0;
    $4_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $2_1 = $4_1 << 1 | 0;
    $4_1 = $227 ^ ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0;
    $2_1 = $1_1 ^ $5_1 | 0;
    $8_1 = $2_1 << 1 | 0;
    HEAP8[($0_1 + 5 | 0) >> 0] = $4_1 ^ ($1_1 ^ ((($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1) | 0) | 0;
    $1_1 = $9_1 << 1 | 0;
    HEAP8[($0_1 + 6 | 0) >> 0] = ($5_1 ^ ((($9_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1) | 0) ^ $7_1 | 0;
    $1_1 = $3_1 ^ $6_1 | 0;
    $6_1 = $1_1 << 1 | 0;
    HEAP8[($0_1 + 7 | 0) >> 0] = ($3_1 ^ ((($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 27 | 0 : $6_1) | 0) ^ $4_1 | 0;
    $1_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
    $3_1 = $1_1 ^ $6_1 | 0;
    $5_1 = $3_1 << 1 | 0;
    $323 = ((($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1) ^ $6_1 | 0;
    $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
    $329 = $3_1;
    $3_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
    $9_1 = $3_1 ^ $5_1 | 0;
    $4_1 = $329 ^ $9_1 | 0;
    $2_1 = $4_1 << 1 | 0;
    $2_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $7_1 = ($5_1 ^ $6_1 | 0) ^ $2_1 | 0;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = (($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1) ^ $4_1 | 0;
    HEAP8[($0_1 + 8 | 0) >> 0] = $323 ^ $7_1 | 0;
    $374 = $4_1;
    $4_1 = ($1_1 ^ $3_1 | 0) ^ $2_1 | 0;
    $2_1 = $4_1 << 1 | 0;
    $4_1 = (($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $2_1 = $4_1 << 1 | 0;
    $4_1 = $374 ^ ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0;
    $6_1 = $3_1 ^ $6_1 | 0;
    $2_1 = $6_1 << 1 | 0;
    HEAP8[($0_1 + 11 | 0) >> 0] = $4_1 ^ ($3_1 ^ ((($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0) | 0;
    $6_1 = $9_1 << 1 | 0;
    HEAP8[($0_1 + 10 | 0) >> 0] = ($5_1 ^ ((($9_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 27 | 0 : $6_1) | 0) ^ $7_1 | 0;
    $6_1 = $1_1 ^ $5_1 | 0;
    $5_1 = $6_1 << 1 | 0;
    HEAP8[($0_1 + 9 | 0) >> 0] = ($1_1 ^ ((($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1) | 0) ^ $4_1 | 0;
    $1_1 = HEAPU8[($0_1 + 15 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
    $5_1 = $1_1 ^ $6_1 | 0;
    $3_1 = $5_1 << 1 | 0;
    $470 = ((($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $3_1 ^ 27 | 0 : $3_1) ^ $1_1 | 0;
    $5_1 = HEAPU8[($0_1 + 13 | 0) >> 0] | 0;
    $475 = $1_1 ^ $5_1 | 0;
    $3_1 = HEAPU8[($0_1 + 14 | 0) >> 0] | 0;
    $4_1 = $1_1 ^ $3_1 | 0;
    $9_1 = $5_1 ^ $6_1 | 0;
    $1_1 = $4_1 ^ $9_1 | 0;
    $2_1 = $1_1 << 1 | 0;
    $2_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $7_1 = $475 ^ $2_1 | 0;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = (($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
    $8_1 = $7_1 << 1 | 0;
    $7_1 = ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1) ^ $1_1 | 0;
    HEAP8[($0_1 + 15 | 0) >> 0] = $470 ^ $7_1 | 0;
    $524 = $1_1;
    $1_1 = ($3_1 ^ $6_1 | 0) ^ $2_1 | 0;
    $2_1 = $1_1 << 1 | 0;
    $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1;
    $2_1 = $1_1 << 1 | 0;
    $1_1 = $524 ^ ((($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0;
    $2_1 = $4_1 << 1 | 0;
    HEAP8[($0_1 + 14 | 0) >> 0] = $1_1 ^ ($3_1 ^ ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $2_1 ^ 27 | 0 : $2_1) | 0) | 0;
    $3_1 = $3_1 ^ $5_1 | 0;
    $4_1 = $3_1 << 1 | 0;
    HEAP8[($0_1 + 13 | 0) >> 0] = ($5_1 ^ ((($3_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $4_1 ^ 27 | 0 : $4_1) | 0) ^ $7_1 | 0;
    $583 = $0_1;
    $0_1 = $9_1 << 1 | 0;
    HEAP8[($583 + 12 | 0) >> 0] = ($6_1 ^ ((($9_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $0_1 ^ 27 | 0 : $0_1) | 0) ^ $1_1 | 0;
  }
  function $63($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $3_1 = 0,
      $4_1 = 0,
      $11_1 = 0,
      $5_1 = 0;
    block: {
      $5_1 = $0_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 3;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $11_1 = 0;
      } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $11_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!($28($5_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0)) {
        break block;
      }
      $1_1 = $2($2_1 | 0) | 0;
      i64toi32_i32$2 = 0;
      if (!($28($0_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0)) {
        break block;
      }
      block1: {
        if (!$2_1) {
          break block1;
        }
        if (!$1_1) {
          break block1;
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        $4_1 = $3_1 + $1_1 | 0;
        if ($4_1 >>> 0 < $3_1 >>> 0) {
          break block;
        }
        if ($4_1 >>> 0 > (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
          break block;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
        $7((HEAP32[$0_1 >> 2] | 0) + $3_1 | 0 | 0, $2_1 | 0, $1_1 | 0) | 0;
      }
    }
  }
  function $64() {
    var $0_1 = 0,
      i64toi32_i32$0 = 0,
      $2_1 = 0;
    $0_1 = global$0 - 48 | 0;
    global$0 = $0_1;
    $2_1 = 0;
    HEAP8[($0_1 + 31 | 0) >> 0] = $2_1;
    HEAP8[($0_1 + 32 | 0) >> 0] = $2_1 >>> 8 | 0;
    HEAP8[($0_1 + 33 | 0) >> 0] = $2_1 >>> 16 | 0;
    HEAP8[($0_1 + 34 | 0) >> 0] = $2_1 >>> 24 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $38($0_1 | 0);
    global$0 = $0_1 + 48 | 0;
    return 0 | 0;
  }
  function $65($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      $4_1 = 0,
      $5_1 = 0;
    $5_1 = $1_1;
    $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    $3_1 = $2_1 + 256 | 0;
    $4_1 = $58($1_1 | 0, $3_1 | 0) | 0;
    $3_1 = $4_1 ? $4_1 - $1_1 | 0 : $3_1;
    $2_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $2_1;
    $7($5_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $3_1 = $1_1 + $3_1 | 0;
    HEAP32[($0_1 + 84 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + $2_1 | 0;
    return $2_1 | 0;
  }
  function $66($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $4_1 = 0,
      $3_1 = 0,
      $5_1 = 0,
      $6_1 = 0;
    $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $4_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
    $4_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $4_1;
    if ($4_1) {
      $7(HEAP32[$3_1 >> 2] | 0 | 0, $6_1 | 0, $4_1 | 0) | 0;
      HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $4_1 | 0;
      $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $4_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
    }
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $2_1;
    if ($5_1) {
      $7($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
      $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
      HEAP32[$3_1 >> 2] = $4_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
    }
    HEAP8[$4_1 >> 0] = 0;
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    return $2_1 | 0;
  }
  function $67($0_1, $1_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    var $2_1 = 0,
      $3_1 = 0,
      $5_1 = 0,
      $9_1 = 0,
      $7_1 = 0,
      $6_1 = 0,
      $8_1 = 0,
      $4_1 = 0,
      $10_1 = 0,
      $13_1 = 0,
      $11_1 = 0,
      $14_1 = 0,
      $12_1 = 0,
      i64toi32_i32$2 = 0,
      $18_1 = 0,
      $19_1 = 0,
      $15_1 = 0,
      $21_1 = 0,
      $24_1 = 0,
      $17_1 = 0,
      $22_1 = 0,
      $23_1 = 0,
      $20_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      $16_1 = 0,
      $26_1 = 0,
      $27_1 = 0,
      $28_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $31_1 = 0,
      $25_1 = 0,
      $32_1 = 0,
      $33_1 = 0,
      $41_1 = 0,
      $42_1 = 0,
      $88 = 0,
      $89 = 0,
      $90 = 0,
      $91 = 0,
      $40_1 = 0,
      $34_1 = 0,
      $35_1 = 0,
      $36_1 = 0,
      $37_1 = 0,
      $38_1 = 0,
      $39_1 = 0,
      $195 = 0,
      $43_1 = 0,
      $60_1 = 0,
      $73 = 0,
      $74 = 0,
      $45_1 = 0,
      $46_1 = 0,
      $47_1 = 0,
      $48_1 = 0,
      $49_1 = 0,
      $50_1 = 0,
      $51_1 = 0,
      $52_1 = 0,
      $53_1 = 0,
      $54_1 = 0,
      $55_1 = 0,
      $56_1 = 0,
      $57_1 = 0,
      $92 = 0,
      $839 = 0,
      $1170 = 0,
      $1487 = 0,
      $58_1 = 0,
      $59_1 = 0,
      $73$hi = 0,
      $519 = 0,
      $523 = 0,
      $1171 = 0,
      $61_1 = 0,
      $62_1 = 0,
      $63_1 = 0,
      $64_1 = 0,
      $65_1 = 0,
      $66_1 = 0,
      $67_1 = 0,
      $68_1 = 0,
      $69_1 = 0,
      $70_1 = 0,
      $71_1 = 0,
      $72_1 = 0,
      $44_1 = 0,
      $1808 = 0,
      $1811 = 0;
    $25_1 = global$0 - 112 | 0;
    global$0 = $25_1;
    block2: {
      block1: {
        block: {
          if (!$0_1) {
            break block;
          }
          if (!$1_1) {
            break block;
          }
          if (($2($0_1 | 0) | 0 | 0) != (48 | 0)) {
            break block;
          }
          if (HEAPU8[$1_1 >> 0] | 0) {
            break block1;
          }
        }
        $0_1 = $14(4 | 0) | 0;
        HEAP32[$0_1 >> 2] = 1;
        break block2;
      }
      HEAP32[($25_1 + 108 | 0) >> 2] = 0;
      $4_1 = $1_1;
      $12_1 = $2($1_1 | 0) | 0;
      $1_1 = 0;
      if (!(HEAPU8[5056 >> 0] | 0)) {
        label: while (1) {
          HEAP8[((HEAP8[($1_1 + 1792 | 0) >> 0] | 0) + 4800 | 0) >> 0] = $1_1;
          $3_1 = $1_1 | 1 | 0;
          HEAP8[((HEAP8[($3_1 + 1792 | 0) >> 0] | 0) + 4800 | 0) >> 0] = $3_1;
          $3_1 = $1_1 | 2 | 0;
          HEAP8[((HEAP8[($3_1 + 1792 | 0) >> 0] | 0) + 4800 | 0) >> 0] = $3_1;
          $3_1 = $1_1 | 3 | 0;
          HEAP8[((HEAP8[($3_1 + 1792 | 0) >> 0] | 0) + 4800 | 0) >> 0] = $3_1;
          $1_1 = $1_1 + 4 | 0;
          if (($1_1 | 0) != (64 | 0)) {
            continue label;
          }
          break label;
        }
        HEAP8[5056 >> 0] = 1;
        HEAP8[4861 >> 0] = 0;
      }
      $1_1 = 0;
      block3: {
        if ($12_1 & 3 | 0) {
          break block3;
        }
        $11_1 = Math_imul($12_1 >>> 2 | 0, 3);
        HEAP32[($25_1 + 108 | 0) >> 2] = $11_1;
        $3_1 = $4_1 + $12_1 | 0;
        if ((HEAPU8[($3_1 - 1 | 0) >> 0] | 0 | 0) == (61 | 0)) {
          $11_1 = $11_1 - 1 | 0;
          HEAP32[($25_1 + 108 | 0) >> 2] = $11_1;
        }
        if ((HEAPU8[($3_1 - 2 | 0) >> 0] | 0 | 0) == (61 | 0)) {
          $11_1 = $11_1 - 1 | 0;
          HEAP32[($25_1 + 108 | 0) >> 2] = $11_1;
        }
        $3_1 = $14($11_1 | 0) | 0;
        if (!$3_1) {
          break block3;
        }
        if ($12_1) {
          label1: while (1) {
            $7_1 = 0;
            $16_1 = 0;
            $8_1 = HEAP8[($4_1 + $6_1 | 0) >> 0] | 0;
            if (($8_1 | 0) != (61 | 0)) {
              $16_1 = HEAPU8[($8_1 + 4800 | 0) >> 0] | 0;
            }
            $8_1 = HEAP8[($4_1 + ($6_1 | 1 | 0) | 0) >> 0] | 0;
            if (($8_1 | 0) != (61 | 0)) {
              $7_1 = HEAPU8[($8_1 + 4800 | 0) >> 0] | 0;
            }
            $8_1 = 0;
            $20_1 = HEAP8[($4_1 + ($6_1 | 2 | 0) | 0) >> 0] | 0;
            if (($20_1 | 0) != (61 | 0)) {
              $8_1 = HEAPU8[($20_1 + 4800 | 0) >> 0] | 0;
            }
            $20_1 = HEAP8[($4_1 + ($6_1 | 3 | 0) | 0) >> 0] | 0;
            if (($20_1 | 0) != (61 | 0)) {
              $195 = HEAPU8[($20_1 + 4800 | 0) >> 0] | 0;
            } else {
              $195 = 0;
            }
            $7_1 = $195 + ((($7_1 << 12 | 0) + ($16_1 << 18 | 0) | 0) + ($8_1 << 6 | 0) | 0) | 0;
            $6_1 = $6_1 + 4 | 0;
            if ($1_1 >>> 0 < $11_1 >>> 0) {
              HEAP8[($1_1 + $3_1 | 0) >> 0] = $7_1 >>> 16 | 0;
              $1_1 = $1_1 + 1 | 0;
            }
            if ($1_1 >>> 0 < $11_1 >>> 0) {
              HEAP8[($1_1 + $3_1 | 0) >> 0] = $7_1 >>> 8 | 0;
              $1_1 = $1_1 + 1 | 0;
            }
            if ($1_1 >>> 0 < $11_1 >>> 0) {
              HEAP8[($1_1 + $3_1 | 0) >> 0] = $7_1;
              $1_1 = $1_1 + 1 | 0;
            }
            if ($6_1 >>> 0 < $12_1 >>> 0) {
              continue label1;
            }
            break label1;
          }
        }
        $1_1 = $3_1;
      }
      block4: {
        $4_1 = $1_1;
        if ($1_1) {
          if (HEAP32[($25_1 + 108 | 0) >> 2] | 0) {
            break block4;
          }
        }
        $0_1 = $14(4 | 0) | 0;
        HEAP32[$0_1 >> 2] = 4;
        break block2;
      }
      $1_1 = $25_1 + 8 | 0;
      $61($1_1 | 0, $0_1 | 0);
      $43_1 = $4_1;
      $3_1 = HEAP32[($25_1 + 108 | 0) >> 2] | 0;
      $33_1 = $3_1;
      $4_1 = $0_1;
      $0_1 = $42($3_1 + 8 | 0 | 0) | 0;
      $58_1 = $0_1 + 8 | 0;
      $3_1 = 0;
      $11_1 = 0;
      $6_1 = 0;
      $12_1 = 0;
      $7_1 = 0;
      $16_1 = 0;
      $8_1 = 0;
      $20_1 = 0;
      $2_1 = global$0 - 32 | 0;
      global$0 = $2_1;
      if ($33_1 >>> 0 >= 16 >>> 0) {
        $59_1 = $33_1 >>> 4 | 0;
        label4: while (1) {
          $60_1 = $15_1 << 4 | 0;
          $33_1 = $43_1 + $60_1 | 0;
          i64toi32_i32$2 = $33_1;
          i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $73 = i64toi32_i32$0;
          $73$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $2_1;
          HEAP32[$2_1 >> 2] = $73;
          HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 9 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 10 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 11 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 12 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 13 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 14 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 15 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $74 = i64toi32_i32$1;
          i64toi32_i32$1 = $2_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $74;
          HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          $33_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
          $45_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
          $46_1 = HEAPU8[($2_1 + 3 | 0) >> 0] | 0;
          $47_1 = HEAPU8[($2_1 + 6 | 0) >> 0] | 0;
          $48_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
          $49_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
          $50_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
          $51_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
          $52_1 = HEAPU8[($2_1 + 12 | 0) >> 0] | 0;
          $53_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
          $54_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
          $55_1 = HEAPU8[($2_1 + 14 | 0) >> 0] | 0;
          $56_1 = HEAPU8[($2_1 + 10 | 0) >> 0] | 0;
          $57_1 = HEAPU8[($2_1 + 13 | 0) >> 0] | 0;
          $41_1 = HEAPU8[($1_1 + 79 | 0) >> 0] | 0;
          HEAP8[($1_1 + 15 | 0) >> 0] = $41_1;
          $42_1 = HEAPU8[($1_1 + 75 | 0) >> 0] | 0;
          HEAP8[($1_1 + 11 | 0) >> 0] = $42_1;
          $15_1 = HEAPU8[($1_1 + 74 | 0) >> 0] | 0;
          HEAP8[($1_1 + 10 | 0) >> 0] = $15_1;
          $21_1 = HEAPU8[($1_1 + 76 | 0) >> 0] | 0;
          HEAP8[($1_1 + 12 | 0) >> 0] = $21_1;
          $5_1 = HEAPU8[($1_1 + 77 | 0) >> 0] | 0;
          HEAP8[($1_1 + 13 | 0) >> 0] = $5_1;
          $88 = HEAPU8[($1_1 + 91 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 92 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 93 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 94 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          HEAP8[($1_1 + 27 | 0) >> 0] = $88;
          HEAP8[($1_1 + 28 | 0) >> 0] = $88 >>> 8 | 0;
          HEAP8[($1_1 + 29 | 0) >> 0] = $88 >>> 16 | 0;
          HEAP8[($1_1 + 30 | 0) >> 0] = $88 >>> 24 | 0;
          HEAP8[($1_1 + 26 | 0) >> 0] = HEAPU8[($1_1 + 90 | 0) >> 0] | 0;
          $10_1 = HEAPU8[($1_1 + 73 | 0) >> 0] | 0;
          HEAP8[($1_1 + 9 | 0) >> 0] = $10_1;
          $9_1 = HEAPU8[($1_1 + 78 | 0) >> 0] | 0;
          HEAP8[($1_1 + 14 | 0) >> 0] = $9_1;
          HEAP8[($1_1 + 31 | 0) >> 0] = HEAPU8[($1_1 + 95 | 0) >> 0] | 0;
          HEAP8[($1_1 + 25 | 0) >> 0] = HEAPU8[($1_1 + 89 | 0) >> 0] | 0;
          $26_1 = HEAPU8[($1_1 + 72 | 0) >> 0] | 0;
          HEAP8[($1_1 + 8 | 0) >> 0] = $26_1;
          $18_1 = HEAPU8[($1_1 + 71 | 0) >> 0] | 0;
          HEAP8[($1_1 + 7 | 0) >> 0] = $18_1;
          $27_1 = HEAPU8[($1_1 + 70 | 0) >> 0] | 0;
          HEAP8[($1_1 + 6 | 0) >> 0] = $27_1;
          $28_1 = HEAPU8[($1_1 + 69 | 0) >> 0] | 0;
          HEAP8[($1_1 + 5 | 0) >> 0] = $28_1;
          $89 = HEAPU8[($1_1 + 85 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 86 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 87 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 88 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          HEAP8[($1_1 + 21 | 0) >> 0] = $89;
          HEAP8[($1_1 + 22 | 0) >> 0] = $89 >>> 8 | 0;
          HEAP8[($1_1 + 23 | 0) >> 0] = $89 >>> 16 | 0;
          HEAP8[($1_1 + 24 | 0) >> 0] = $89 >>> 24 | 0;
          $19_1 = HEAPU8[($1_1 + 68 | 0) >> 0] | 0;
          HEAP8[($1_1 + 4 | 0) >> 0] = $19_1;
          HEAP8[($1_1 + 20 | 0) >> 0] = HEAPU8[($1_1 + 84 | 0) >> 0] | 0;
          $29_1 = HEAPU8[($1_1 + 67 | 0) >> 0] | 0;
          HEAP8[($1_1 + 3 | 0) >> 0] = $29_1;
          HEAP8[($1_1 + 19 | 0) >> 0] = HEAPU8[($1_1 + 83 | 0) >> 0] | 0;
          $30_1 = HEAPU8[($1_1 + 66 | 0) >> 0] | 0;
          HEAP8[($1_1 + 2 | 0) >> 0] = $30_1;
          $31_1 = HEAPU8[($1_1 + 65 | 0) >> 0] | 0;
          HEAP8[($1_1 + 1 | 0) >> 0] = $31_1;
          $92 = HEAPU8[($1_1 + 81 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 82 | 0) >> 0] | 0) << 8 | 0) | 0;
          HEAP8[($1_1 + 17 | 0) >> 0] = $92;
          HEAP8[($1_1 + 18 | 0) >> 0] = $92 >>> 8 | 0;
          $22_1 = HEAPU8[($1_1 + 64 | 0) >> 0] | 0;
          HEAP8[$1_1 >> 0] = $22_1;
          $14_1 = HEAPU8[($1_1 + 80 | 0) >> 0] | 0;
          HEAP8[($1_1 + 16 | 0) >> 0] = $14_1;
          $5_1 = HEAPU8[(($5_1 ^ $57_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 1 | 0) >> 0] = $5_1;
          $23_1 = HEAPU8[(($15_1 ^ $56_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 2 | 0) >> 0] = $23_1;
          $9_1 = HEAPU8[(($9_1 ^ $55_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 6 | 0) >> 0] = $9_1;
          $24_1 = HEAPU8[(($42_1 ^ $54_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 7 | 0) >> 0] = $24_1;
          $13_1 = HEAPU8[(($41_1 ^ $53_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 11 | 0) >> 0] = $13_1;
          $21_1 = HEAPU8[(($21_1 ^ $52_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 12 | 0) >> 0] = $21_1;
          $10_1 = HEAPU8[(($10_1 ^ $51_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 13 | 0) >> 0] = $10_1;
          $18_1 = HEAPU8[(($18_1 ^ $50_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 3 | 0) >> 0] = $18_1;
          $19_1 = HEAPU8[(($19_1 ^ $49_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 4 | 0) >> 0] = $19_1;
          $41_1 = $74;
          $26_1 = HEAPU8[((($26_1 ^ $41_1 | 0) & 255 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 8 | 0) >> 0] = $26_1;
          $28_1 = HEAPU8[(($28_1 ^ $48_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 9 | 0) >> 0] = $28_1;
          $27_1 = HEAPU8[(($27_1 ^ $47_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 14 | 0) >> 0] = $27_1;
          $29_1 = HEAPU8[(($29_1 ^ $46_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 15 | 0) >> 0] = $29_1;
          i64toi32_i32$0 = $73$hi;
          $42_1 = $73;
          $22_1 = HEAPU8[((($22_1 ^ $42_1 | 0) & 255 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[$2_1 >> 0] = $22_1;
          $31_1 = HEAPU8[(($31_1 ^ $45_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 5 | 0) >> 0] = $31_1;
          $30_1 = HEAPU8[(($30_1 ^ $33_1 | 0) + 2112 | 0) >> 0] | 0;
          HEAP8[($2_1 + 10 | 0) >> 0] = $30_1;
          $32_1 = 128;
          $15_1 = 13;
          $519 = $2_1;
          block6: {
            if (!($40_1 & 65535 | 0)) {
              label2: while (1) {
                $523 = $2_1;
                block5: {
                  if ($15_1 & 1 | 0) {
                    $3_1 = HEAPU8[($1_1 + 24 | 0) >> 0] | 0;
                    $11_1 = $3_1 ^ (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0;
                    HEAP8[($1_1 + 28 | 0) >> 0] = $11_1;
                    $6_1 = HEAPU8[($1_1 + 21 | 0) >> 0] | 0;
                    $12_1 = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 25 | 0) >> 0] = $6_1 ^ $12_1 | 0;
                    $12_1 = $12_1 ^ (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0;
                    HEAP8[($1_1 + 29 | 0) >> 0] = $12_1;
                    $7_1 = HEAPU8[($1_1 + 26 | 0) >> 0] | 0;
                    $16_1 = $7_1 ^ (HEAPU8[($1_1 + 30 | 0) >> 0] | 0) | 0;
                    HEAP8[($1_1 + 30 | 0) >> 0] = $16_1;
                    $8_1 = HEAPU8[($1_1 + 27 | 0) >> 0] | 0;
                    $20_1 = $8_1 ^ (HEAPU8[($1_1 + 31 | 0) >> 0] | 0) | 0;
                    HEAP8[($1_1 + 31 | 0) >> 0] = $20_1;
                    $17_1 = HEAPU8[($1_1 + 20 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 24 | 0) >> 0] = $3_1 ^ $17_1 | 0;
                    $3_1 = HEAPU8[($1_1 + 22 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 26 | 0) >> 0] = $7_1 ^ $3_1 | 0;
                    HEAP8[($1_1 + 20 | 0) >> 0] = $14_1 ^ $17_1 | 0;
                    $7_1 = HEAPU8[($1_1 + 23 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 27 | 0) >> 0] = $8_1 ^ $7_1 | 0;
                    $8_1 = HEAPU8[($1_1 + 17 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 21 | 0) >> 0] = $6_1 ^ $8_1 | 0;
                    $6_1 = HEAPU8[($1_1 + 18 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 22 | 0) >> 0] = $3_1 ^ $6_1 | 0;
                    $3_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 23 | 0) >> 0] = $7_1 ^ $3_1 | 0;
                    $7_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 16 | 0) >> 0] = (HEAPU8[($7_1 + 1856 | 0) >> 0] | 0) ^ $14_1 | 0;
                    $17_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 17 | 0) >> 0] = $8_1 ^ (HEAPU8[($17_1 + 1856 | 0) >> 0] | 0) | 0;
                    $8_1 = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 18 | 0) >> 0] = $6_1 ^ (HEAPU8[($8_1 + 1856 | 0) >> 0] | 0) | 0;
                    $6_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 19 | 0) >> 0] = $3_1 ^ (HEAPU8[($6_1 + 1856 | 0) >> 0] | 0) | 0;
                    $3_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 12 | 0) >> 0] = $7_1 ^ $3_1 | 0;
                    $7_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 13 | 0) >> 0] = $17_1 ^ $7_1 | 0;
                    $17_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 14 | 0) >> 0] = $8_1 ^ $17_1 | 0;
                    $8_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 15 | 0) >> 0] = $6_1 ^ $8_1 | 0;
                    $6_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 8 | 0) >> 0] = $3_1 ^ $6_1 | 0;
                    $3_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 9 | 0) >> 0] = $7_1 ^ $3_1 | 0;
                    $7_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 10 | 0) >> 0] = $17_1 ^ $7_1 | 0;
                    $17_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 11 | 0) >> 0] = $8_1 ^ $17_1 | 0;
                    $8_1 = HEAPU8[$1_1 >> 0] | 0;
                    HEAP8[($1_1 + 4 | 0) >> 0] = $6_1 ^ $8_1 | 0;
                    $6_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 5 | 0) >> 0] = $3_1 ^ $6_1 | 0;
                    $3_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 6 | 0) >> 0] = $7_1 ^ $3_1 | 0;
                    $32_1 = ((0 - ($32_1 & 1 | 0) | 0) & -115 | 0) ^ (($32_1 & 254 | 0) >>> 1 | 0) | 0;
                    HEAP8[$1_1 >> 0] = $8_1 ^ ($32_1 ^ (HEAPU8[(($12_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0) | 0;
                    HEAP8[($1_1 + 1 | 0) >> 0] = $6_1 ^ (HEAPU8[($16_1 + 1856 | 0) >> 0] | 0) | 0;
                    HEAP8[($1_1 + 2 | 0) >> 0] = $3_1 ^ (HEAPU8[($20_1 + 1856 | 0) >> 0] | 0) | 0;
                    $3_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
                    HEAP8[($1_1 + 7 | 0) >> 0] = $17_1 ^ $3_1 | 0;
                    HEAP8[($1_1 + 3 | 0) >> 0] = $3_1 ^ (HEAPU8[($11_1 + 1856 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 15 | 0) >> 0] = (HEAPU8[($2_1 + 15 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 31 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 14 | 0) >> 0] = (HEAPU8[($2_1 + 14 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 30 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 13 | 0) >> 0] = (HEAPU8[($2_1 + 13 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 12 | 0) >> 0] = (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 27 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 10 | 0) >> 0] = (HEAPU8[($2_1 + 10 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 26 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 9 | 0) >> 0] = (HEAPU8[($2_1 + 9 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 25 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 8 | 0) >> 0] = (HEAPU8[($2_1 + 8 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 24 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 7 | 0) >> 0] = (HEAPU8[($2_1 + 7 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 23 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 6 | 0) >> 0] = (HEAPU8[($2_1 + 6 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 22 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 5 | 0) >> 0] = (HEAPU8[($2_1 + 5 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 21 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 4 | 0) >> 0] = (HEAPU8[($2_1 + 4 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 20 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 3 | 0) >> 0] = (HEAPU8[($2_1 + 3 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 19 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 2 | 0) >> 0] = (HEAPU8[($2_1 + 2 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 18 | 0) >> 0] | 0) | 0;
                    HEAP8[($2_1 + 1 | 0) >> 0] = (HEAPU8[($2_1 + 1 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 17 | 0) >> 0] | 0) | 0;
                    $14_1 = HEAPU8[($1_1 + 16 | 0) >> 0] | 0;
                    $839 = $14_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0;
                    break block5;
                  }
                  HEAP8[($2_1 + 15 | 0) >> 0] = $29_1 ^ (HEAPU8[($1_1 + 15 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 14 | 0) >> 0] = $27_1 ^ (HEAPU8[($1_1 + 14 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 13 | 0) >> 0] = $10_1 ^ (HEAPU8[($1_1 + 13 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 12 | 0) >> 0] = $21_1 ^ (HEAPU8[($1_1 + 12 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 11 | 0) >> 0] = $13_1 ^ (HEAPU8[($1_1 + 11 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 10 | 0) >> 0] = $30_1 ^ (HEAPU8[($1_1 + 10 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 9 | 0) >> 0] = $28_1 ^ (HEAPU8[($1_1 + 9 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 8 | 0) >> 0] = $26_1 ^ (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 7 | 0) >> 0] = $24_1 ^ (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 6 | 0) >> 0] = $9_1 ^ (HEAPU8[($1_1 + 6 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 5 | 0) >> 0] = $31_1 ^ (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 4 | 0) >> 0] = $19_1 ^ (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 3 | 0) >> 0] = $18_1 ^ (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 2 | 0) >> 0] = $23_1 ^ (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 1 | 0) >> 0] = $5_1 ^ (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
                  $839 = $22_1 ^ (HEAPU8[$1_1 >> 0] | 0) | 0;
                }
                HEAP8[$523 >> 0] = $839;
                $62($2_1 | 0);
                $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
                $29_1 = HEAPU8[((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 15 | 0) >> 0] = $29_1;
                $11_1 = HEAPU8[($2_1 + 14 | 0) >> 0] | 0;
                $27_1 = HEAPU8[((HEAPU8[($2_1 + 6 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 14 | 0) >> 0] = $27_1;
                $6_1 = HEAPU8[($2_1 + 13 | 0) >> 0] | 0;
                $10_1 = HEAPU8[((HEAPU8[($2_1 + 9 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 13 | 0) >> 0] = $10_1;
                $21_1 = HEAPU8[((HEAPU8[($2_1 + 12 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 12 | 0) >> 0] = $21_1;
                $12_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
                $13_1 = HEAPU8[($3_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 11 | 0) >> 0] = $13_1;
                $3_1 = HEAPU8[($2_1 + 10 | 0) >> 0] | 0;
                $30_1 = HEAPU8[((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 10 | 0) >> 0] = $30_1;
                $28_1 = HEAPU8[((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 9 | 0) >> 0] = $28_1;
                $7_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
                $16_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
                $26_1 = HEAPU8[((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 8 | 0) >> 0] = $26_1;
                $24_1 = HEAPU8[($12_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 7 | 0) >> 0] = $24_1;
                $9_1 = HEAPU8[($11_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 6 | 0) >> 0] = $9_1;
                $31_1 = HEAPU8[($16_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 5 | 0) >> 0] = $31_1;
                $19_1 = HEAPU8[((HEAPU8[($2_1 + 4 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 4 | 0) >> 0] = $19_1;
                $18_1 = HEAPU8[($7_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 3 | 0) >> 0] = $18_1;
                $23_1 = HEAPU8[($3_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 2 | 0) >> 0] = $23_1;
                $5_1 = HEAPU8[($6_1 + 2112 | 0) >> 0] | 0;
                HEAP8[($2_1 + 1 | 0) >> 0] = $5_1;
                $22_1 = HEAPU8[((HEAPU8[$2_1 >> 0] | 0) + 2112 | 0) >> 0] | 0;
                HEAP8[$2_1 >> 0] = $22_1;
                $15_1 = $15_1 - 1 | 0;
                if ($15_1 & 65535 | 0) {
                  continue label2;
                }
                break label2;
              }
              $3_1 = HEAPU8[$1_1 >> 0] | 0;
              $11_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
              $6_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
              $12_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
              $7_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
              $16_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
              $8_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
              $20_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
              $17_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
              $34_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
              $35_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
              $36_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
              $37_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
              $38_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
              $39_1 = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
              HEAP8[($2_1 + 15 | 0) >> 0] = ((HEAPU8[($1_1 + 15 | 0) >> 0] | 0) ^ (HEAPU8[($4_1 + 47 | 0) >> 0] | 0) | 0) ^ $29_1 | 0;
              HEAP8[($2_1 + 14 | 0) >> 0] = ($39_1 ^ (HEAPU8[($4_1 + 46 | 0) >> 0] | 0) | 0) ^ $27_1 | 0;
              HEAP8[($2_1 + 13 | 0) >> 0] = ($38_1 ^ (HEAPU8[($4_1 + 45 | 0) >> 0] | 0) | 0) ^ $10_1 | 0;
              HEAP8[($2_1 + 12 | 0) >> 0] = ($37_1 ^ (HEAPU8[($4_1 + 44 | 0) >> 0] | 0) | 0) ^ $21_1 | 0;
              HEAP8[($2_1 + 11 | 0) >> 0] = ($36_1 ^ (HEAPU8[($4_1 + 43 | 0) >> 0] | 0) | 0) ^ $13_1 | 0;
              HEAP8[($2_1 + 10 | 0) >> 0] = ($35_1 ^ (HEAPU8[($4_1 + 42 | 0) >> 0] | 0) | 0) ^ $30_1 | 0;
              HEAP8[($2_1 + 9 | 0) >> 0] = ($34_1 ^ (HEAPU8[($4_1 + 41 | 0) >> 0] | 0) | 0) ^ $28_1 | 0;
              HEAP8[($2_1 + 8 | 0) >> 0] = ($17_1 ^ (HEAPU8[($4_1 + 40 | 0) >> 0] | 0) | 0) ^ $26_1 | 0;
              HEAP8[($2_1 + 7 | 0) >> 0] = ($20_1 ^ (HEAPU8[($4_1 + 39 | 0) >> 0] | 0) | 0) ^ $24_1 | 0;
              HEAP8[($2_1 + 6 | 0) >> 0] = ($8_1 ^ (HEAPU8[($4_1 + 38 | 0) >> 0] | 0) | 0) ^ $9_1 | 0;
              HEAP8[($2_1 + 5 | 0) >> 0] = ($16_1 ^ (HEAPU8[($4_1 + 37 | 0) >> 0] | 0) | 0) ^ $31_1 | 0;
              HEAP8[($2_1 + 4 | 0) >> 0] = ($7_1 ^ (HEAPU8[($4_1 + 36 | 0) >> 0] | 0) | 0) ^ $19_1 | 0;
              HEAP8[($2_1 + 3 | 0) >> 0] = ($12_1 ^ (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) ^ $18_1 | 0;
              HEAP8[($2_1 + 2 | 0) >> 0] = ($6_1 ^ (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) ^ $23_1 | 0;
              HEAP8[($2_1 + 1 | 0) >> 0] = ($11_1 ^ (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0) ^ $5_1 | 0;
              $1170 = ($3_1 ^ (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) ^ $22_1 | 0;
              break block6;
            }
            label3: while (1) {
              $1171 = $2_1;
              block7: {
                if ($15_1 & 1 | 0) {
                  $5_1 = HEAPU8[($1_1 + 24 | 0) >> 0] | 0;
                  $23_1 = $5_1 ^ (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0;
                  HEAP8[($1_1 + 28 | 0) >> 0] = $23_1;
                  $9_1 = HEAPU8[($1_1 + 21 | 0) >> 0] | 0;
                  $24_1 = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 25 | 0) >> 0] = $9_1 ^ $24_1 | 0;
                  $24_1 = $24_1 ^ (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0;
                  HEAP8[($1_1 + 29 | 0) >> 0] = $24_1;
                  $13_1 = HEAPU8[($1_1 + 26 | 0) >> 0] | 0;
                  $21_1 = $13_1 ^ (HEAPU8[($1_1 + 30 | 0) >> 0] | 0) | 0;
                  HEAP8[($1_1 + 30 | 0) >> 0] = $21_1;
                  $10_1 = HEAPU8[($1_1 + 27 | 0) >> 0] | 0;
                  $18_1 = $10_1 ^ (HEAPU8[($1_1 + 31 | 0) >> 0] | 0) | 0;
                  HEAP8[($1_1 + 31 | 0) >> 0] = $18_1;
                  $19_1 = HEAPU8[($1_1 + 20 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 24 | 0) >> 0] = $5_1 ^ $19_1 | 0;
                  $5_1 = HEAPU8[($1_1 + 22 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 26 | 0) >> 0] = $13_1 ^ $5_1 | 0;
                  HEAP8[($1_1 + 20 | 0) >> 0] = $14_1 ^ $19_1 | 0;
                  $13_1 = HEAPU8[($1_1 + 23 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 27 | 0) >> 0] = $10_1 ^ $13_1 | 0;
                  $10_1 = HEAPU8[($1_1 + 17 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 21 | 0) >> 0] = $9_1 ^ $10_1 | 0;
                  $9_1 = HEAPU8[($1_1 + 18 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 22 | 0) >> 0] = $5_1 ^ $9_1 | 0;
                  $5_1 = HEAPU8[($1_1 + 19 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 23 | 0) >> 0] = $13_1 ^ $5_1 | 0;
                  $13_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 16 | 0) >> 0] = $14_1 ^ (HEAPU8[($13_1 + 1856 | 0) >> 0] | 0) | 0;
                  $14_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 17 | 0) >> 0] = $10_1 ^ (HEAPU8[($14_1 + 1856 | 0) >> 0] | 0) | 0;
                  $10_1 = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 18 | 0) >> 0] = $9_1 ^ (HEAPU8[($10_1 + 1856 | 0) >> 0] | 0) | 0;
                  $9_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 19 | 0) >> 0] = $5_1 ^ (HEAPU8[($9_1 + 1856 | 0) >> 0] | 0) | 0;
                  $5_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 12 | 0) >> 0] = $13_1 ^ $5_1 | 0;
                  $13_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 13 | 0) >> 0] = $14_1 ^ $13_1 | 0;
                  $14_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 14 | 0) >> 0] = $10_1 ^ $14_1 | 0;
                  $10_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 15 | 0) >> 0] = $9_1 ^ $10_1 | 0;
                  $9_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 8 | 0) >> 0] = $5_1 ^ $9_1 | 0;
                  $5_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 9 | 0) >> 0] = $13_1 ^ $5_1 | 0;
                  $13_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 10 | 0) >> 0] = $14_1 ^ $13_1 | 0;
                  $14_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 11 | 0) >> 0] = $10_1 ^ $14_1 | 0;
                  $10_1 = HEAPU8[$1_1 >> 0] | 0;
                  HEAP8[($1_1 + 4 | 0) >> 0] = $9_1 ^ $10_1 | 0;
                  $9_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 5 | 0) >> 0] = $5_1 ^ $9_1 | 0;
                  $5_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 6 | 0) >> 0] = $13_1 ^ $5_1 | 0;
                  $32_1 = ((0 - ($32_1 & 1 | 0) | 0) & -115 | 0) ^ (($32_1 & 254 | 0) >>> 1 | 0) | 0;
                  HEAP8[$1_1 >> 0] = $10_1 ^ ($32_1 ^ (HEAPU8[(($24_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0) | 0;
                  HEAP8[($1_1 + 1 | 0) >> 0] = $9_1 ^ (HEAPU8[($21_1 + 1856 | 0) >> 0] | 0) | 0;
                  HEAP8[($1_1 + 2 | 0) >> 0] = $5_1 ^ (HEAPU8[($18_1 + 1856 | 0) >> 0] | 0) | 0;
                  $5_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
                  HEAP8[($1_1 + 7 | 0) >> 0] = $14_1 ^ $5_1 | 0;
                  HEAP8[($1_1 + 3 | 0) >> 0] = $5_1 ^ (HEAPU8[($23_1 + 1856 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 15 | 0) >> 0] = (HEAPU8[($2_1 + 15 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 31 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 14 | 0) >> 0] = (HEAPU8[($2_1 + 14 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 30 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 13 | 0) >> 0] = (HEAPU8[($2_1 + 13 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 12 | 0) >> 0] = (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 27 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 10 | 0) >> 0] = (HEAPU8[($2_1 + 10 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 26 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 9 | 0) >> 0] = (HEAPU8[($2_1 + 9 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 25 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 8 | 0) >> 0] = (HEAPU8[($2_1 + 8 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 24 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 7 | 0) >> 0] = (HEAPU8[($2_1 + 7 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 23 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 6 | 0) >> 0] = (HEAPU8[($2_1 + 6 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 22 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 5 | 0) >> 0] = (HEAPU8[($2_1 + 5 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 21 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 4 | 0) >> 0] = (HEAPU8[($2_1 + 4 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 20 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 3 | 0) >> 0] = (HEAPU8[($2_1 + 3 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 19 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 2 | 0) >> 0] = (HEAPU8[($2_1 + 2 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 18 | 0) >> 0] | 0) | 0;
                  HEAP8[($2_1 + 1 | 0) >> 0] = (HEAPU8[($2_1 + 1 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 17 | 0) >> 0] | 0) | 0;
                  $14_1 = HEAPU8[($1_1 + 16 | 0) >> 0] | 0;
                  $1487 = $14_1 ^ (HEAPU8[$2_1 >> 0] | 0) | 0;
                  break block7;
                }
                HEAP8[($2_1 + 15 | 0) >> 0] = $29_1 ^ (HEAPU8[($1_1 + 15 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 14 | 0) >> 0] = $27_1 ^ (HEAPU8[($1_1 + 14 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 13 | 0) >> 0] = $10_1 ^ (HEAPU8[($1_1 + 13 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 12 | 0) >> 0] = $21_1 ^ (HEAPU8[($1_1 + 12 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 11 | 0) >> 0] = $13_1 ^ (HEAPU8[($1_1 + 11 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 10 | 0) >> 0] = $30_1 ^ (HEAPU8[($1_1 + 10 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 9 | 0) >> 0] = $28_1 ^ (HEAPU8[($1_1 + 9 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 8 | 0) >> 0] = $26_1 ^ (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 7 | 0) >> 0] = $24_1 ^ (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 6 | 0) >> 0] = $9_1 ^ (HEAPU8[($1_1 + 6 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 5 | 0) >> 0] = $31_1 ^ (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 4 | 0) >> 0] = $19_1 ^ (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 3 | 0) >> 0] = $18_1 ^ (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 2 | 0) >> 0] = $23_1 ^ (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) | 0;
                HEAP8[($2_1 + 1 | 0) >> 0] = $5_1 ^ (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
                $1487 = $22_1 ^ (HEAPU8[$1_1 >> 0] | 0) | 0;
              }
              HEAP8[$1171 >> 0] = $1487;
              $62($2_1 | 0);
              $5_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
              $29_1 = HEAPU8[((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 15 | 0) >> 0] = $29_1;
              $23_1 = HEAPU8[($2_1 + 14 | 0) >> 0] | 0;
              $27_1 = HEAPU8[((HEAPU8[($2_1 + 6 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 14 | 0) >> 0] = $27_1;
              $22_1 = HEAPU8[($2_1 + 13 | 0) >> 0] | 0;
              $10_1 = HEAPU8[((HEAPU8[($2_1 + 9 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 13 | 0) >> 0] = $10_1;
              $21_1 = HEAPU8[((HEAPU8[($2_1 + 12 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 12 | 0) >> 0] = $21_1;
              $9_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
              $13_1 = HEAPU8[($5_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 11 | 0) >> 0] = $13_1;
              $5_1 = HEAPU8[($2_1 + 10 | 0) >> 0] | 0;
              $30_1 = HEAPU8[((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 10 | 0) >> 0] = $30_1;
              $28_1 = HEAPU8[((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 9 | 0) >> 0] = $28_1;
              $18_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
              $19_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
              $26_1 = HEAPU8[((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 8 | 0) >> 0] = $26_1;
              $24_1 = HEAPU8[($9_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 7 | 0) >> 0] = $24_1;
              $9_1 = HEAPU8[($23_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 6 | 0) >> 0] = $9_1;
              $31_1 = HEAPU8[($19_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 5 | 0) >> 0] = $31_1;
              $19_1 = HEAPU8[((HEAPU8[($2_1 + 4 | 0) >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 4 | 0) >> 0] = $19_1;
              $18_1 = HEAPU8[($18_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 3 | 0) >> 0] = $18_1;
              $23_1 = HEAPU8[($5_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 2 | 0) >> 0] = $23_1;
              $5_1 = HEAPU8[($22_1 + 2112 | 0) >> 0] | 0;
              HEAP8[($2_1 + 1 | 0) >> 0] = $5_1;
              $22_1 = HEAPU8[((HEAPU8[$2_1 >> 0] | 0) + 2112 | 0) >> 0] | 0;
              HEAP8[$2_1 >> 0] = $22_1;
              $15_1 = $15_1 - 1 | 0;
              if ($15_1 & 65535 | 0) {
                continue label3;
              }
              break label3;
            }
            $15_1 = HEAPU8[$1_1 >> 0] | 0;
            $14_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
            $32_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
            $61_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
            $62_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
            $63_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
            $64_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
            $65_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
            $66_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
            $67_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
            $68_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
            $69_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
            $70_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
            $71_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
            $72_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
            HEAP8[($2_1 + 14 | 0) >> 0] = ((HEAPU8[($1_1 + 14 | 0) >> 0] | 0) ^ $3_1 | 0) ^ $27_1 | 0;
            HEAP8[($2_1 + 15 | 0) >> 0] = ($8_1 ^ $72_1 | 0) ^ $29_1 | 0;
            HEAP8[($2_1 + 13 | 0) >> 0] = ($11_1 ^ $71_1 | 0) ^ $10_1 | 0;
            HEAP8[($2_1 + 12 | 0) >> 0] = ($16_1 ^ $70_1 | 0) ^ $21_1 | 0;
            HEAP8[($2_1 + 11 | 0) >> 0] = ($6_1 ^ $69_1 | 0) ^ $13_1 | 0;
            HEAP8[($2_1 + 10 | 0) >> 0] = ($20_1 ^ $68_1 | 0) ^ $30_1 | 0;
            HEAP8[($2_1 + 9 | 0) >> 0] = ($12_1 ^ $67_1 | 0) ^ $28_1 | 0;
            HEAP8[($2_1 + 8 | 0) >> 0] = ($17_1 ^ $66_1 | 0) ^ $26_1 | 0;
            HEAP8[($2_1 + 7 | 0) >> 0] = ($7_1 ^ $65_1 | 0) ^ $24_1 | 0;
            HEAP8[($2_1 + 6 | 0) >> 0] = ($34_1 ^ $64_1 | 0) ^ $9_1 | 0;
            HEAP8[($2_1 + 5 | 0) >> 0] = ($35_1 ^ $63_1 | 0) ^ $31_1 | 0;
            HEAP8[($2_1 + 4 | 0) >> 0] = ($36_1 ^ $62_1 | 0) ^ $19_1 | 0;
            HEAP8[($2_1 + 3 | 0) >> 0] = ($37_1 ^ $61_1 | 0) ^ $18_1 | 0;
            HEAP8[($2_1 + 2 | 0) >> 0] = ($32_1 ^ $38_1 | 0) ^ $23_1 | 0;
            HEAP8[($2_1 + 1 | 0) >> 0] = ($14_1 ^ $39_1 | 0) ^ $5_1 | 0;
            $1170 = ($15_1 ^ $44_1 | 0) ^ $22_1 | 0;
          }
          HEAP8[$519 >> 0] = $1170;
          $3_1 = $58_1 + $60_1 | 0;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$0 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
          $1808 = i64toi32_i32$0;
          i64toi32_i32$0 = $3_1;
          $90 = $1808;
          HEAP8[($3_1 + 8 | 0) >> 0] = $90;
          HEAP8[($3_1 + 9 | 0) >> 0] = $90 >>> 8 | 0;
          HEAP8[($3_1 + 10 | 0) >> 0] = $90 >>> 16 | 0;
          HEAP8[($3_1 + 11 | 0) >> 0] = $90 >>> 24 | 0;
          HEAP8[($3_1 + 12 | 0) >> 0] = i64toi32_i32$1;
          HEAP8[($3_1 + 13 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
          HEAP8[($3_1 + 14 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
          HEAP8[($3_1 + 15 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          $1811 = i64toi32_i32$1;
          i64toi32_i32$1 = $3_1;
          $91 = $1811;
          HEAP8[$3_1 >> 0] = $91;
          HEAP8[($3_1 + 1 | 0) >> 0] = $91 >>> 8 | 0;
          HEAP8[($3_1 + 2 | 0) >> 0] = $91 >>> 16 | 0;
          HEAP8[($3_1 + 3 | 0) >> 0] = $91 >>> 24 | 0;
          HEAP8[($3_1 + 4 | 0) >> 0] = i64toi32_i32$0;
          HEAP8[($3_1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
          HEAP8[($3_1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
          HEAP8[($3_1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
          $44_1 = $42_1;
          $39_1 = $45_1;
          $38_1 = $33_1;
          $37_1 = $46_1;
          $36_1 = $49_1;
          $35_1 = $48_1;
          $34_1 = $47_1;
          $7_1 = $50_1;
          $17_1 = $41_1;
          $12_1 = $51_1;
          $20_1 = $56_1;
          $6_1 = $54_1;
          $16_1 = $52_1;
          $11_1 = $57_1;
          $3_1 = $55_1;
          $8_1 = $53_1;
          $40_1 = $40_1 + 1 | 0;
          $15_1 = $40_1 & 65535 | 0;
          if ($59_1 >>> 0 > $15_1 >>> 0) {
            continue label4;
          }
          break label4;
        }
      }
      global$0 = $2_1 + 32 | 0;
      $8($43_1 | 0);
      $1_1 = HEAP32[($25_1 + 108 | 0) >> 2] | 0;
      $4_1 = HEAPU8[(($0_1 + $1_1 | 0) + 7 | 0) >> 0] | 0;
      if ((($4_1 - 17 | 0) & 255 | 0) >>> 0 <= 239 >>> 0) {
        $8($0_1 | 0);
        $0_1 = $14(4 | 0) | 0;
        HEAP32[$0_1 >> 2] = 5;
        break block2;
      }
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 - $4_1 | 0;
    }
    global$0 = $25_1 + 112 | 0;
    return $0_1 | 0;
  }
  function $68() {
    var $0_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$3 = 0,
      $1_1 = 0,
      $5_1 = 0,
      $2_1 = 0,
      $4_1 = 0,
      $8_1 = 0,
      $11_1 = 0,
      $6_1 = 0,
      $10_1 = 0,
      $3_1 = 0,
      $9_1 = 0,
      $7_1 = 0,
      $12_1 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$5 = 0,
      $13_1 = 0,
      $15_1 = 0,
      $14_1 = 0,
      $16_1 = 0,
      $17_1 = 0,
      $18_1 = 0,
      $19_1 = 0,
      $20_1 = 0,
      $24_1 = 0,
      $23_1 = 0,
      i64toi32_i32$4 = 0,
      $25_1 = 0,
      $21_1 = 0,
      $22_1 = 0,
      $28_1 = 0,
      $29_1 = 0,
      $30_1 = 0,
      $32_1 = 0,
      $33_1 = 0,
      $34_1 = 0,
      $26_1 = 0,
      $27_1 = 0,
      $93 = 0,
      $31_1 = 0,
      $35_1 = 0,
      $36_1 = 0,
      $37_1 = 0,
      $38_1 = 0,
      $39_1 = 0,
      $40_1 = 0,
      $41_1 = 0,
      $42_1 = 0,
      $43_1 = 0,
      $50_1 = 0,
      $54_1 = 0,
      $58_1 = 0,
      $60_1 = 0,
      $61_1 = 0,
      $47_1 = 0,
      $48_1 = 0,
      $49_1 = 0,
      $51_1 = 0,
      $52_1 = 0,
      $53_1 = 0,
      $55_1 = 0,
      $56_1 = 0,
      $57_1 = 0,
      $59_1 = 0,
      $44_1 = 0,
      $94 = 0,
      $45_1 = 0,
      $46_1 = 0,
      $94$hi = 0,
      $66_1 = 0,
      $68_1 = 0,
      $69_1 = 0,
      $70_1 = 0,
      $71_1 = 0,
      $72_1 = 0,
      $73 = 0,
      $74 = 0,
      $124 = 0,
      $125 = 0,
      $126 = 0,
      $127 = 0,
      i64toi32_i32$2 = 0,
      $62_1 = 0,
      $63_1 = 0,
      $64_1 = 0,
      $65_1 = 0,
      $67_1 = 0,
      $75 = 0,
      $134 = 0,
      $157 = 0,
      $128 = 0,
      $129 = 0,
      $202 = 0,
      $202$hi = 0,
      $130 = 0,
      $131 = 0,
      $132 = 0,
      $133 = 0,
      $135 = 0,
      $136 = 0,
      $137 = 0,
      $138 = 0,
      $1390 = 0,
      $139 = 0,
      $140 = 0,
      $111 = 0,
      $120 = 0,
      $143 = 0,
      $220 = 0,
      $223 = 0,
      $226 = 0,
      $229 = 0,
      $232 = 0,
      $235 = 0,
      $238 = 0,
      $350 = 0,
      $76 = 0,
      $77 = 0,
      $78 = 0,
      $79 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $2469 = 0,
      $2472 = 0,
      $2475 = 0,
      $2478 = 0,
      $2481 = 0,
      $2484 = 0;
    $3_1 = global$0 - 240 | 0;
    global$0 = $3_1;
    HEAP8[($3_1 + 224 | 0) >> 0] = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($3_1 + 216 | 0) >> 2] = 0;
    HEAP32[($3_1 + 220 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $3_1 + 208 | 0;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($3_1 + 200 | 0) >> 2] = 0;
    HEAP32[($3_1 + 204 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($3_1 + 192 | 0) >> 2] = 0;
    HEAP32[($3_1 + 196 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($3_1 + 184 | 0) >> 2] = 0;
    HEAP32[($3_1 + 188 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($3_1 + 176 | 0) >> 2] = 0;
    HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    i64toi32_i32$0 = $34() | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $111 = i64toi32_i32$0;
    i64toi32_i32$0 = $7_1;
    HEAP32[i64toi32_i32$0 >> 2] = $111;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2_1 = $3_1 + 176 | 0;
    $18($2_1 | 0, 14 | 0, 1366 | 0, i64toi32_i32$0 | 0);
    $6_1 = fimport$13() | 0;
    label: while (1) {
      $9_1 = $0_1 + $2_1 | 0;
      $120 = $9_1;
      block: {
        $93 = +HEAPF64[($6_1 + ($0_1 << 3 | 0) | 0) >> 3] * 64;
        if ($93 < 4294967296 & $93 >= 0 | 0) {
          $134 = ~~$93 >>> 0;
          break block;
        }
        $134 = 0;
      }
      HEAP8[($120 + 13 | 0) >> 0] = HEAPU8[(($134 & 63 | 0) + 1575 | 0) >> 0] | 0;
      $10_1 = $0_1 | 1 | 0;
      if (($10_1 | 0) != (35 | 0)) {
        $143 = $9_1;
        block1: {
          $93 = +HEAPF64[($6_1 + ($10_1 << 3 | 0) | 0) >> 3] * 64;
          if ($93 < 4294967296 & $93 >= 0 | 0) {
            $157 = ~~$93 >>> 0;
            break block1;
          }
          $157 = 0;
        }
        HEAP8[($143 + 14 | 0) >> 0] = HEAPU8[(($157 & 63 | 0) + 1575 | 0) >> 0] | 0;
        $0_1 = $0_1 + 2 | 0;
        continue label;
      }
      break label;
    }
    $8($6_1 | 0);
    global$0 = $7_1 + 16 | 0;
    $7_1 = 0;
    $6_1 = 0;
    $9_1 = 0;
    $10_1 = 0;
    $0_1 = global$0 - 96 | 0;
    global$0 = $0_1;
    $20_1 = $31(1 | 0, fimport$6() | 0 | 0) | 0;
    $16_1 = $31(2 | 0, fimport$5() | 0 | 0) | 0;
    $17_1 = $31(3 | 0, fimport$4() | 0 | 0) | 0;
    $23_1 = $31(4 | 0, fimport$3() | 0 | 0) | 0;
    $31_1 = $31(5 | 0, fimport$2() | 0 | 0) | 0;
    $18_1 = $32(6 | 0, fimport$1() | 0 | 0) | 0;
    $44_1 = $32(7 | 0, fimport$18() | 0 | 0) | 0;
    $25_1 = $32(8 | 0, fimport$17() | 0 | 0) | 0;
    $19_1 = $29(10 | 0) | 0;
    $27($19_1 | 0, 0 | 0, 9 | 0);
    i64toi32_i32$0 = fimport$16() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $28($19_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
    $1_1 = $29(10 | 0) | 0;
    $27($1_1 | 0, 1 | 0, 10 | 0);
    block2: {
      $93 = +fimport$15();
      if ($93 < 0x10000000000000000 & $93 >= 0 | 0) {
        i64toi32_i32$2 = $93;
        if (Math_abs($93) >= 1) {
          if ($93 > 0) {
            $128 = ~~Math_min(Math_floor($93 / 4294967296), 4294967296 - 1) >>> 0;
          } else {
            $128 = ~~Math_ceil((i64toi32_i32$2 - +(~~i64toi32_i32$2 >>> 0 >>> 0)) / 4294967296) >>> 0;
          }
          $129 = $128;
        } else {
          $129 = 0;
        }
        i64toi32_i32$1 = $129;
        $202 = ~~i64toi32_i32$2 >>> 0;
        $202$hi = i64toi32_i32$1;
        break block2;
      }
      i64toi32_i32$1 = 0;
      $202 = 0;
      $202$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $202$hi;
    $94 = $202;
    $94$hi = i64toi32_i32$1;
    block3: {
      $14_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if ($14_1 >>> 0 > -9 >>> 0) {
        break block3;
      }
      $24_1 = $14_1 + 8 | 0;
      if ($24_1 >>> 0 > (HEAP32[($1_1 + 4 | 0) >> 2] | 0) >>> 0) {
        break block3;
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $24_1;
      $14_1 = (HEAP32[$1_1 >> 2] | 0) + $14_1 | 0;
      $220 = $14_1;
      i64toi32_i32$3 = $94;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 56;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $130 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
        $130 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($220 + 7 | 0) >> 0] = $130;
      $223 = $14_1;
      i64toi32_i32$0 = $94$hi;
      i64toi32_i32$1 = $94;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 48;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $131 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
        $131 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($223 + 6 | 0) >> 0] = $131;
      $226 = $14_1;
      i64toi32_i32$3 = $94$hi;
      i64toi32_i32$0 = $94;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 40;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $132 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
        $132 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($226 + 5 | 0) >> 0] = $132;
      $229 = $14_1;
      i64toi32_i32$1 = $94$hi;
      i64toi32_i32$3 = $94;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $133 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
        $133 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($229 + 4 | 0) >> 0] = $133;
      $232 = $14_1;
      i64toi32_i32$0 = $94$hi;
      i64toi32_i32$1 = $94;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 24;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $135 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
        $135 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($232 + 3 | 0) >> 0] = $135;
      $235 = $14_1;
      i64toi32_i32$3 = $94$hi;
      i64toi32_i32$0 = $94;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = 16;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $136 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
        $136 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($235 + 2 | 0) >> 0] = $136;
      $238 = $14_1;
      i64toi32_i32$1 = $94$hi;
      i64toi32_i32$3 = $94;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 8;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $137 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
        i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
        $137 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP8[($238 + 1 | 0) >> 0] = $137;
      i64toi32_i32$0 = $94$hi;
      HEAP8[$14_1 >> 0] = $94;
    }
    $24_1 = $32(11 | 0, fimport$14() | 0 | 0) | 0;
    $14_1 = $29(((HEAP32[($24_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($19_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($44_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($31_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($23_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 8 | 0) >> 2] | 0) + (HEAP32[($16_1 + 8 | 0) >> 2] | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) + 16 | 0 | 0) | 0;
    $15($14_1 | 0, HEAP32[$20_1 >> 2] | 0 | 0, HEAP32[($20_1 + 8 | 0) >> 2] | 0 | 0);
    $13($20_1 | 0);
    $15($14_1 | 0, HEAP32[$16_1 >> 2] | 0 | 0, HEAP32[($16_1 + 8 | 0) >> 2] | 0 | 0);
    $13($16_1 | 0);
    $15($14_1 | 0, HEAP32[$17_1 >> 2] | 0 | 0, HEAP32[($17_1 + 8 | 0) >> 2] | 0 | 0);
    $13($17_1 | 0);
    $15($14_1 | 0, HEAP32[$23_1 >> 2] | 0 | 0, HEAP32[($23_1 + 8 | 0) >> 2] | 0 | 0);
    $13($23_1 | 0);
    $15($14_1 | 0, HEAP32[$31_1 >> 2] | 0 | 0, HEAP32[($31_1 + 8 | 0) >> 2] | 0 | 0);
    $13($31_1 | 0);
    $15($14_1 | 0, HEAP32[$18_1 >> 2] | 0 | 0, HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0);
    $13($18_1 | 0);
    $15($14_1 | 0, HEAP32[$44_1 >> 2] | 0 | 0, HEAP32[($44_1 + 8 | 0) >> 2] | 0 | 0);
    $13($44_1 | 0);
    $15($14_1 | 0, HEAP32[$25_1 >> 2] | 0 | 0, HEAP32[($25_1 + 8 | 0) >> 2] | 0 | 0);
    $13($25_1 | 0);
    $15($14_1 | 0, HEAP32[$19_1 >> 2] | 0 | 0, HEAP32[($19_1 + 8 | 0) >> 2] | 0 | 0);
    $13($19_1 | 0);
    $15($14_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
    $13($1_1 | 0);
    $15($14_1 | 0, HEAP32[$24_1 >> 2] | 0 | 0, HEAP32[($24_1 + 8 | 0) >> 2] | 0 | 0);
    $13($24_1 | 0);
    $1_1 = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
    $350 = $1_1 + (HEAP32[$14_1 >> 2] | 0) | 0;
    $1_1 = 16 - ($1_1 & 15 | 0) | 0;
    $12($350 | 0, $1_1 | 0, $1_1 | 0) | 0;
    $1_1 = (HEAP32[($14_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
    HEAP32[($14_1 + 8 | 0) >> 2] = $1_1;
    $44_1 = $29($1_1 | 0) | 0;
    $61($0_1 | 0, $2_1 | 0);
    $76 = HEAP32[$14_1 >> 2] | 0;
    $2_1 = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
    $19_1 = HEAP32[$44_1 >> 2] | 0;
    $31_1 = global$0 - 16 | 0;
    global$0 = $31_1;
    if ($2_1 >>> 0 >= 16 >>> 0) {
      $77 = $2_1 >>> 4 | 0;
      $78 = $19_1 + 1 | 0;
      $79 = $19_1 + 2 | 0;
      $80 = $19_1 + 3 | 0;
      $81 = $19_1 + 4 | 0;
      $82 = $19_1 + 5 | 0;
      $83 = $19_1 + 6 | 0;
      $84 = $19_1 + 7 | 0;
      $85 = $19_1 + 8 | 0;
      $86 = $19_1 + 9 | 0;
      $87 = $19_1 + 10 | 0;
      $88 = $19_1 + 11 | 0;
      $89 = $19_1 + 12 | 0;
      $90 = $19_1 + 13 | 0;
      $91 = $19_1 + 14 | 0;
      $92 = $19_1 + 15 | 0;
      label3: while (1) {
        $20_1 = $27_1 << 4 | 0;
        $2_1 = $76 + $20_1 | 0;
        $17_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($2_1 + 14 | 0) >> 0] | 0;
        $23_1 = HEAPU8[($2_1 + 13 | 0) >> 0] | 0;
        $18_1 = HEAPU8[($2_1 + 12 | 0) >> 0] | 0;
        $1_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
        $25_1 = HEAPU8[($2_1 + 10 | 0) >> 0] | 0;
        $24_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
        $35_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
        $36_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
        $37_1 = HEAPU8[($2_1 + 6 | 0) >> 0] | 0;
        $38_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
        $39_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
        $40_1 = HEAPU8[($2_1 + 3 | 0) >> 0] | 0;
        $41_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
        $45_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
        $46_1 = HEAPU8[$2_1 >> 0] | 0;
        block5: {
          if (!($62_1 & 255 | 0)) {
            $5_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
            $9_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
            $8_1 = HEAPU8[$4_1 >> 0] | 0;
            $10_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
            $26_1 = HEAPU8[($4_1 + 7 | 0) >> 0] | 0;
            $7_1 = HEAPU8[($4_1 + 6 | 0) >> 0] | 0;
            $12_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
            $6_1 = HEAPU8[($4_1 + 4 | 0) >> 0] | 0;
            $15_1 = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
            $28_1 = HEAPU8[($4_1 + 15 | 0) >> 0] | 0;
            $21_1 = HEAPU8[($4_1 + 14 | 0) >> 0] | 0;
            $13_1 = HEAPU8[($4_1 + 13 | 0) >> 0] | 0;
            $22_1 = HEAPU8[($4_1 + 12 | 0) >> 0] | 0;
            $29_1 = HEAPU8[($4_1 + 11 | 0) >> 0] | 0;
            $2_1 = HEAPU8[($4_1 + 10 | 0) >> 0] | 0;
            $11_1 = HEAPU8[($4_1 + 9 | 0) >> 0] | 0;
            $30_1 = HEAPU8[($0_1 + 47 | 0) >> 0] | 0;
            HEAP8[($0_1 + 15 | 0) >> 0] = $30_1;
            HEAP8[($0_1 + 31 | 0) >> 0] = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
            $42_1 = HEAPU8[($0_1 + 46 | 0) >> 0] | 0;
            HEAP8[($0_1 + 14 | 0) >> 0] = $42_1;
            $43_1 = HEAPU8[($0_1 + 45 | 0) >> 0] | 0;
            HEAP8[($0_1 + 13 | 0) >> 0] = $43_1;
            $47_1 = HEAPU8[($0_1 + 44 | 0) >> 0] | 0;
            HEAP8[($0_1 + 12 | 0) >> 0] = $47_1;
            $48_1 = HEAPU8[($0_1 + 43 | 0) >> 0] | 0;
            HEAP8[($0_1 + 11 | 0) >> 0] = $48_1;
            $124 = HEAPU8[($0_1 + 59 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 60 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 61 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 62 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
            HEAP8[($0_1 + 27 | 0) >> 0] = $124;
            HEAP8[($0_1 + 28 | 0) >> 0] = $124 >>> 8 | 0;
            HEAP8[($0_1 + 29 | 0) >> 0] = $124 >>> 16 | 0;
            HEAP8[($0_1 + 30 | 0) >> 0] = $124 >>> 24 | 0;
            $49_1 = HEAPU8[($0_1 + 42 | 0) >> 0] | 0;
            HEAP8[($0_1 + 10 | 0) >> 0] = $49_1;
            HEAP8[($0_1 + 26 | 0) >> 0] = HEAPU8[($0_1 + 58 | 0) >> 0] | 0;
            $50_1 = HEAPU8[($0_1 + 41 | 0) >> 0] | 0;
            HEAP8[($0_1 + 9 | 0) >> 0] = $50_1;
            HEAP8[($0_1 + 25 | 0) >> 0] = HEAPU8[($0_1 + 57 | 0) >> 0] | 0;
            $51_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
            HEAP8[($0_1 + 8 | 0) >> 0] = $51_1;
            $52_1 = HEAPU8[($0_1 + 39 | 0) >> 0] | 0;
            HEAP8[($0_1 + 7 | 0) >> 0] = $52_1;
            $53_1 = HEAPU8[($0_1 + 38 | 0) >> 0] | 0;
            HEAP8[($0_1 + 6 | 0) >> 0] = $53_1;
            $54_1 = HEAPU8[($0_1 + 37 | 0) >> 0] | 0;
            HEAP8[($0_1 + 5 | 0) >> 0] = $54_1;
            $125 = HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 54 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 55 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 56 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
            HEAP8[($0_1 + 21 | 0) >> 0] = $125;
            HEAP8[($0_1 + 22 | 0) >> 0] = $125 >>> 8 | 0;
            HEAP8[($0_1 + 23 | 0) >> 0] = $125 >>> 16 | 0;
            HEAP8[($0_1 + 24 | 0) >> 0] = $125 >>> 24 | 0;
            $55_1 = HEAPU8[($0_1 + 36 | 0) >> 0] | 0;
            HEAP8[($0_1 + 4 | 0) >> 0] = $55_1;
            HEAP8[($0_1 + 20 | 0) >> 0] = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
            $56_1 = HEAPU8[($0_1 + 35 | 0) >> 0] | 0;
            HEAP8[($0_1 + 3 | 0) >> 0] = $56_1;
            HEAP8[($0_1 + 19 | 0) >> 0] = HEAPU8[($0_1 + 51 | 0) >> 0] | 0;
            $57_1 = HEAPU8[($0_1 + 34 | 0) >> 0] | 0;
            HEAP8[($0_1 + 2 | 0) >> 0] = $57_1;
            HEAP8[($0_1 + 18 | 0) >> 0] = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
            $58_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            HEAP8[($0_1 + 1 | 0) >> 0] = $58_1;
            $59_1 = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
            HEAP8[$0_1 >> 0] = $59_1;
            $138 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) << 8 | 0) | 0;
            HEAP8[($0_1 + 16 | 0) >> 0] = $138;
            HEAP8[($0_1 + 17 | 0) >> 0] = $138 >>> 8 | 0;
            $27_1 = 1;
            HEAP8[($31_1 + 15 | 0) >> 0] = 1;
            $11_1 = $50_1 ^ ($11_1 ^ $24_1 | 0) | 0;
            $2_1 = $49_1 ^ ($2_1 ^ $25_1 | 0) | 0;
            $1_1 = $48_1 ^ ($1_1 ^ $29_1 | 0) | 0;
            $18_1 = $47_1 ^ ($18_1 ^ $22_1 | 0) | 0;
            $13_1 = $43_1 ^ ($13_1 ^ $23_1 | 0) | 0;
            $16_1 = $42_1 ^ ($16_1 ^ $21_1 | 0) | 0;
            $17_1 = $30_1 ^ ($17_1 ^ $28_1 | 0) | 0;
            $22_1 = $56_1 ^ ($15_1 ^ $40_1 | 0) | 0;
            $6_1 = $55_1 ^ ($6_1 ^ $39_1 | 0) | 0;
            $12_1 = $54_1 ^ ($12_1 ^ $38_1 | 0) | 0;
            $7_1 = $53_1 ^ ($7_1 ^ $37_1 | 0) | 0;
            $21_1 = $52_1 ^ ($26_1 ^ $36_1 | 0) | 0;
            $10_1 = $51_1 ^ ($10_1 ^ $35_1 | 0) | 0;
            $8_1 = $59_1 ^ ($8_1 ^ $46_1 | 0) | 0;
            $9_1 = $58_1 ^ ($9_1 ^ $45_1 | 0) | 0;
            $5_1 = $57_1 ^ ($5_1 ^ $41_1 | 0) | 0;
            $26_1 = 1;
            label1: while (1) {
              $29_1 = HEAPU8[(($1_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $18_1 = HEAPU8[(($18_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $1_1 = $29_1 ^ $18_1 | 0;
              $15_1 = $1_1 << 1 | 0;
              $47_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $15_1 ^ 27 | 0 : $15_1;
              $7_1 = HEAPU8[(($7_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $1_1 = $7_1 ^ $29_1 | 0;
              $15_1 = $1_1 << 1 | 0;
              $48_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $15_1 ^ 27 | 0 : $15_1;
              $35_1 = HEAPU8[(($9_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $9_1 = $35_1 ^ $7_1 | 0;
              $1_1 = $9_1 << 1 | 0;
              $49_1 = (($9_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
              $9_1 = $18_1 ^ $35_1 | 0;
              $1_1 = $9_1 << 1 | 0;
              $50_1 = ($9_1 << 24 | 0) >> 24 | 0;
              $51_1 = ($50_1 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
              $25_1 = HEAPU8[(($21_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $36_1 = HEAPU8[(($10_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $10_1 = $25_1 ^ $36_1 | 0;
              $1_1 = $10_1 << 1 | 0;
              $21_1 = (($10_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
              $10_1 = HEAPU8[(($5_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $5_1 = $10_1 ^ $25_1 | 0;
              $1_1 = $5_1 << 1 | 0;
              $52_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
              $37_1 = HEAPU8[(($13_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $13_1 = $10_1 ^ $37_1 | 0;
              $5_1 = $13_1 << 1 | 0;
              $53_1 = (($13_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1;
              $13_1 = $36_1 ^ $37_1 | 0;
              $5_1 = $13_1 << 1 | 0;
              $54_1 = ($13_1 << 24 | 0) >> 24 | 0;
              $55_1 = ($54_1 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1;
              $24_1 = HEAPU8[(($22_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $38_1 = HEAPU8[(($6_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $6_1 = $24_1 ^ $38_1 | 0;
              $5_1 = $6_1 << 1 | 0;
              $22_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1;
              $6_1 = HEAPU8[(($16_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $5_1 = $24_1 ^ $6_1 | 0;
              $1_1 = $5_1 << 1 | 0;
              $56_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
              $39_1 = HEAPU8[(($11_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $5_1 = $39_1 ^ $6_1 | 0;
              $11_1 = $5_1 << 1 | 0;
              $57_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
              $5_1 = $38_1 ^ $39_1 | 0;
              $11_1 = $5_1 << 1 | 0;
              $58_1 = ($5_1 << 24 | 0) >> 24 | 0;
              $59_1 = ($58_1 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
              $40_1 = HEAPU8[(($8_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $30_1 = HEAPU8[(($17_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $8_1 = $40_1 ^ $30_1 | 0;
              $11_1 = $8_1 << 1 | 0;
              $63_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
              $2_1 = HEAPU8[(($2_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $8_1 = $2_1 ^ $30_1 | 0;
              $11_1 = $8_1 << 1 | 0;
              $64_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
              $41_1 = HEAPU8[(($12_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
              $12_1 = $41_1 ^ $2_1 | 0;
              $8_1 = $12_1 << 1 | 0;
              $65_1 = (($12_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
              $12_1 = $40_1 ^ $41_1 | 0;
              $8_1 = $12_1 << 1 | 0;
              $66_1 = ($12_1 << 24 | 0) >> 24 | 0;
              $67_1 = ($66_1 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
              $68_1 = $7_1 ^ $9_1 | 0;
              $45_1 = $68_1 ^ $29_1 | 0;
              $69_1 = $10_1 ^ $13_1 | 0;
              $46_1 = $69_1 ^ $25_1 | 0;
              $70_1 = $5_1 ^ $6_1 | 0;
              $42_1 = $70_1 ^ $24_1 | 0;
              $71_1 = $2_1 ^ $12_1 | 0;
              $43_1 = $71_1 ^ $30_1 | 0;
              block4: {
                if ($27_1 & 1 | 0) {
                  $28_1 = HEAPU8[($0_1 + 16 | 0) >> 0] | 0;
                  $23_1 = HEAPU8[($0_1 + 17 | 0) >> 0] | 0;
                  $8_1 = HEAPU8[($0_1 + 18 | 0) >> 0] | 0;
                  $11_1 = HEAPU8[($0_1 + 19 | 0) >> 0] | 0;
                  $9_1 = HEAPU8[($0_1 + 20 | 0) >> 0] | 0;
                  $12_1 = HEAPU8[($0_1 + 21 | 0) >> 0] | 0;
                  $6_1 = HEAPU8[($0_1 + 22 | 0) >> 0] | 0;
                  $2_1 = HEAPU8[($0_1 + 23 | 0) >> 0] | 0;
                  $10_1 = HEAPU8[($0_1 + 24 | 0) >> 0] | 0;
                  $7_1 = HEAPU8[($0_1 + 25 | 0) >> 0] | 0;
                  $5_1 = HEAPU8[($0_1 + 26 | 0) >> 0] | 0;
                  $1_1 = HEAPU8[($0_1 + 27 | 0) >> 0] | 0;
                  $15_1 = HEAPU8[($0_1 + 28 | 0) >> 0] | 0;
                  $13_1 = HEAPU8[($0_1 + 29 | 0) >> 0] | 0;
                  $16_1 = HEAPU8[($0_1 + 30 | 0) >> 0] | 0;
                  $17_1 = HEAPU8[($0_1 + 31 | 0) >> 0] | 0;
                  break block4;
                }
                $60_1 = HEAPU8[($0_1 + 30 | 0) >> 0] | 0;
                $23_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) ^ (HEAPU8[($60_1 + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 1 | 0) >> 0] = $23_1;
                $72_1 = HEAPU8[($0_1 + 31 | 0) >> 0] | 0;
                $8_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) ^ (HEAPU8[($72_1 + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 2 | 0) >> 0] = $8_1;
                $73 = HEAPU8[($0_1 + 28 | 0) >> 0] | 0;
                $11_1 = (HEAPU8[($0_1 + 3 | 0) >> 0] | 0) ^ (HEAPU8[($73 + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 3 | 0) >> 0] = $11_1;
                $74 = HEAPU8[($0_1 + 29 | 0) >> 0] | 0;
                $28_1 = ((HEAPU8[($74 + 1856 | 0) >> 0] | 0) ^ (HEAPU8[$0_1 >> 0] | 0) | 0) ^ $26_1 | 0;
                HEAP8[$0_1 >> 0] = $28_1;
                $12_1 = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) ^ $23_1 | 0;
                HEAP8[($0_1 + 5 | 0) >> 0] = $12_1;
                $6_1 = (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) ^ $8_1 | 0;
                HEAP8[($0_1 + 6 | 0) >> 0] = $6_1;
                $9_1 = (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) ^ $28_1 | 0;
                HEAP8[($0_1 + 4 | 0) >> 0] = $9_1;
                $2_1 = (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) ^ $11_1 | 0;
                HEAP8[($0_1 + 7 | 0) >> 0] = $2_1;
                $10_1 = (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) ^ $9_1 | 0;
                HEAP8[($0_1 + 8 | 0) >> 0] = $10_1;
                $7_1 = (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) ^ $12_1 | 0;
                HEAP8[($0_1 + 9 | 0) >> 0] = $7_1;
                $5_1 = (HEAPU8[($0_1 + 10 | 0) >> 0] | 0) ^ $6_1 | 0;
                HEAP8[($0_1 + 10 | 0) >> 0] = $5_1;
                $1_1 = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) ^ $2_1 | 0;
                HEAP8[($0_1 + 11 | 0) >> 0] = $1_1;
                $15_1 = (HEAPU8[($0_1 + 12 | 0) >> 0] | 0) ^ $10_1 | 0;
                HEAP8[($0_1 + 12 | 0) >> 0] = $15_1;
                $13_1 = (HEAPU8[($0_1 + 13 | 0) >> 0] | 0) ^ $7_1 | 0;
                HEAP8[($0_1 + 13 | 0) >> 0] = $13_1;
                $16_1 = (HEAPU8[($0_1 + 14 | 0) >> 0] | 0) ^ $5_1 | 0;
                HEAP8[($0_1 + 14 | 0) >> 0] = $16_1;
                $17_1 = (HEAPU8[($0_1 + 15 | 0) >> 0] | 0) ^ $1_1 | 0;
                HEAP8[($0_1 + 15 | 0) >> 0] = $17_1;
                $32_1 = (HEAPU8[($0_1 + 16 | 0) >> 0] | 0) ^ (HEAPU8[(($15_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 16 | 0) >> 0] = $32_1;
                $33_1 = (HEAPU8[($0_1 + 17 | 0) >> 0] | 0) ^ (HEAPU8[(($13_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 17 | 0) >> 0] = $33_1;
                $34_1 = (HEAPU8[($0_1 + 18 | 0) >> 0] | 0) ^ (HEAPU8[(($16_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 18 | 0) >> 0] = $34_1;
                $61_1 = (HEAPU8[($0_1 + 19 | 0) >> 0] | 0) ^ (HEAPU8[(($17_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
                HEAP8[($0_1 + 19 | 0) >> 0] = $61_1;
                $32_1 = (HEAPU8[($0_1 + 20 | 0) >> 0] | 0) ^ $32_1 | 0;
                HEAP8[($0_1 + 20 | 0) >> 0] = $32_1;
                $33_1 = (HEAPU8[($0_1 + 21 | 0) >> 0] | 0) ^ $33_1 | 0;
                HEAP8[($0_1 + 21 | 0) >> 0] = $33_1;
                $34_1 = (HEAPU8[($0_1 + 22 | 0) >> 0] | 0) ^ $34_1 | 0;
                HEAP8[($0_1 + 22 | 0) >> 0] = $34_1;
                $61_1 = (HEAPU8[($0_1 + 23 | 0) >> 0] | 0) ^ $61_1 | 0;
                HEAP8[($0_1 + 23 | 0) >> 0] = $61_1;
                $32_1 = (HEAPU8[($0_1 + 24 | 0) >> 0] | 0) ^ $32_1 | 0;
                HEAP8[($0_1 + 24 | 0) >> 0] = $32_1;
                $33_1 = (HEAPU8[($0_1 + 25 | 0) >> 0] | 0) ^ $33_1 | 0;
                HEAP8[($0_1 + 25 | 0) >> 0] = $33_1;
                $34_1 = (HEAPU8[($0_1 + 26 | 0) >> 0] | 0) ^ $34_1 | 0;
                HEAP8[($0_1 + 26 | 0) >> 0] = $34_1;
                $75 = HEAPU8[($0_1 + 27 | 0) >> 0] | 0;
                HEAP8[($0_1 + 30 | 0) >> 0] = $34_1 ^ $60_1 | 0;
                HEAP8[($0_1 + 29 | 0) >> 0] = $33_1 ^ $74 | 0;
                HEAP8[($0_1 + 28 | 0) >> 0] = $32_1 ^ $73 | 0;
                $60_1 = $61_1 ^ $75 | 0;
                HEAP8[($0_1 + 27 | 0) >> 0] = $60_1;
                HEAP8[($0_1 + 31 | 0) >> 0] = $60_1 ^ $72_1 | 0;
                $26_1 = (((($26_1 << 24 | 0) >> 24 | 0) >>> 7 | 0) & 27 | 0) ^ ($26_1 << 1 | 0) | 0;
              }
              $17_1 = ($17_1 ^ $47_1 | 0) ^ $68_1 | 0;
              $1_1 = ($1_1 ^ $21_1 | 0) ^ $69_1 | 0;
              $21_1 = ($2_1 ^ $22_1 | 0) ^ $70_1 | 0;
              $22_1 = ($11_1 ^ $63_1 | 0) ^ $71_1 | 0;
              $16_1 = (($16_1 ^ $48_1 | 0) ^ $29_1 | 0) ^ $50_1 | 0;
              $13_1 = (($13_1 ^ $49_1 | 0) ^ $35_1 | 0) ^ $45_1 | 0;
              $18_1 = (($15_1 ^ $51_1 | 0) ^ $18_1 | 0) ^ $45_1 | 0;
              $2_1 = (($5_1 ^ $52_1 | 0) ^ $25_1 | 0) ^ $54_1 | 0;
              $11_1 = (($7_1 ^ $53_1 | 0) ^ $37_1 | 0) ^ $46_1 | 0;
              $10_1 = (($10_1 ^ $55_1 | 0) ^ $36_1 | 0) ^ $46_1 | 0;
              $7_1 = (($6_1 ^ $56_1 | 0) ^ $24_1 | 0) ^ $58_1 | 0;
              $12_1 = (($12_1 ^ $57_1 | 0) ^ $39_1 | 0) ^ $42_1 | 0;
              $6_1 = (($9_1 ^ $59_1 | 0) ^ $38_1 | 0) ^ $42_1 | 0;
              $5_1 = (($8_1 ^ $64_1 | 0) ^ $30_1 | 0) ^ $66_1 | 0;
              $9_1 = (($23_1 ^ $65_1 | 0) ^ $41_1 | 0) ^ $43_1 | 0;
              $8_1 = (($28_1 ^ $67_1 | 0) ^ $40_1 | 0) ^ $43_1 | 0;
              $15_1 = $27_1 & 255 | 0;
              $27_1 = $27_1 + 1 | 0;
              if ($15_1 >>> 0 < 13 >>> 0) {
                continue label1;
              }
              break label1;
            }
            HEAP8[($31_1 + 15 | 0) >> 0] = $26_1;
            $19($0_1 | 0, $31_1 + 15 | 0 | 0);
            $27_1 = HEAPU8[(($8_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $23_1 = HEAPU8[(($9_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $28_1 = HEAPU8[(($5_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $8_1 = HEAPU8[(($22_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $29_1 = HEAPU8[(($6_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $9_1 = HEAPU8[(($12_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $12_1 = HEAPU8[(($7_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $6_1 = HEAPU8[(($21_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $10_1 = HEAPU8[(($10_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $2_1 = HEAPU8[(($2_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $7_1 = HEAPU8[(($1_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $5_1 = HEAPU8[(($18_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $1_1 = HEAPU8[(($13_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $15_1 = HEAPU8[(($16_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $13_1 = HEAPU8[(($17_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $1390 = HEAPU8[(($11_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            break block5;
          }
          $42_1 = HEAPU8[($0_1 + 47 | 0) >> 0] | 0;
          HEAP8[($0_1 + 15 | 0) >> 0] = $42_1;
          $43_1 = HEAPU8[($0_1 + 46 | 0) >> 0] | 0;
          HEAP8[($0_1 + 14 | 0) >> 0] = $43_1;
          $47_1 = HEAPU8[($0_1 + 45 | 0) >> 0] | 0;
          HEAP8[($0_1 + 13 | 0) >> 0] = $47_1;
          $48_1 = HEAPU8[($0_1 + 44 | 0) >> 0] | 0;
          HEAP8[($0_1 + 12 | 0) >> 0] = $48_1;
          $126 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 61 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 62 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          HEAP8[($0_1 + 28 | 0) >> 0] = $126;
          HEAP8[($0_1 + 29 | 0) >> 0] = $126 >>> 8 | 0;
          HEAP8[($0_1 + 30 | 0) >> 0] = $126 >>> 16 | 0;
          HEAP8[($0_1 + 31 | 0) >> 0] = $126 >>> 24 | 0;
          $49_1 = HEAPU8[($0_1 + 43 | 0) >> 0] | 0;
          HEAP8[($0_1 + 11 | 0) >> 0] = $49_1;
          $2_1 = HEAPU8[($0_1 + 42 | 0) >> 0] | 0;
          HEAP8[($0_1 + 10 | 0) >> 0] = $2_1;
          $139 = HEAPU8[($0_1 + 58 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 59 | 0) >> 0] | 0) << 8 | 0) | 0;
          HEAP8[($0_1 + 26 | 0) >> 0] = $139;
          HEAP8[($0_1 + 27 | 0) >> 0] = $139 >>> 8 | 0;
          $50_1 = HEAPU8[($0_1 + 41 | 0) >> 0] | 0;
          HEAP8[($0_1 + 9 | 0) >> 0] = $50_1;
          HEAP8[($0_1 + 25 | 0) >> 0] = HEAPU8[($0_1 + 57 | 0) >> 0] | 0;
          $51_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
          HEAP8[($0_1 + 8 | 0) >> 0] = $51_1;
          $52_1 = HEAPU8[($0_1 + 39 | 0) >> 0] | 0;
          HEAP8[($0_1 + 7 | 0) >> 0] = $52_1;
          $53_1 = HEAPU8[($0_1 + 38 | 0) >> 0] | 0;
          HEAP8[($0_1 + 6 | 0) >> 0] = $53_1;
          $54_1 = HEAPU8[($0_1 + 37 | 0) >> 0] | 0;
          HEAP8[($0_1 + 5 | 0) >> 0] = $54_1;
          $127 = HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 54 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 55 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 56 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          HEAP8[($0_1 + 21 | 0) >> 0] = $127;
          HEAP8[($0_1 + 22 | 0) >> 0] = $127 >>> 8 | 0;
          HEAP8[($0_1 + 23 | 0) >> 0] = $127 >>> 16 | 0;
          HEAP8[($0_1 + 24 | 0) >> 0] = $127 >>> 24 | 0;
          $55_1 = HEAPU8[($0_1 + 36 | 0) >> 0] | 0;
          HEAP8[($0_1 + 4 | 0) >> 0] = $55_1;
          HEAP8[($0_1 + 20 | 0) >> 0] = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
          $56_1 = HEAPU8[($0_1 + 35 | 0) >> 0] | 0;
          HEAP8[($0_1 + 3 | 0) >> 0] = $56_1;
          HEAP8[($0_1 + 19 | 0) >> 0] = HEAPU8[($0_1 + 51 | 0) >> 0] | 0;
          $57_1 = HEAPU8[($0_1 + 34 | 0) >> 0] | 0;
          HEAP8[($0_1 + 2 | 0) >> 0] = $57_1;
          HEAP8[($0_1 + 18 | 0) >> 0] = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
          $58_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
          HEAP8[($0_1 + 1 | 0) >> 0] = $58_1;
          $59_1 = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
          HEAP8[$0_1 >> 0] = $59_1;
          $140 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) << 8 | 0) | 0;
          HEAP8[($0_1 + 16 | 0) >> 0] = $140;
          HEAP8[($0_1 + 17 | 0) >> 0] = $140 >>> 8 | 0;
          $27_1 = 1;
          HEAP8[($31_1 + 15 | 0) >> 0] = 1;
          $11_1 = $50_1 ^ ($11_1 ^ $24_1 | 0) | 0;
          $2_1 = $2_1 ^ ($25_1 ^ $28_1 | 0) | 0;
          $1_1 = $49_1 ^ ($1_1 ^ $6_1 | 0) | 0;
          $18_1 = $48_1 ^ ($5_1 ^ $18_1 | 0) | 0;
          $13_1 = $47_1 ^ ($13_1 ^ $23_1 | 0) | 0;
          $16_1 = $43_1 ^ ($12_1 ^ $16_1 | 0) | 0;
          $17_1 = $42_1 ^ ($7_1 ^ $17_1 | 0) | 0;
          $22_1 = $56_1 ^ ($22_1 ^ $40_1 | 0) | 0;
          $6_1 = $55_1 ^ ($29_1 ^ $39_1 | 0) | 0;
          $12_1 = $54_1 ^ ($21_1 ^ $38_1 | 0) | 0;
          $7_1 = $53_1 ^ ($15_1 ^ $37_1 | 0) | 0;
          $21_1 = $52_1 ^ ($8_1 ^ $36_1 | 0) | 0;
          $10_1 = $51_1 ^ ($10_1 ^ $35_1 | 0) | 0;
          $8_1 = $59_1 ^ ($26_1 ^ $46_1 | 0) | 0;
          $9_1 = $58_1 ^ ($9_1 ^ $45_1 | 0) | 0;
          $5_1 = $57_1 ^ ($30_1 ^ $41_1 | 0) | 0;
          $26_1 = 1;
          label2: while (1) {
            $29_1 = HEAPU8[(($1_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $18_1 = HEAPU8[(($18_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $1_1 = $29_1 ^ $18_1 | 0;
            $15_1 = $1_1 << 1 | 0;
            $47_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $15_1 ^ 27 | 0 : $15_1;
            $7_1 = HEAPU8[(($7_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $1_1 = $7_1 ^ $29_1 | 0;
            $15_1 = $1_1 << 1 | 0;
            $48_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $15_1 ^ 27 | 0 : $15_1;
            $35_1 = HEAPU8[(($9_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $9_1 = $35_1 ^ $7_1 | 0;
            $1_1 = $9_1 << 1 | 0;
            $49_1 = (($9_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
            $9_1 = $18_1 ^ $35_1 | 0;
            $1_1 = $9_1 << 1 | 0;
            $50_1 = ($9_1 << 24 | 0) >> 24 | 0;
            $51_1 = ($50_1 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
            $25_1 = HEAPU8[(($21_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $36_1 = HEAPU8[(($10_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $10_1 = $25_1 ^ $36_1 | 0;
            $1_1 = $10_1 << 1 | 0;
            $21_1 = (($10_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
            $10_1 = HEAPU8[(($5_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $5_1 = $10_1 ^ $25_1 | 0;
            $1_1 = $5_1 << 1 | 0;
            $52_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
            $37_1 = HEAPU8[(($13_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $13_1 = $10_1 ^ $37_1 | 0;
            $5_1 = $13_1 << 1 | 0;
            $53_1 = (($13_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1;
            $13_1 = $36_1 ^ $37_1 | 0;
            $5_1 = $13_1 << 1 | 0;
            $54_1 = ($13_1 << 24 | 0) >> 24 | 0;
            $55_1 = ($54_1 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1;
            $24_1 = HEAPU8[(($22_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $38_1 = HEAPU8[(($6_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $6_1 = $24_1 ^ $38_1 | 0;
            $5_1 = $6_1 << 1 | 0;
            $22_1 = (($6_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $5_1 ^ 27 | 0 : $5_1;
            $6_1 = HEAPU8[(($16_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $5_1 = $24_1 ^ $6_1 | 0;
            $1_1 = $5_1 << 1 | 0;
            $56_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $1_1 ^ 27 | 0 : $1_1;
            $39_1 = HEAPU8[(($11_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $5_1 = $39_1 ^ $6_1 | 0;
            $11_1 = $5_1 << 1 | 0;
            $57_1 = (($5_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
            $5_1 = $38_1 ^ $39_1 | 0;
            $11_1 = $5_1 << 1 | 0;
            $58_1 = ($5_1 << 24 | 0) >> 24 | 0;
            $59_1 = ($58_1 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
            $40_1 = HEAPU8[(($8_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $30_1 = HEAPU8[(($17_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $8_1 = $40_1 ^ $30_1 | 0;
            $11_1 = $8_1 << 1 | 0;
            $63_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
            $2_1 = HEAPU8[(($2_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $8_1 = $2_1 ^ $30_1 | 0;
            $11_1 = $8_1 << 1 | 0;
            $64_1 = (($8_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $11_1 ^ 27 | 0 : $11_1;
            $41_1 = HEAPU8[(($12_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
            $12_1 = $41_1 ^ $2_1 | 0;
            $8_1 = $12_1 << 1 | 0;
            $65_1 = (($12_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
            $12_1 = $40_1 ^ $41_1 | 0;
            $8_1 = $12_1 << 1 | 0;
            $66_1 = ($12_1 << 24 | 0) >> 24 | 0;
            $67_1 = ($66_1 | 0) < (0 | 0) ? $8_1 ^ 27 | 0 : $8_1;
            $68_1 = $7_1 ^ $9_1 | 0;
            $45_1 = $68_1 ^ $29_1 | 0;
            $69_1 = $10_1 ^ $13_1 | 0;
            $46_1 = $69_1 ^ $25_1 | 0;
            $70_1 = $5_1 ^ $6_1 | 0;
            $42_1 = $70_1 ^ $24_1 | 0;
            $71_1 = $2_1 ^ $12_1 | 0;
            $43_1 = $71_1 ^ $30_1 | 0;
            block6: {
              if ($27_1 & 1 | 0) {
                $28_1 = HEAPU8[($0_1 + 16 | 0) >> 0] | 0;
                $23_1 = HEAPU8[($0_1 + 17 | 0) >> 0] | 0;
                $8_1 = HEAPU8[($0_1 + 18 | 0) >> 0] | 0;
                $11_1 = HEAPU8[($0_1 + 19 | 0) >> 0] | 0;
                $9_1 = HEAPU8[($0_1 + 20 | 0) >> 0] | 0;
                $12_1 = HEAPU8[($0_1 + 21 | 0) >> 0] | 0;
                $6_1 = HEAPU8[($0_1 + 22 | 0) >> 0] | 0;
                $2_1 = HEAPU8[($0_1 + 23 | 0) >> 0] | 0;
                $10_1 = HEAPU8[($0_1 + 24 | 0) >> 0] | 0;
                $7_1 = HEAPU8[($0_1 + 25 | 0) >> 0] | 0;
                $5_1 = HEAPU8[($0_1 + 26 | 0) >> 0] | 0;
                $1_1 = HEAPU8[($0_1 + 27 | 0) >> 0] | 0;
                $15_1 = HEAPU8[($0_1 + 28 | 0) >> 0] | 0;
                $13_1 = HEAPU8[($0_1 + 29 | 0) >> 0] | 0;
                $16_1 = HEAPU8[($0_1 + 30 | 0) >> 0] | 0;
                $17_1 = HEAPU8[($0_1 + 31 | 0) >> 0] | 0;
                break block6;
              }
              $60_1 = HEAPU8[($0_1 + 30 | 0) >> 0] | 0;
              $23_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) ^ (HEAPU8[($60_1 + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 1 | 0) >> 0] = $23_1;
              $72_1 = HEAPU8[($0_1 + 31 | 0) >> 0] | 0;
              $8_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) ^ (HEAPU8[($72_1 + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 2 | 0) >> 0] = $8_1;
              $73 = HEAPU8[($0_1 + 28 | 0) >> 0] | 0;
              $11_1 = (HEAPU8[($0_1 + 3 | 0) >> 0] | 0) ^ (HEAPU8[($73 + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 3 | 0) >> 0] = $11_1;
              $74 = HEAPU8[($0_1 + 29 | 0) >> 0] | 0;
              $28_1 = ((HEAPU8[($74 + 1856 | 0) >> 0] | 0) ^ (HEAPU8[$0_1 >> 0] | 0) | 0) ^ $26_1 | 0;
              HEAP8[$0_1 >> 0] = $28_1;
              $12_1 = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) ^ $23_1 | 0;
              HEAP8[($0_1 + 5 | 0) >> 0] = $12_1;
              $6_1 = (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) ^ $8_1 | 0;
              HEAP8[($0_1 + 6 | 0) >> 0] = $6_1;
              $9_1 = (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) ^ $28_1 | 0;
              HEAP8[($0_1 + 4 | 0) >> 0] = $9_1;
              $2_1 = (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) ^ $11_1 | 0;
              HEAP8[($0_1 + 7 | 0) >> 0] = $2_1;
              $10_1 = (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) ^ $9_1 | 0;
              HEAP8[($0_1 + 8 | 0) >> 0] = $10_1;
              $7_1 = (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) ^ $12_1 | 0;
              HEAP8[($0_1 + 9 | 0) >> 0] = $7_1;
              $5_1 = (HEAPU8[($0_1 + 10 | 0) >> 0] | 0) ^ $6_1 | 0;
              HEAP8[($0_1 + 10 | 0) >> 0] = $5_1;
              $1_1 = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) ^ $2_1 | 0;
              HEAP8[($0_1 + 11 | 0) >> 0] = $1_1;
              $15_1 = (HEAPU8[($0_1 + 12 | 0) >> 0] | 0) ^ $10_1 | 0;
              HEAP8[($0_1 + 12 | 0) >> 0] = $15_1;
              $13_1 = (HEAPU8[($0_1 + 13 | 0) >> 0] | 0) ^ $7_1 | 0;
              HEAP8[($0_1 + 13 | 0) >> 0] = $13_1;
              $16_1 = (HEAPU8[($0_1 + 14 | 0) >> 0] | 0) ^ $5_1 | 0;
              HEAP8[($0_1 + 14 | 0) >> 0] = $16_1;
              $17_1 = (HEAPU8[($0_1 + 15 | 0) >> 0] | 0) ^ $1_1 | 0;
              HEAP8[($0_1 + 15 | 0) >> 0] = $17_1;
              $32_1 = (HEAPU8[($0_1 + 16 | 0) >> 0] | 0) ^ (HEAPU8[(($15_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 16 | 0) >> 0] = $32_1;
              $33_1 = (HEAPU8[($0_1 + 17 | 0) >> 0] | 0) ^ (HEAPU8[(($13_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 17 | 0) >> 0] = $33_1;
              $34_1 = (HEAPU8[($0_1 + 18 | 0) >> 0] | 0) ^ (HEAPU8[(($16_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 18 | 0) >> 0] = $34_1;
              $61_1 = (HEAPU8[($0_1 + 19 | 0) >> 0] | 0) ^ (HEAPU8[(($17_1 & 255 | 0) + 1856 | 0) >> 0] | 0) | 0;
              HEAP8[($0_1 + 19 | 0) >> 0] = $61_1;
              $32_1 = (HEAPU8[($0_1 + 20 | 0) >> 0] | 0) ^ $32_1 | 0;
              HEAP8[($0_1 + 20 | 0) >> 0] = $32_1;
              $33_1 = (HEAPU8[($0_1 + 21 | 0) >> 0] | 0) ^ $33_1 | 0;
              HEAP8[($0_1 + 21 | 0) >> 0] = $33_1;
              $34_1 = (HEAPU8[($0_1 + 22 | 0) >> 0] | 0) ^ $34_1 | 0;
              HEAP8[($0_1 + 22 | 0) >> 0] = $34_1;
              $61_1 = (HEAPU8[($0_1 + 23 | 0) >> 0] | 0) ^ $61_1 | 0;
              HEAP8[($0_1 + 23 | 0) >> 0] = $61_1;
              $32_1 = (HEAPU8[($0_1 + 24 | 0) >> 0] | 0) ^ $32_1 | 0;
              HEAP8[($0_1 + 24 | 0) >> 0] = $32_1;
              $33_1 = (HEAPU8[($0_1 + 25 | 0) >> 0] | 0) ^ $33_1 | 0;
              HEAP8[($0_1 + 25 | 0) >> 0] = $33_1;
              $34_1 = (HEAPU8[($0_1 + 26 | 0) >> 0] | 0) ^ $34_1 | 0;
              HEAP8[($0_1 + 26 | 0) >> 0] = $34_1;
              $75 = HEAPU8[($0_1 + 27 | 0) >> 0] | 0;
              HEAP8[($0_1 + 30 | 0) >> 0] = $34_1 ^ $60_1 | 0;
              HEAP8[($0_1 + 29 | 0) >> 0] = $33_1 ^ $74 | 0;
              HEAP8[($0_1 + 28 | 0) >> 0] = $32_1 ^ $73 | 0;
              $60_1 = $61_1 ^ $75 | 0;
              HEAP8[($0_1 + 27 | 0) >> 0] = $60_1;
              HEAP8[($0_1 + 31 | 0) >> 0] = $60_1 ^ $72_1 | 0;
              $26_1 = (((($26_1 << 24 | 0) >> 24 | 0) >>> 7 | 0) & 27 | 0) ^ ($26_1 << 1 | 0) | 0;
            }
            $17_1 = ($17_1 ^ $47_1 | 0) ^ $68_1 | 0;
            $1_1 = ($1_1 ^ $21_1 | 0) ^ $69_1 | 0;
            $21_1 = ($2_1 ^ $22_1 | 0) ^ $70_1 | 0;
            $22_1 = ($11_1 ^ $63_1 | 0) ^ $71_1 | 0;
            $16_1 = (($16_1 ^ $48_1 | 0) ^ $29_1 | 0) ^ $50_1 | 0;
            $13_1 = (($13_1 ^ $49_1 | 0) ^ $35_1 | 0) ^ $45_1 | 0;
            $18_1 = (($15_1 ^ $51_1 | 0) ^ $18_1 | 0) ^ $45_1 | 0;
            $2_1 = (($5_1 ^ $52_1 | 0) ^ $25_1 | 0) ^ $54_1 | 0;
            $11_1 = (($7_1 ^ $53_1 | 0) ^ $37_1 | 0) ^ $46_1 | 0;
            $10_1 = (($10_1 ^ $55_1 | 0) ^ $36_1 | 0) ^ $46_1 | 0;
            $7_1 = (($6_1 ^ $56_1 | 0) ^ $24_1 | 0) ^ $58_1 | 0;
            $12_1 = (($12_1 ^ $57_1 | 0) ^ $39_1 | 0) ^ $42_1 | 0;
            $6_1 = (($9_1 ^ $59_1 | 0) ^ $38_1 | 0) ^ $42_1 | 0;
            $5_1 = (($8_1 ^ $64_1 | 0) ^ $30_1 | 0) ^ $66_1 | 0;
            $9_1 = (($23_1 ^ $65_1 | 0) ^ $41_1 | 0) ^ $43_1 | 0;
            $8_1 = (($28_1 ^ $67_1 | 0) ^ $40_1 | 0) ^ $43_1 | 0;
            $15_1 = $27_1 & 255 | 0;
            $27_1 = $27_1 + 1 | 0;
            if ($15_1 >>> 0 < 13 >>> 0) {
              continue label2;
            }
            break label2;
          }
          HEAP8[($31_1 + 15 | 0) >> 0] = $26_1;
          $19($0_1 | 0, $31_1 + 15 | 0 | 0);
          $27_1 = HEAPU8[(($8_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $23_1 = HEAPU8[(($9_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $28_1 = HEAPU8[(($5_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $8_1 = HEAPU8[(($22_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $29_1 = HEAPU8[(($6_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $9_1 = HEAPU8[(($12_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $12_1 = HEAPU8[(($7_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $6_1 = HEAPU8[(($21_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $10_1 = HEAPU8[(($10_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $2_1 = HEAPU8[(($2_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $7_1 = HEAPU8[(($1_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $5_1 = HEAPU8[(($18_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $1_1 = HEAPU8[(($13_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $15_1 = HEAPU8[(($16_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $13_1 = HEAPU8[(($17_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
          $1390 = HEAPU8[(($11_1 & 255 | 0) + 1856 | 0) >> 0] | 0;
        }
        $11_1 = $1390;
        $16_1 = HEAPU8[($0_1 + 15 | 0) >> 0] | 0;
        $17_1 = HEAPU8[($0_1 + 14 | 0) >> 0] | 0;
        $18_1 = HEAPU8[($0_1 + 13 | 0) >> 0] | 0;
        $25_1 = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
        $24_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
        $35_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
        $36_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
        $37_1 = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
        $38_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
        $39_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
        $21_1 = HEAPU8[($0_1 + 5 | 0) >> 0] | 0;
        $40_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
        $22_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
        $30_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        $41_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        $26_1 = (HEAPU8[$0_1 >> 0] | 0) ^ $27_1 | 0;
        HEAP8[($19_1 + $20_1 | 0) >> 0] = $26_1;
        $9_1 = $9_1 ^ $41_1 | 0;
        HEAP8[($20_1 + $78 | 0) >> 0] = $9_1;
        $30_1 = $2_1 ^ $30_1 | 0;
        HEAP8[($20_1 + $79 | 0) >> 0] = $30_1;
        $22_1 = $13_1 ^ $22_1 | 0;
        HEAP8[($20_1 + $80 | 0) >> 0] = $22_1;
        $29_1 = $29_1 ^ $40_1 | 0;
        HEAP8[($20_1 + $81 | 0) >> 0] = $29_1;
        $21_1 = $11_1 ^ $21_1 | 0;
        HEAP8[($20_1 + $82 | 0) >> 0] = $21_1;
        $15_1 = $15_1 ^ $39_1 | 0;
        HEAP8[($20_1 + $83 | 0) >> 0] = $15_1;
        $8_1 = $8_1 ^ $38_1 | 0;
        HEAP8[($20_1 + $84 | 0) >> 0] = $8_1;
        $10_1 = $10_1 ^ $37_1 | 0;
        HEAP8[($20_1 + $85 | 0) >> 0] = $10_1;
        $11_1 = $1_1 ^ $36_1 | 0;
        HEAP8[($20_1 + $86 | 0) >> 0] = $11_1;
        $28_1 = $28_1 ^ $35_1 | 0;
        HEAP8[($20_1 + $87 | 0) >> 0] = $28_1;
        $6_1 = $6_1 ^ $24_1 | 0;
        HEAP8[($20_1 + $88 | 0) >> 0] = $6_1;
        $5_1 = $5_1 ^ $25_1 | 0;
        HEAP8[($20_1 + $89 | 0) >> 0] = $5_1;
        $13_1 = $18_1 ^ $23_1 | 0;
        HEAP8[($20_1 + $90 | 0) >> 0] = $13_1;
        $12_1 = $12_1 ^ $17_1 | 0;
        HEAP8[($20_1 + $91 | 0) >> 0] = $12_1;
        $7_1 = $7_1 ^ $16_1 | 0;
        HEAP8[($20_1 + $92 | 0) >> 0] = $7_1;
        $62_1 = $62_1 + 1 | 0;
        $27_1 = $62_1 & 255 | 0;
        if ($77 >>> 0 > $27_1 >>> 0) {
          continue label3;
        }
        break label3;
      }
    }
    global$0 = $31_1 + 16 | 0;
    HEAP32[($44_1 + 8 | 0) >> 2] = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
    $13($14_1 | 0);
    global$0 = $0_1 + 96 | 0;
    $2_1 = $44_1;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 136 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] = i64toi32_i32$0;
    block8: {
      block7: {
        $0_1 = fimport$0() | 0;
        if ($0_1) {
          $7_1 = $2($0_1 | 0) | 0;
          if ($7_1) {
            break block7;
          }
        }
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($3_1 + 220 | 0) >> 2] | 0;
        $2469 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[(i64toi32_i32$0 + 168 | 0) >> 2] = $2469;
        HEAP32[(i64toi32_i32$0 + 172 | 0) >> 2] = i64toi32_i32$3;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$3 = HEAP32[$4_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        $2472 = i64toi32_i32$3;
        i64toi32_i32$3 = $3_1;
        HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] = $2472;
        HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 200 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$3 + 204 | 0) >> 2] | 0;
        $2475 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = $2475;
        HEAP32[(i64toi32_i32$0 + 156 | 0) >> 2] = i64toi32_i32$3;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 196 | 0) >> 2] | 0;
        $2478 = i64toi32_i32$3;
        i64toi32_i32$3 = $3_1;
        HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] = $2478;
        HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 184 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$3 + 188 | 0) >> 2] | 0;
        $2481 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = $2481;
        HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] = i64toi32_i32$3;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
        $2484 = i64toi32_i32$3;
        i64toi32_i32$3 = $3_1;
        HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] = $2484;
        HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] = i64toi32_i32$0;
        break block8;
      }
      $6_1 = $3_1 + 176 | 0;
      $7_1 = $7_1 >>> 0 >= 48 >>> 0 ? 48 : $7_1;
      $9_1 = $3_1 + 128 | 0;
      $4_1 = 0;
      $10_1 = 0;
      label4: while (1) {
        HEAP8[($4_1 + $9_1 | 0) >> 0] = (HEAPU8[($0_1 + (($4_1 >>> 0) % ($7_1 >>> 0) | 0) | 0) >> 0] | 0) ^ (HEAPU8[($4_1 + $6_1 | 0) >> 0] | 0) | 0;
        $12_1 = $4_1 | 1 | 0;
        HEAP8[($9_1 + $12_1 | 0) >> 0] = (HEAPU8[($0_1 + (($12_1 >>> 0) % ($7_1 >>> 0) | 0) | 0) >> 0] | 0) ^ (HEAPU8[($6_1 + $12_1 | 0) >> 0] | 0) | 0;
        $4_1 = $4_1 + 2 | 0;
        $10_1 = $10_1 + 2 | 0;
        if (($10_1 | 0) != (48 | 0)) {
          continue label4;
        }
        break label4;
      }
      $8($0_1 | 0);
    }
    $4_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 160 | 0;
    HEAP32[($3_1 + 116 | 0) >> 2] = $4_1;
    $4_1 = $14($4_1 | 0) | 0;
    HEAP32[($3_1 + 120 | 0) >> 2] = 8;
    HEAP32[($3_1 + 112 | 0) >> 2] = $4_1;
    $4_1 = $3_1 + 112 | 0;
    $27($4_1 | 0, 0 | 0, 1 | 0);
    i64toi32_i32$0 = 0;
    $28($4_1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
    $27($4_1 | 0, 2 | 0, 2 | 0);
    $36($4_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0);
    $27($4_1 | 0, 2 | 0, 3 | 0);
    $36($4_1 | 0, $3_1 + 128 | 0 | 0, 48 | 0);
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 152 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 156 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 136 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = i64toi32_i32$3 + 8 | 0;
    $12($4_1 | 0, 0 | 0, 88 | 0) | 0;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = -271733879;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 1732584193;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 271733878;
    HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = -1732584194;
    HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$0;
    $11(i64toi32_i32$3 | 0, HEAP32[$2_1 >> 2] | 0 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0);
    $13($2_1 | 0);
    $11(i64toi32_i32$3 | 0, $3_1 + 176 | 0 | 0, 48 | 0);
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 216 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 220 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 200 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 204 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 192 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 196 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 184 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 188 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = fimport$0() | 0;
    if ($4_1) {
      $11(i64toi32_i32$3 + 8 | 0 | 0, $4_1 | 0, $2($4_1 | 0) | 0 | 0);
      $8($4_1 | 0);
    }
    $4_1 = fimport$12() | 0;
    if ($4_1) {
      $11($3_1 + 8 | 0 | 0, $4_1 | 0, $2($4_1 | 0) | 0 | 0);
      $8($4_1 | 0);
    }
    $4_1 = $3_1 + 8 | 0;
    $2_1 = $3_1 + 96 | 0;
    $25($4_1 | 0, $2_1 | 0);
    $12($4_1 | 0, 0 | 0, 88 | 0) | 0;
    $4_1 = $3_1 + 112 | 0;
    $27($4_1 | 0, 2 | 0, 4 | 0);
    $36($4_1 | 0, $2_1 | 0, 16 | 0);
    $4_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 120 | 0) >> 2] | 0) - 8 | 0;
    global$0 = $3_1 + 240 | 0;
    return $4_1 | 0;
  }
  function $69($0_1) {
    $0_1 = $0_1 | 0;
    if (($0_1 | 0) <= (0 | 0)) {
      return 0 | 0;
    }
    return $42($0_1 | 0) | 0 | 0;
  }
  function $70($0_1, $1_1, $2_1) {
    $0_1 = $0_1 | 0;
    $1_1 = $1_1 | 0;
    $2_1 = $2_1 | 0;
    var $3_1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$2 = 0,
      $5_1 = 0,
      $4_1 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$3 = 0,
      $6_1 = 0,
      $7_1 = 0,
      i64toi32_i32$5 = 0,
      $9_1 = 0,
      $10_1 = 0,
      $23_1 = 0,
      $12_1 = 0,
      $23$hi = 0,
      $11_1 = 0,
      $15_1 = 0,
      $14_1 = 0,
      $8_1 = 0,
      $16_1 = 0,
      $18_1 = 0,
      $24_1 = 0,
      $20_1 = 0,
      $17_1 = 0,
      $79 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0,
      $13_1 = 0,
      $21_1 = 0,
      $19_1 = 0,
      $208 = 0,
      $88 = 0,
      $89 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $97 = 0,
      $98 = 0,
      $99 = 0,
      $519 = 0,
      $22_1 = 0,
      $100 = 0,
      $198 = 0,
      $269 = 0,
      $282 = 0,
      $313 = 0,
      $318 = 0,
      $318$hi = 0,
      $320$hi = 0,
      $321 = 0,
      $321$hi = 0,
      $324 = 0,
      $324$hi = 0,
      $327 = 0,
      $327$hi = 0,
      $328 = 0,
      $328$hi = 0,
      $329 = 0,
      $329$hi = 0,
      $332 = 0,
      $332$hi = 0,
      $335 = 0,
      $335$hi = 0,
      $336 = 0,
      $336$hi = 0,
      $339 = 0,
      $339$hi = 0,
      $341$hi = 0,
      $342 = 0,
      $342$hi = 0,
      $343 = 0,
      $343$hi = 0,
      $369 = 0,
      $371 = 0,
      $376 = 0,
      $378 = 0,
      $383 = 0,
      $385 = 0,
      $390 = 0,
      $392 = 0,
      $516 = 0,
      $551 = 0,
      $554 = 0,
      $557 = 0,
      $560 = 0,
      $595 = 0,
      $599$hi = 0;
    $13_1 = global$0 - 224 | 0;
    global$0 = $13_1;
    $21_1 = 2e3;
    block: {
      if (!$0_1) {
        break block;
      }
      if (!(HEAPU8[$0_1 >> 0] | 0)) {
        break block;
      }
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = i64toi32_i32$0;
      $21_1 = 0;
      HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = 0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] = $1_1;
      HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = $0_1;
      $38(i64toi32_i32$1 + 176 | 0 | 0);
      $0_1 = $12(i64toi32_i32$1 | 0, 0 | 0, 171 | 0) | 0;
      $4_1 = $0_1 + 176 | 0;
      $19_1 = $0_1;
      $7_1 = global$0 - 432 | 0;
      global$0 = $7_1;
      block1: {
        if (!$4_1) {
          break block1;
        }
        if (!$0_1) {
          break block1;
        }
        $16_1 = $12($7_1 - -64 | 0 | 0, 0 | 0, 264 | 0) | 0;
        HEAP16[($7_1 + 324 | 0) >> 1] = 887;
        HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
        HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
        $1_1 = 0;
        $5_1 = 255;
        $0_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
        $4_1 = $2($0_1 | 0) | 0;
        block2: {
          if (!$0_1) {
            break block2;
          }
          if (!$4_1) {
            break block2;
          }
          label: while (1) {
            $1_1 = (HEAPU8[$0_1 >> 0] | 0) ^ $1_1 | 0;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $6_1 = $1_1 << 1 | 0;
            $1_1 = (($1_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? $6_1 ^ 7 | 0 : $6_1;
            $0_1 = $0_1 + 1 | 0;
            $4_1 = $4_1 - 1 | 0;
            if ($4_1) {
              continue label;
            }
            break label;
          }
          $1_1 = $1_1 ^ 85 | 0;
        }
        $0_1 = ($1_1 & 255 | 0) + 4512 | 0;
        $1_1 = HEAPU8[$0_1 >> 0] | 0;
        if (($1_1 | 0) != (255 | 0)) {
          $5_1 = $1_1 + 1 | 0;
          HEAP8[$0_1 >> 0] = $5_1;
        }
        $5_1 = $5_1 & 255 | 0;
        $0_1 = global$0 - 272 | 0;
        global$0 = $0_1;
        if ($16_1) {
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = 0;
          HEAP32[($0_1 + 88 | 0) >> 2] = 0;
          HEAP32[($0_1 + 92 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = 0;
          HEAP32[($0_1 + 80 | 0) >> 2] = 0;
          HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$0;
          $6_1 = $0_1 + 72 | 0;
          i64toi32_i32$1 = $6_1;
          i64toi32_i32$0 = 0;
          HEAP32[i64toi32_i32$1 >> 2] = 0;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = 0;
          HEAP32[($0_1 + 64 | 0) >> 2] = 0;
          HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$0;
          HEAP8[($0_1 + 57 | 0) >> 0] = 3;
          HEAP8[($0_1 + 56 | 0) >> 0] = $5_1;
          HEAP32[($0_1 + 92 | 0) >> 2] = $16_1;
          i64toi32_i32$0 = $34() | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $23_1 = i64toi32_i32$0;
          $23$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $0_1;
          HEAP32[($0_1 + 48 | 0) >> 2] = $23_1;
          HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$1;
          $24_1 = +fimport$20();
          i64toi32_i32$0 = $0_1;
          HEAP32[($0_1 + 40 | 0) >> 2] = $23_1;
          HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$1;
          $198 = $0_1;
          block3: {
            $24_1 = $24_1 * 255;
            if ($24_1 < 4294967296 & $24_1 >= 0 | 0) {
              $208 = ~~$24_1 >>> 0;
              break block3;
            }
            $208 = 0;
          }
          $1_1 = (($208 >>> 0) % (255 >>> 0) | 0) + 1 | 0;
          HEAP8[($198 + 58 | 0) >> 0] = $1_1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 264 | 0) >> 2] = 0;
          HEAP32[($0_1 + 268 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 256 | 0) >> 2] = 0;
          HEAP32[($0_1 + 260 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $23$hi;
          HEAP32[($0_1 + 32 | 0) >> 2] = (($1_1 + $23_1 | 0) ^ $1_1 | 0) & 255 | 0;
          $4_1 = $0_1 + 256 | 0;
          $18($4_1 | 0, 16 | 0, 1362 | 0, $0_1 + 32 | 0 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 3;
          HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
          $8_1 = $1_1 & 255 | 0;
          HEAP32[($0_1 + 28 | 0) >> 2] = $8_1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          $79 = 0;
          HEAP8[($0_1 + 237 | 0) >> 0] = $79;
          HEAP8[($0_1 + 238 | 0) >> 0] = $79 >>> 8 | 0;
          HEAP8[($0_1 + 239 | 0) >> 0] = $79 >>> 16 | 0;
          HEAP8[($0_1 + 240 | 0) >> 0] = $79 >>> 24 | 0;
          HEAP8[($0_1 + 241 | 0) >> 0] = i64toi32_i32$1;
          HEAP8[($0_1 + 242 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
          HEAP8[($0_1 + 243 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
          HEAP8[($0_1 + 244 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 232 | 0) >> 2] = 0;
          HEAP32[($0_1 + 236 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 224 | 0) >> 2] = 0;
          HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$1;
          HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
          $9_1 = $0_1 + 224 | 0;
          $18($9_1 | 0, 21 | 0, 1075 | 0, $0_1 + 16 | 0 | 0);
          $1_1 = $0_1 + 136 | 0;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$1 = -271733879;
          HEAP32[($1_1 + 8 | 0) >> 2] = 1732584193;
          HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$1 = 0;
          HEAP32[$1_1 >> 2] = 0;
          HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$1 = 271733878;
          HEAP32[($1_1 + 16 | 0) >> 2] = -1732584194;
          HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
          $11($1_1 | 0, $9_1 | 0, $2($9_1 | 0) | 0 | 0);
          $25($1_1 | 0, $4_1 | 0);
          HEAP8[($0_1 + 128 | 0) >> 0] = 0;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 120 | 0) >> 2] = 0;
          HEAP32[($0_1 + 124 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 112 | 0) >> 2] = 0;
          HEAP32[($0_1 + 116 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 104 | 0) >> 2] = 0;
          HEAP32[($0_1 + 108 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 96 | 0) >> 2] = 0;
          HEAP32[($0_1 + 100 | 0) >> 2] = i64toi32_i32$1;
          $24($4_1 | 0, 16 | 0, $0_1 + 96 | 0 | 0);
          $80 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
          HEAP8[($0_1 + 67 | 0) >> 0] = $80;
          HEAP8[($0_1 + 68 | 0) >> 0] = $80 >>> 8 | 0;
          HEAP8[($0_1 + 69 | 0) >> 0] = $80 >>> 16 | 0;
          HEAP8[($0_1 + 70 | 0) >> 0] = $80 >>> 24 | 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
          $269 = i64toi32_i32$1;
          i64toi32_i32$1 = $0_1;
          $81 = $269;
          HEAP8[($0_1 + 59 | 0) >> 0] = $81;
          HEAP8[($0_1 + 60 | 0) >> 0] = $81 >>> 8 | 0;
          HEAP8[($0_1 + 61 | 0) >> 0] = $81 >>> 16 | 0;
          HEAP8[($0_1 + 62 | 0) >> 0] = $81 >>> 24 | 0;
          HEAP8[($0_1 + 63 | 0) >> 0] = i64toi32_i32$0;
          HEAP8[($0_1 + 64 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
          HEAP8[($0_1 + 65 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
          HEAP8[($0_1 + 66 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
          HEAP32[$0_1 >> 2] = $5_1;
          HEAP32[($0_1 + 4 | 0) >> 2] = 3;
          HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
          $18($6_1 | 0, 6 | 0, 1088 | 0, $0_1 | 0);
          $82 = HEAPU8[($0_1 + 66 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 67 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 68 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 69 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          HEAP8[($0_1 + 84 | 0) >> 0] = $82;
          HEAP8[($0_1 + 85 | 0) >> 0] = $82 >>> 8 | 0;
          HEAP8[($0_1 + 86 | 0) >> 0] = $82 >>> 16 | 0;
          HEAP8[($0_1 + 87 | 0) >> 0] = $82 >>> 24 | 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAPU8[($0_1 + 59 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 60 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 61 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 62 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          i64toi32_i32$1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 64 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 65 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 66 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $282 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          $83 = $282;
          HEAP8[($0_1 + 77 | 0) >> 0] = $83;
          HEAP8[($0_1 + 78 | 0) >> 0] = $83 >>> 8 | 0;
          HEAP8[($0_1 + 79 | 0) >> 0] = $83 >>> 16 | 0;
          HEAP8[($0_1 + 80 | 0) >> 0] = $83 >>> 24 | 0;
          HEAP8[($0_1 + 81 | 0) >> 0] = i64toi32_i32$1;
          HEAP8[($0_1 + 82 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
          HEAP8[($0_1 + 83 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
          HEAP8[($0_1 + 84 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = 0;
          HEAP32[($0_1 + 136 | 0) >> 2] = 0;
          HEAP32[($0_1 + 140 | 0) >> 2] = i64toi32_i32$1;
          $5_1 = 0;
          $4_1 = global$0 - 16 | 0;
          global$0 = $4_1;
          block4: {
            if (!$6_1) {
              break block4;
            }
            if (!$1_1) {
              break block4;
            }
            HEAP32[($4_1 + 12 | 0) >> 2] = 0;
            label1: while (1) {
              HEAP32[$4_1 >> 2] = $4_1 + 12 | 0;
              if (($60($6_1 + ($5_1 << 1 | 0) | 0 | 0, 1411 | 0, $4_1 | 0) | 0 | 0) != (1 | 0)) {
                break block4;
              }
              HEAP8[($1_1 + $5_1 | 0) >> 0] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
              $5_1 = $5_1 + 1 | 0;
              if (($5_1 | 0) != (8 | 0)) {
                continue label1;
              }
              break label1;
            }
          }
          global$0 = $4_1 + 16 | 0;
          $313 = $0_1;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
          $23_1 = i64toi32_i32$1;
          $23$hi = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 40;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            $88 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $88 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          i64toi32_i32$0 = $88;
          i64toi32_i32$2 = 16711680;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $318 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $318$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $23$hi;
          i64toi32_i32$1 = $23_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 56;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            $89 = 0;
          } else {
            i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
            $89 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
          }
          $320$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $318$hi;
          i64toi32_i32$2 = $318;
          i64toi32_i32$1 = $320$hi;
          i64toi32_i32$3 = $89;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          $321 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          $321$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $23$hi;
          i64toi32_i32$0 = $23_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 24;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            $90 = 0;
          } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
            $90 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          }
          i64toi32_i32$1 = $90;
          i64toi32_i32$0 = 65280;
          i64toi32_i32$3 = 0;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
          $324 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $324$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $23$hi;
          i64toi32_i32$2 = $23_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 8;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            $91 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $91 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          i64toi32_i32$0 = $91;
          i64toi32_i32$2 = 255;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $327 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $327$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $324$hi;
          i64toi32_i32$1 = $324;
          i64toi32_i32$0 = $327$hi;
          i64toi32_i32$3 = $327;
          i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $328 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          $328$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $321$hi;
          i64toi32_i32$2 = $321;
          i64toi32_i32$1 = $328$hi;
          i64toi32_i32$3 = $328;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          $329 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          $329$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $23$hi;
          i64toi32_i32$0 = $23_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 8;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $92 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $92 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          i64toi32_i32$1 = $92;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = -16777216;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
          $332 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $332$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $23$hi;
          i64toi32_i32$2 = $23_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 24;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $93 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $93 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          i64toi32_i32$0 = $93;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 16711680;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $335 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $335$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $332$hi;
          i64toi32_i32$1 = $332;
          i64toi32_i32$0 = $335$hi;
          i64toi32_i32$3 = $335;
          i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $336 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          $336$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $23$hi;
          i64toi32_i32$2 = $23_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 40;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $94 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $94 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          i64toi32_i32$0 = $94;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 65280;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $339 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $339$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $23$hi;
          i64toi32_i32$1 = $23_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 56;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $95 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $95 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
          }
          $341$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $339$hi;
          i64toi32_i32$2 = $339;
          i64toi32_i32$1 = $341$hi;
          i64toi32_i32$3 = $95;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          $342 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          $342$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $336$hi;
          i64toi32_i32$0 = $336;
          i64toi32_i32$2 = $342$hi;
          i64toi32_i32$3 = $342;
          i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
          $343 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
          $343$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $329$hi;
          i64toi32_i32$1 = $329;
          i64toi32_i32$0 = $343$hi;
          i64toi32_i32$3 = $343;
          i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $23_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          $23$hi = i64toi32_i32$0;
          $5_1 = $23_1;
          HEAP8[($313 + 136 | 0) >> 0] = $5_1 ^ (HEAPU8[($0_1 + 136 | 0) >> 0] | 0) | 0;
          HEAP8[($0_1 + 137 | 0) >> 0] = (HEAPU8[($0_1 + 137 | 0) >> 0] | 0) ^ ($5_1 >>> 8 | 0) | 0;
          HEAP8[($0_1 + 138 | 0) >> 0] = (HEAPU8[($0_1 + 138 | 0) >> 0] | 0) ^ ($5_1 >>> 16 | 0) | 0;
          HEAP8[($0_1 + 139 | 0) >> 0] = (HEAPU8[($0_1 + 139 | 0) >> 0] | 0) ^ ($5_1 >>> 24 | 0) | 0;
          $369 = $0_1;
          $371 = HEAPU8[($0_1 + 140 | 0) >> 0] | 0;
          i64toi32_i32$2 = $5_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $96 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $96 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          HEAP8[($369 + 140 | 0) >> 0] = $371 ^ $96 | 0;
          $376 = $0_1;
          $378 = HEAPU8[($0_1 + 141 | 0) >> 0] | 0;
          i64toi32_i32$1 = $23$hi;
          i64toi32_i32$0 = $23_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 40;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $97 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $97 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          HEAP8[($376 + 141 | 0) >> 0] = $378 ^ $97 | 0;
          $383 = $0_1;
          $385 = HEAPU8[($0_1 + 142 | 0) >> 0] | 0;
          i64toi32_i32$2 = $23$hi;
          i64toi32_i32$1 = $23_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $98 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $98 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
          }
          HEAP8[($383 + 142 | 0) >> 0] = $385 ^ $98 | 0;
          $390 = $0_1;
          $392 = HEAPU8[($0_1 + 143 | 0) >> 0] | 0;
          i64toi32_i32$0 = $23$hi;
          i64toi32_i32$2 = $23_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 56;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $99 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $99 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          HEAP8[($390 + 143 | 0) >> 0] = $392 ^ $99 | 0;
          $24($1_1 | 0, 8 | 0, $6_1 | 0);
          $1_1 = 0;
          $4_1 = global$0 - 32 | 0;
          global$0 = $4_1;
          HEAP16[($4_1 + 28 | 0) >> 1] = 0;
          HEAP32[($4_1 + 24 | 0) >> 2] = 0;
          $5_1 = $0_1 + 48 | 0;
          $6_1 = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
          $9_1 = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
          HEAP32[($4_1 + 8 | 0) >> 2] = HEAPU8[($5_1 + 10 | 0) >> 0] | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $9_1;
          HEAP32[$4_1 >> 2] = $6_1;
          $18($4_1 + 24 | 0 | 0, 6 | 0, 1088 | 0, $4_1 | 0);
          if (HEAPU8[($5_1 + 11 | 0) >> 0] | 0) {
            $6_1 = $5_1 + 11 | 0;
            label2: while (1) {
              HEAP8[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ($1_1 << 1 | 0) | 0) >> 0] = HEAPU8[(($1_1 + $5_1 | 0) + 11 | 0) >> 0] | 0;
              $1_1 = $1_1 + 1 | 0;
              if (($2($6_1 | 0) | 0) >>> 0 > $1_1 >>> 0) {
                continue label2;
              }
              break label2;
            }
          }
          if (HEAPU8[($5_1 + 24 | 0) >> 0] | 0) {
            $6_1 = $5_1 + 24 | 0;
            $1_1 = 0;
            label3: while (1) {
              HEAP8[(((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ($1_1 << 1 | 0) | 0) + 1 | 0) >> 0] = HEAPU8[(($1_1 + $5_1 | 0) + 24 | 0) >> 0] | 0;
              $1_1 = $1_1 + 1 | 0;
              if (($2($6_1 | 0) | 0) >>> 0 > $1_1 >>> 0) {
                continue label3;
              }
              break label3;
            }
          }
          block5: {
            $9_1 = $2($4_1 + 24 | 0 | 0) | 0;
            if (!$9_1) {
              break block5;
            }
            $1_1 = 0;
            if (($9_1 | 0) != (1 | 0)) {
              $8_1 = $9_1 & -2 | 0;
              $6_1 = 0;
              label4: while (1) {
                $10_1 = $4_1 + 24 | 0;
                HEAP8[(((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ($1_1 << 1 | 0) | 0) + 24 | 0) >> 0] = HEAPU8[($10_1 + $1_1 | 0) >> 0] | 0;
                $11_1 = $1_1 | 1 | 0;
                HEAP8[(((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ($11_1 << 1 | 0) | 0) + 24 | 0) >> 0] = HEAPU8[($10_1 + $11_1 | 0) >> 0] | 0;
                $1_1 = $1_1 + 2 | 0;
                $6_1 = $6_1 + 2 | 0;
                if (($6_1 | 0) != ($8_1 | 0)) {
                  continue label4;
                }
                break label4;
              }
            }
            if (!($9_1 & 1 | 0)) {
              break block5;
            }
            HEAP8[(((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ($1_1 << 1 | 0) | 0) + 24 | 0) >> 0] = HEAPU8[(($4_1 + 24 | 0) + $1_1 | 0) >> 0] | 0;
          }
          global$0 = $4_1 + 32 | 0;
          HEAP8[($16_1 + 34 | 0) >> 0] = HEAPU8[($0_1 + 58 | 0) >> 0] | 0;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
          $516 = i64toi32_i32$1;
          i64toi32_i32$1 = $16_1;
          HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $516;
          HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$2;
          $519 = 0;
        } else {
          $519 = -1;
        }
        global$0 = $0_1 + 272 | 0;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$2 = 0;
        HEAP32[(i64toi32_i32$1 + 424 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 428 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        HEAP32[(i64toi32_i32$1 + 416 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 420 | 0) >> 2] = i64toi32_i32$2;
        $8_1 = i64toi32_i32$1 + 328 | 0;
        $0_1 = $8_1;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$2 = -271733879;
        HEAP32[($0_1 + 8 | 0) >> 2] = 1732584193;
        HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$2 = 0;
        HEAP32[$0_1 >> 2] = 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$2 = 271733878;
        HEAP32[($0_1 + 16 | 0) >> 2] = -1732584194;
        HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$2;
        $0_1 = HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
        $11(i64toi32_i32$1 | 0, $0_1 | 0, $2($0_1 | 0) | 0 | 0);
        $11(i64toi32_i32$1 | 0, $16_1 | 0, $2($16_1 | 0) | 0 | 0);
        $18_1 = $7_1 + 416 | 0;
        $25(i64toi32_i32$1 | 0, $18_1 | 0);
        $24($18_1 | 0, 16 | 0, $7_1 + 112 | 0 | 0);
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
        $551 = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$0;
        $84 = $551;
        HEAP8[(i64toi32_i32$0 + 153 | 0) >> 0] = $84;
        HEAP8[(i64toi32_i32$0 + 154 | 0) >> 0] = $84 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 155 | 0) >> 0] = $84 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 156 | 0) >> 0] = $84 >>> 24 | 0;
        HEAP8[(i64toi32_i32$0 + 157 | 0) >> 0] = i64toi32_i32$1;
        HEAP8[(i64toi32_i32$0 + 158 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 159 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 160 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
        $554 = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$0;
        $85 = $554;
        HEAP8[(i64toi32_i32$0 + 161 | 0) >> 0] = $85;
        HEAP8[(i64toi32_i32$0 + 162 | 0) >> 0] = $85 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 163 | 0) >> 0] = $85 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 164 | 0) >> 0] = $85 >>> 24 | 0;
        HEAP8[(i64toi32_i32$0 + 165 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$0 + 166 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 167 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 168 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] | 0;
        $557 = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$0;
        $86 = $557;
        HEAP8[(i64toi32_i32$0 + 169 | 0) >> 0] = $86;
        HEAP8[(i64toi32_i32$0 + 170 | 0) >> 0] = $86 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 171 | 0) >> 0] = $86 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 172 | 0) >> 0] = $86 >>> 24 | 0;
        HEAP8[(i64toi32_i32$0 + 173 | 0) >> 0] = i64toi32_i32$1;
        HEAP8[(i64toi32_i32$0 + 174 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 175 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 176 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
        $560 = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$0;
        $87 = $560;
        HEAP8[(i64toi32_i32$0 + 145 | 0) >> 0] = $87;
        HEAP8[(i64toi32_i32$0 + 146 | 0) >> 0] = $87 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 147 | 0) >> 0] = $87 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 148 | 0) >> 0] = $87 >>> 24 | 0;
        HEAP8[(i64toi32_i32$0 + 149 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$0 + 150 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$0 + 151 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$0 + 152 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        $4_1 = HEAPU8[(i64toi32_i32$0 + 98 | 0) >> 0] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 104 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 108 | 0) >> 2] | 0;
        $23_1 = i64toi32_i32$2;
        $23$hi = i64toi32_i32$1;
        $6_1 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
        $9_1 = $2($6_1 | 0) | 0;
        if ($9_1) {
          $10_1 = i64toi32_i32$0 + 177 | 0;
          label6: while (1) {
            $5_1 = HEAPU8[($3_1 + $6_1 | 0) >> 0] | 0;
            $0_1 = 0;
            block7: {
              label5: while (1) {
                block6: {
                  if ((HEAPU8[($0_1 + 1423 | 0) >> 0] | 0 | 0) == ($5_1 | 0)) {
                    $1_1 = $0_1;
                    break block6;
                  }
                  $1_1 = $0_1 | 1 | 0;
                  if (($5_1 | 0) == (HEAPU8[($1_1 + 1423 | 0) >> 0] | 0 | 0)) {
                    break block6;
                  }
                  $0_1 = $0_1 + 2 | 0;
                  if (($0_1 | 0) != (62 | 0)) {
                    continue label5;
                  }
                  break block7;
                }
                break label5;
              }
              $595 = $3_1 + $10_1 | 0;
              i64toi32_i32$1 = 0;
              $599$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $23$hi;
              i64toi32_i32$1 = $599$hi;
              i64toi32_i32$0 = $1_1 + $4_1 | 0;
              i64toi32_i32$2 = $23$hi;
              i64toi32_i32$3 = $23_1;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              i64toi32_i32$0 = 0;
              i64toi32_i32$0 = __wasm_i64_urem(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 62 | 0, i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
              HEAP8[$595 >> 0] = HEAPU8[(i64toi32_i32$0 + 1423 | 0) >> 0] | 0;
            }
            $3_1 = $3_1 + 1 | 0;
            if (($3_1 | 0) != ($9_1 | 0)) {
              continue label6;
            }
            break label6;
          }
        }
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$5 = 0;
        HEAP32[(i64toi32_i32$0 + 424 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 428 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$5 = -271733879;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 1732584193;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        HEAP32[i64toi32_i32$0 >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 271733878;
        HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = -1732584194;
        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
        $20_1 = $7_1 + 145 | 0;
        $11(i64toi32_i32$0 | 0, $20_1 | 0, $2($20_1 | 0) | 0 | 0);
        $0_1 = HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
        $11(i64toi32_i32$0 | 0, $0_1 | 0, $2($0_1 | 0) | 0 | 0);
        $25(i64toi32_i32$0 | 0, $18_1 | 0);
        $22_1 = $7_1 + 212 | 0;
        $24($18_1 | 0, 16 | 0, $22_1 | 0);
        HEAP16[($7_1 + 288 | 0) >> 1] = 12336;
        HEAP32[($7_1 + 284 | 0) >> 2] = 808464432;
        $0_1 = HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
        $10_1 = global$0 - 16 | 0;
        global$0 = $10_1;
        HEAP16[($10_1 + 14 | 0) >> 1] = 0;
        $1_1 = 0;
        $11_1 = global$0 - 32 | 0;
        global$0 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$5 = 0;
        HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        HEAP32[i64toi32_i32$0 >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
        $3_1 = $2($0_1 | 0) | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $0_1;
        $5_1 = 1;
        block8: {
          if (($3_1 | 0) <= (0 | 0)) {
            break block8;
          }
          $4_1 = i64toi32_i32$0 | 4 | 0;
          if (($3_1 | 0) != (1 | 0)) {
            $9_1 = $3_1 & -2 | 0;
            label7: while (1) {
              $6_1 = $0_1 + $1_1 | 0;
              if ((HEAPU8[$6_1 >> 0] | 0 | 0) == (124 | 0)) {
                if (($5_1 | 0) <= (5 | 0)) {
                  HEAP32[$4_1 >> 2] = $0_1 + ($1_1 | 1 | 0) | 0;
                  $4_1 = $4_1 + 4 | 0;
                }
                HEAP8[$6_1 >> 0] = 0;
                $5_1 = $5_1 + 1 | 0;
              }
              $12_1 = $0_1 + ($1_1 | 1 | 0) | 0;
              if ((HEAPU8[$12_1 >> 0] | 0 | 0) == (124 | 0)) {
                if (($5_1 | 0) <= (5 | 0)) {
                  HEAP32[$4_1 >> 2] = $6_1 + 2 | 0;
                  $4_1 = $4_1 + 4 | 0;
                }
                HEAP8[$12_1 >> 0] = 0;
                $5_1 = $5_1 + 1 | 0;
              }
              $1_1 = $1_1 + 2 | 0;
              $14_1 = $14_1 + 2 | 0;
              if (($14_1 | 0) != ($9_1 | 0)) {
                continue label7;
              }
              break label7;
            }
          }
          if (!($3_1 & 1 | 0)) {
            break block8;
          }
          $0_1 = $0_1 + $1_1 | 0;
          if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (124 | 0)) {
            break block8;
          }
          if (($5_1 | 0) <= (5 | 0)) {
            HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
          }
          HEAP8[$0_1 >> 0] = 0;
        }
        $100 = 0;
        HEAP8[($10_1 + 14 | 0) >> 0] = $100;
        HEAP8[($10_1 + 15 | 0) >> 0] = $100 >>> 8 | 0;
        $6_1 = global$0 - 48 | 0;
        global$0 = $6_1;
        block21: {
          block9: {
            $5_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
            $4_1 = HEAPU8[$5_1 >> 0] | 0;
            if (!$4_1) {
              break block9;
            }
            $0_1 = $4_1;
            $1_1 = $5_1;
            label8: while (1) {
              block12: {
                $3_1 = $0_1 << 24 | 0;
                $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
                block10: {
                  $3_1 = $3_1 >> 24 | 0;
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (70 | 0)) {
                    break block10;
                  }
                  block11: {
                    if (!$0_1) {
                      $3_1 = 1567;
                      break block11;
                    }
                    if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (73 | 0)) {
                      break block10;
                    }
                    $3_1 = HEAP8[($1_1 + 2 | 0) >> 0] | 0;
                    if (!$3_1) {
                      $3_1 = 1568;
                      break block11;
                    }
                    if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (76 | 0)) {
                      break block10;
                    }
                    $3_1 = HEAP8[($1_1 + 3 | 0) >> 0] | 0;
                    if (!$3_1) {
                      $3_1 = 1569;
                      break block11;
                    }
                    if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (69 | 0)) {
                      break block10;
                    }
                    $3_1 = HEAP8[($1_1 + 4 | 0) >> 0] | 0;
                    if (!$3_1) {
                      $3_1 = 1570;
                      break block11;
                    }
                    if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (58 | 0)) {
                      break block10;
                    }
                    $3_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
                    if (!$3_1) {
                      $3_1 = 1571;
                      break block11;
                    }
                    if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                      break block10;
                    }
                    $3_1 = HEAP8[($1_1 + 6 | 0) >> 0] | 0;
                    if (!$3_1) {
                      $3_1 = 1572;
                      break block11;
                    }
                    if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                      break block10;
                    }
                    $3_1 = HEAP8[($1_1 + 7 | 0) >> 0] | 0;
                    if (!$3_1) {
                      $3_1 = 1573;
                      break block11;
                    }
                    if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                      break block10;
                    }
                    $3_1 = 1574;
                    if (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) {
                      break block12;
                    }
                  }
                  if (!(HEAPU8[$3_1 >> 0] | 0)) {
                    break block12;
                  }
                }
                $1_1 = $1_1 + 1 | 0;
                if ($0_1) {
                  continue label8;
                }
                break block9;
              }
              break label8;
            }
            $0_1 = $4_1;
            $1_1 = $5_1;
            label9: while (1) {
              $3_1 = $0_1 << 24 | 0;
              $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
              block13: {
                $3_1 = $3_1 >> 24 | 0;
                if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (70 | 0)) {
                  break block13;
                }
                block14: {
                  if (!$0_1) {
                    $3_1 = 1516;
                    break block14;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (73 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 2 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1517;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (76 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 3 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1518;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (69 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 4 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1519;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (58 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1520;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 6 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1521;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 7 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1522;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 8 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1523;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (86 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 9 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1524;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (65 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 10 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1525;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (82 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 11 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1526;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 12 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1527;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (77 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 13 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1528;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (79 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 14 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1529;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (66 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 15 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1530;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (76 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 16 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1531;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (73 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 17 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1532;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (69 | 0)) {
                    break block13;
                  }
                  $3_1 = HEAP8[($1_1 + 18 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1533;
                    break block14;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block13;
                  }
                  $3_1 = 1534;
                  if (HEAPU8[($1_1 + 19 | 0) >> 0] | 0) {
                    break block9;
                  }
                }
                if (!(HEAPU8[$3_1 >> 0] | 0)) {
                  break block9;
                }
              }
              $1_1 = $1_1 + 1 | 0;
              if ($0_1) {
                continue label9;
              }
              break label9;
            }
            $0_1 = $4_1;
            $1_1 = $5_1;
            label10: while (1) {
              $3_1 = $0_1 << 24 | 0;
              $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
              block15: {
                $3_1 = $3_1 >> 24 | 0;
                if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (70 | 0)) {
                  break block15;
                }
                block16: {
                  if (!$0_1) {
                    $3_1 = 1493;
                    break block16;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (73 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 2 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1494;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (76 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 3 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1495;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (69 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 4 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1496;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (58 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1497;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 6 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1498;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 7 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1499;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 8 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1500;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (65 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 9 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1501;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (78 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 10 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1502;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (68 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 11 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1503;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (82 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 12 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1504;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (79 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 13 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1505;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (73 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 14 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1506;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (68 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 15 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1507;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (95 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 16 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1508;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (65 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 17 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1509;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (83 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 18 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1510;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (83 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 19 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1511;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (69 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 20 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1512;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (84 | 0)) {
                    break block15;
                  }
                  $3_1 = HEAP8[($1_1 + 21 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1513;
                    break block16;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block15;
                  }
                  $3_1 = 1514;
                  if (HEAPU8[($1_1 + 22 | 0) >> 0] | 0) {
                    break block9;
                  }
                }
                if (!(HEAPU8[$3_1 >> 0] | 0)) {
                  break block9;
                }
              }
              $1_1 = $1_1 + 1 | 0;
              if ($0_1) {
                continue label10;
              }
              break label10;
            }
            $0_1 = $4_1;
            $1_1 = $5_1;
            label11: while (1) {
              $3_1 = $0_1 << 24 | 0;
              $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
              block17: {
                $3_1 = $3_1 >> 24 | 0;
                if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (70 | 0)) {
                  break block17;
                }
                block18: {
                  if (!$0_1) {
                    $3_1 = 1553;
                    break block18;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (73 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 2 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1554;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (76 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 3 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1555;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (69 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 4 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1556;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (58 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1557;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 6 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1558;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 7 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1559;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 8 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1560;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (68 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 9 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1561;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (65 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 10 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1562;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (84 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 11 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1563;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (65 | 0)) {
                    break block17;
                  }
                  $3_1 = HEAP8[($1_1 + 12 | 0) >> 0] | 0;
                  if (!$3_1) {
                    $3_1 = 1564;
                    break block18;
                  }
                  if (((($3_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 95 | 0 : $3_1) | 0) != (47 | 0)) {
                    break block17;
                  }
                  $3_1 = 1565;
                  if (HEAPU8[($1_1 + 13 | 0) >> 0] | 0) {
                    break block9;
                  }
                }
                if (!(HEAPU8[$3_1 >> 0] | 0)) {
                  break block9;
                }
              }
              $1_1 = $1_1 + 1 | 0;
              if ($0_1) {
                continue label11;
              }
              break label11;
            }
            $0_1 = $5_1;
            label12: while (1) {
              $1_1 = $4_1 << 24 | 0;
              $4_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
              block19: {
                $1_1 = $1_1 >> 24 | 0;
                if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (70 | 0)) {
                  break block19;
                }
                block20: {
                  if (!$4_1) {
                    $1_1 = 1536;
                    break block20;
                  }
                  if (((($4_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $4_1 & 95 | 0 : $4_1) | 0) != (73 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 2 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1537;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (76 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 3 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1538;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (69 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 4 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1539;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (58 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 5 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1540;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (47 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 6 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1541;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (47 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 7 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1542;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (47 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 8 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1543;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (83 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 9 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1544;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (84 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 10 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1545;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (79 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 11 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1546;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (82 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 12 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1547;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (65 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 13 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1548;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (71 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 14 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1549;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (69 | 0)) {
                    break block19;
                  }
                  $1_1 = HEAP8[($0_1 + 15 | 0) >> 0] | 0;
                  if (!$1_1) {
                    $1_1 = 1550;
                    break block20;
                  }
                  if (((($1_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $1_1 & 95 | 0 : $1_1) | 0) != (47 | 0)) {
                    break block19;
                  }
                  $1_1 = 1551;
                  if (HEAPU8[($0_1 + 16 | 0) >> 0] | 0) {
                    break block9;
                  }
                }
                if (!(HEAPU8[$1_1 >> 0] | 0)) {
                  break block9;
                }
              }
              $1_1 = 1;
              $0_1 = $0_1 + 1 | 0;
              if ($4_1) {
                continue label12;
              }
              break label12;
            }
            break block21;
          }
          i64toi32_i32$0 = $6_1;
          i64toi32_i32$5 = 0;
          HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$5;
          $1_1 = 1;
          $9_1 = $2($5_1 | 0) | 0;
          if (($9_1 | 0) <= (0 | 0)) {
            $1_1 = 0;
            break block21;
          }
          $4_1 = $6_1 + 32 | 0 | 4 | 0;
          $0_1 = 0;
          if (($9_1 | 0) != (1 | 0)) {
            $14_1 = $9_1 & -2 | 0;
            $3_1 = 0;
            label13: while (1) {
              $12_1 = $0_1 + $5_1 | 0;
              if ((HEAPU8[$12_1 >> 0] | 0 | 0) == (47 | 0)) {
                if (($1_1 | 0) <= (3 | 0)) {
                  HEAP32[$4_1 >> 2] = $5_1 + ($0_1 | 1 | 0) | 0;
                  $4_1 = $4_1 + 4 | 0;
                }
                HEAP8[$12_1 >> 0] = 0;
                $1_1 = $1_1 + 1 | 0;
              }
              $15_1 = $5_1 + ($0_1 | 1 | 0) | 0;
              if ((HEAPU8[$15_1 >> 0] | 0 | 0) == (47 | 0)) {
                if (($1_1 | 0) <= (3 | 0)) {
                  HEAP32[$4_1 >> 2] = $12_1 + 2 | 0;
                  $4_1 = $4_1 + 4 | 0;
                }
                HEAP8[$15_1 >> 0] = 0;
                $1_1 = $1_1 + 1 | 0;
              }
              $0_1 = $0_1 + 2 | 0;
              $3_1 = $3_1 + 2 | 0;
              if (($3_1 | 0) != ($14_1 | 0)) {
                continue label13;
              }
              break label13;
            }
          }
          block22: {
            if (!($9_1 & 1 | 0)) {
              break block22;
            }
            $0_1 = $0_1 + $5_1 | 0;
            if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (47 | 0)) {
              break block22;
            }
            if (($1_1 | 0) <= (3 | 0)) {
              HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
            }
            HEAP8[$0_1 >> 0] = 0;
          }
          $1_1 = 0;
          $5_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
          if (!$5_1) {
            break block21;
          }
          if (!(HEAPU8[$5_1 >> 0] | 0)) {
            break block21;
          }
          i64toi32_i32$0 = $6_1;
          i64toi32_i32$5 = 0;
          HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
          $0_1 = i64toi32_i32$0 + 16 | 0;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $0_1 | 4 | 0;
          HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $0_1 | 8 | 0;
          HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = $0_1 | 12 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $0_1;
          $1_1 = (((($60($5_1 | 0, 1385 | 0, i64toi32_i32$0 | 0) | 0 | 0) == (4 | 0) & (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 | 0) & (HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 | 0) & (HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 | 0) & (HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 | 0;
        }
        global$0 = $6_1 + 48 | 0;
        block24: {
          block23: {
            if ($1_1) {
              break block23;
            }
            $0_1 = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
            if (!$0_1) {
              break block24;
            }
            $0_1 = HEAPU8[$0_1 >> 0] | 0;
            if (!$0_1) {
              break block24;
            }
            if (($0_1 | 0) != (48 | 0)) {
              break block23;
            }
            $4_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
            if (!$4_1) {
              break block24;
            }
            $9_1 = HEAPU8[$4_1 >> 0] | 0;
            if (!$9_1) {
              break block24;
            }
            $12_1 = 0;
            $14_1 = 1;
            label16: while (1) {
              block25: {
                $3_1 = HEAP32[(($12_1 << 2 | 0) + 1744 | 0) >> 2] | 0;
                if ($3_1) {
                  $5_1 = $9_1;
                  $0_1 = $4_1;
                  if (!(HEAPU8[$3_1 >> 0] | 0)) {
                    break block25;
                  }
                  label15: while (1) {
                    $1_1 = $3_1;
                    $6_1 = $0_1;
                    block26: {
                      label14: while (1) {
                        $15_1 = HEAP8[$1_1 >> 0] | 0;
                        if (!$15_1) {
                          break block25;
                        }
                        $5_1 = ($5_1 << 24 | 0) >> 24 | 0;
                        if (((($5_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $5_1 & 95 | 0 : $5_1) | 0) != ((($15_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $15_1 & 95 | 0 : $15_1) | 0)) {
                          break block26;
                        }
                        $1_1 = $1_1 + 1 | 0;
                        $5_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
                        $0_1 = $0_1 + 1 | 0;
                        if ($5_1) {
                          continue label14;
                        }
                        break label14;
                      }
                      if (!(HEAPU8[$1_1 >> 0] | 0)) {
                        break block25;
                      }
                    }
                    $0_1 = $6_1 + 1 | 0;
                    $5_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if ($5_1) {
                      continue label15;
                    }
                    break label15;
                  }
                }
                $14_1 = $12_1 >>> 0 < 10 >>> 0;
                $12_1 = $12_1 + 1 | 0;
                if (($12_1 | 0) != (11 | 0)) {
                  continue label16;
                }
                break block24;
              }
              break label16;
            }
            if (!$14_1) {
              break block24;
            }
          }
          HEAP8[($10_1 + 14 | 0) >> 0] = (HEAPU8[($10_1 + 14 | 0) >> 0] | 0) ^ 128 | 0;
        }
        $6_1 = 0;
        block27: {
          if (!$11_1) {
            break block27;
          }
          $0_1 = HEAP32[($11_1 + 20 | 0) >> 2] | 0;
          if (!$0_1) {
            break block27;
          }
          $0_1 = HEAPU8[$0_1 >> 0] | 0;
          if (!$0_1) {
            break block27;
          }
          block28: {
            if (($0_1 | 0) == (49 | 0)) {
              break block28;
            }
            $5_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
            if (!$5_1) {
              break block27;
            }
            $3_1 = HEAPU8[$5_1 >> 0] | 0;
            if (!$3_1) {
              break block27;
            }
            $1_1 = $3_1;
            $0_1 = $5_1;
            label17: while (1) {
              $4_1 = $0_1;
              block29: {
                $0_1 = ($1_1 << 24 | 0) >> 24 | 0;
                if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (86 | 0)) {
                  break block29;
                }
                block30: {
                  $0_1 = HEAP8[($4_1 + 1 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $1_1 = 1356;
                    break block30;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (77 | 0)) {
                    break block29;
                  }
                  $0_1 = HEAP8[($4_1 + 2 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $1_1 = 1357;
                    break block30;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (87 | 0)) {
                    break block29;
                  }
                  $0_1 = HEAP8[($4_1 + 3 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $1_1 = 1358;
                    break block30;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (65 | 0)) {
                    break block29;
                  }
                  $0_1 = HEAP8[($4_1 + 4 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $1_1 = 1359;
                    break block30;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (82 | 0)) {
                    break block29;
                  }
                  $0_1 = HEAP8[($4_1 + 5 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $1_1 = 1360;
                    break block30;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (69 | 0)) {
                    break block29;
                  }
                  $1_1 = 1361;
                  if (HEAPU8[($4_1 + 6 | 0) >> 0] | 0) {
                    break block28;
                  }
                }
                if (!(HEAPU8[$1_1 >> 0] | 0)) {
                  break block28;
                }
              }
              $0_1 = $4_1 + 1 | 0;
              $1_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
              if ($1_1) {
                continue label17;
              }
              break label17;
            }
            label18: while (1) {
              $1_1 = $5_1;
              block31: {
                $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
                if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (80 | 0)) {
                  break block31;
                }
                block32: {
                  $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1267;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (65 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 2 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1268;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (82 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 3 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1269;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (65 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 4 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1270;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (76 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1271;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (76 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 6 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1272;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (69 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 7 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1273;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (76 | 0)) {
                    break block31;
                  }
                  $0_1 = HEAP8[($1_1 + 8 | 0) >> 0] | 0;
                  if (!$0_1) {
                    $0_1 = 1274;
                    break block32;
                  }
                  if (((($0_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0) != (83 | 0)) {
                    break block31;
                  }
                  $0_1 = 1275;
                  if (HEAPU8[($1_1 + 9 | 0) >> 0] | 0) {
                    break block28;
                  }
                }
                if (!(HEAPU8[$0_1 >> 0] | 0)) {
                  break block28;
                }
              }
              $5_1 = $1_1 + 1 | 0;
              $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
              if ($3_1) {
                continue label18;
              }
              break label18;
            }
            break block27;
          }
          $6_1 = 1;
        }
        if ($6_1) {
          HEAP8[($10_1 + 14 | 0) >> 0] = (HEAPU8[($10_1 + 14 | 0) >> 0] | 0) - -64 | 0;
        }
        block33: {
          $4_1 = HEAP32[$11_1 >> 2] | 0;
          if (!$4_1) {
            break block33;
          }
          $9_1 = HEAPU8[$4_1 >> 0] | 0;
          if (!$9_1) {
            break block33;
          }
          $12_1 = 0;
          $14_1 = 1;
          label21: while (1) {
            block34: {
              $3_1 = HEAP32[(($12_1 << 2 | 0) + 1680 | 0) >> 2] | 0;
              if ($3_1) {
                $5_1 = $9_1;
                $0_1 = $4_1;
                if (!(HEAPU8[$3_1 >> 0] | 0)) {
                  break block34;
                }
                label20: while (1) {
                  $1_1 = $3_1;
                  $6_1 = $0_1;
                  block35: {
                    label19: while (1) {
                      $15_1 = HEAP8[$1_1 >> 0] | 0;
                      if (!$15_1) {
                        break block34;
                      }
                      $5_1 = ($5_1 << 24 | 0) >> 24 | 0;
                      if (((($5_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $5_1 & 95 | 0 : $5_1) | 0) != ((($15_1 - 97 | 0) >>> 0 < 26 >>> 0 ? $15_1 & 95 | 0 : $15_1) | 0)) {
                        break block35;
                      }
                      $1_1 = $1_1 + 1 | 0;
                      $5_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
                      $0_1 = $0_1 + 1 | 0;
                      if ($5_1) {
                        continue label19;
                      }
                      break label19;
                    }
                    if (!(HEAPU8[$1_1 >> 0] | 0)) {
                      break block34;
                    }
                  }
                  $0_1 = $6_1 + 1 | 0;
                  $5_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  if ($5_1) {
                    continue label20;
                  }
                  break label20;
                }
              }
              $14_1 = $12_1 >>> 0 < 12 >>> 0;
              $12_1 = $12_1 + 1 | 0;
              if (($12_1 | 0) != (13 | 0)) {
                continue label21;
              }
              break block33;
            }
            break label21;
          }
          if (!$14_1) {
            break block33;
          }
          HEAP8[($10_1 + 14 | 0) >> 0] = (HEAPU8[($10_1 + 14 | 0) >> 0] | 0) + 32 | 0;
        }
        global$0 = $11_1 + 32 | 0;
        HEAP32[$10_1 >> 2] = HEAPU8[($10_1 + 14 | 0) >> 0] | 0;
        HEAP32[($10_1 + 4 | 0) >> 2] = HEAPU8[($10_1 + 15 | 0) >> 0] | 0;
        $0_1 = $7_1 + 284 | 0;
        $18($0_1 | 0, 5 | 0, 1079 | 0, $10_1 | 0);
        global$0 = $10_1 + 16 | 0;
        HEAP32[($7_1 + 52 | 0) >> 2] = $0_1;
        HEAP32[($7_1 + 48 | 0) >> 2] = $22_1;
        $0_1 = $7_1 + 245 | 0;
        $18($0_1 | 0, 39 | 0, 1294 | 0, $7_1 + 48 | 0 | 0);
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$5 = 0;
        HEAP32[(i64toi32_i32$0 + 424 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 428 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$5 = -271733879;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 1732584193;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        HEAP32[i64toi32_i32$0 >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
        i64toi32_i32$5 = 271733878;
        HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = -1732584194;
        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
        $11(i64toi32_i32$0 | 0, $20_1 | 0, $2($20_1 | 0) | 0 | 0);
        $11(i64toi32_i32$0 | 0, $0_1 | 0, $2($0_1 | 0) | 0 | 0);
        $11(i64toi32_i32$0 | 0, $7_1 + 324 | 0 | 0, 1 | 0);
        $25(i64toi32_i32$0 | 0, $18_1 | 0);
        $1_1 = $7_1 + 291 | 0;
        $24($18_1 | 0, 16 | 0, $1_1 | 0);
        HEAP32[($7_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($7_1 + 36 | 0) >> 2] = $1_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $20_1;
        HEAP32[($7_1 + 28 | 0) >> 2] = $16_1;
        HEAP32[($7_1 + 16 | 0) >> 2] = HEAP8[($7_1 + 324 | 0) >> 0] | 0;
        HEAP32[($7_1 + 20 | 0) >> 2] = HEAP8[($7_1 + 325 | 0) >> 0] | 0;
        $18(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 171 | 0, 1286 | 0, $7_1 + 16 | 0 | 0);
        $0_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
        $1_1 = 0;
        label22: while (1) {
          $1_1 = $1_1 + (HEAPU8[($0_1 + $17_1 | 0) >> 0] | 0) | 0;
          $5_1 = $17_1 | 1 | 0;
          if (($5_1 | 0) != (169 | 0)) {
            $1_1 = (HEAPU8[($0_1 + ($17_1 | 3 | 0) | 0) >> 0] | 0) + ((HEAPU8[($0_1 + ($17_1 | 2 | 0) | 0) >> 0] | 0) + ($1_1 + (HEAPU8[($0_1 + $5_1 | 0) >> 0] | 0) | 0) | 0) | 0;
            $17_1 = $17_1 + 4 | 0;
            continue label22;
          }
          break label22;
        }
        HEAP32[$7_1 >> 2] = $1_1 & 15 | 0;
        $18($0_1 + 169 | 0 | 0, 2 | 0, 1128 | 0, $7_1 | 0);
      }
      global$0 = $7_1 + 432 | 0;
      $0_1 = $2($19_1 | 0) | 0;
      HEAP8[(($7($2_1 | 0, $19_1 | 0, $0_1 | 0) | 0) + $0_1 | 0) >> 0] = 0;
    }
    global$0 = $13_1 + 224 | 0;
    return $21_1 | 0;
  }
  function $71() {
    return 10302 | 0;
  }
  function $72($0_1) {
    $0_1 = $0_1 | 0;
    if (!$0_1) {
      return 0 | 0;
    }
    $8($0_1 | 0);
    return 1 | 0;
  }
  function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$4 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0,
      var$2 = 0,
      i64toi32_i32$2 = 0,
      i64toi32_i32$3 = 0,
      var$3 = 0,
      var$4 = 0,
      var$5 = 0,
      $21_1 = 0,
      $22_1 = 0,
      var$6 = 0,
      $24_1 = 0,
      $17_1 = 0,
      $18_1 = 0,
      $23_1 = 0,
      $29_1 = 0,
      $45_1 = 0,
      $56$hi = 0,
      $62$hi = 0;
    i64toi32_i32$0 = var$1$hi;
    var$2 = var$1;
    var$4 = var$2 >>> 16 | 0;
    i64toi32_i32$0 = var$0$hi;
    var$3 = var$0;
    var$5 = var$3 >>> 16 | 0;
    $17_1 = Math_imul(var$4, var$5);
    $18_1 = var$2;
    i64toi32_i32$2 = var$3;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$0 = var$1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
    var$2 = var$2 & 65535 | 0;
    var$3 = var$3 & 65535 | 0;
    var$6 = Math_imul(var$2, var$3);
    var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
    $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
    var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $24_1 = 0;
    } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $56$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $62$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $56$hi;
    i64toi32_i32$2 = $24_1;
    i64toi32_i32$1 = $62$hi;
    i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$2 | 0;
  }
  function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$2 = 0,
      i64toi32_i32$3 = 0,
      i64toi32_i32$4 = 0,
      i64toi32_i32$1 = 0,
      i64toi32_i32$0 = 0,
      i64toi32_i32$5 = 0,
      var$2 = 0,
      var$3 = 0,
      var$4 = 0,
      var$5 = 0,
      var$5$hi = 0,
      var$6 = 0,
      var$6$hi = 0,
      i64toi32_i32$6 = 0,
      $37_1 = 0,
      $38_1 = 0,
      $39_1 = 0,
      $40_1 = 0,
      $41_1 = 0,
      $42_1 = 0,
      $43_1 = 0,
      $44_1 = 0,
      var$8$hi = 0,
      $45_1 = 0,
      $46_1 = 0,
      $47_1 = 0,
      $48_1 = 0,
      var$7$hi = 0,
      $49_1 = 0,
      $63$hi = 0,
      $65_1 = 0,
      $65$hi = 0,
      $120$hi = 0,
      $129$hi = 0,
      $134$hi = 0,
      var$8 = 0,
      $140 = 0,
      $140$hi = 0,
      $142$hi = 0,
      $144 = 0,
      $144$hi = 0,
      $151 = 0,
      $151$hi = 0,
      $154$hi = 0,
      var$7 = 0,
      $165$hi = 0;
    label$1: {
      label$2: {
        label$3: {
          label$4: {
            label$5: {
              label$6: {
                label$7: {
                  label$8: {
                    label$9: {
                      label$10: {
                        label$11: {
                          i64toi32_i32$0 = var$0$hi;
                          i64toi32_i32$2 = var$0;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$3 = 32;
                          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                            i64toi32_i32$1 = 0;
                            $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                          } else {
                            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                            $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                          }
                          var$2 = $37_1;
                          if (var$2) {
                            i64toi32_i32$1 = var$1$hi;
                            var$3 = var$1;
                            if (!var$3) {
                              break label$11;
                            }
                            i64toi32_i32$0 = var$3;
                            i64toi32_i32$2 = 0;
                            i64toi32_i32$3 = 32;
                            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                              i64toi32_i32$2 = 0;
                              $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                            } else {
                              i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                              $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                            }
                            var$4 = $38_1;
                            if (!var$4) {
                              break label$9;
                            }
                            var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
                            if (var$2 >>> 0 <= 31 >>> 0) {
                              break label$8;
                            }
                            break label$2;
                          }
                          i64toi32_i32$2 = var$1$hi;
                          i64toi32_i32$1 = var$1;
                          i64toi32_i32$0 = 1;
                          i64toi32_i32$3 = 0;
                          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                            break label$2;
                          }
                          i64toi32_i32$1 = var$0$hi;
                          var$2 = var$0;
                          i64toi32_i32$1 = i64toi32_i32$2;
                          i64toi32_i32$1 = i64toi32_i32$2;
                          var$3 = var$1;
                          var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
                          i64toi32_i32$1 = 0;
                          __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
                          __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                          i64toi32_i32$1 = 0;
                          i64toi32_i32$2 = var$2;
                          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                          return i64toi32_i32$2 | 0;
                        }
                        i64toi32_i32$2 = var$1$hi;
                        i64toi32_i32$3 = var$1;
                        i64toi32_i32$1 = 0;
                        i64toi32_i32$0 = 32;
                        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                          i64toi32_i32$1 = 0;
                          $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                        } else {
                          i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                          $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                        }
                        var$3 = $39_1;
                        i64toi32_i32$1 = var$0$hi;
                        if (!var$0) {
                          break label$7;
                        }
                        if (!var$3) {
                          break label$6;
                        }
                        var$4 = var$3 + -1 | 0;
                        if (var$4 & var$3 | 0) {
                          break label$6;
                        }
                        i64toi32_i32$1 = 0;
                        i64toi32_i32$2 = var$4 & var$2 | 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = 32;
                        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                          i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                          $40_1 = 0;
                        } else {
                          i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                          $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                        }
                        $63$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = var$0$hi;
                        i64toi32_i32$1 = var$0;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$0 = -1;
                        i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
                        $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                        $65$hi = i64toi32_i32$2;
                        i64toi32_i32$2 = $63$hi;
                        i64toi32_i32$3 = $40_1;
                        i64toi32_i32$1 = $65$hi;
                        i64toi32_i32$0 = $65_1;
                        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                        __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = 0;
                        i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
                        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                        return i64toi32_i32$3 | 0;
                      }
                    }
                    var$4 = var$3 + -1 | 0;
                    if (!(var$4 & var$3 | 0)) {
                      break label$5;
                    }
                    var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
                    var$3 = 0 - var$2 | 0;
                    break label$3;
                  }
                  var$3 = 63 - var$2 | 0;
                  var$2 = var$2 + 1 | 0;
                  break label$3;
                }
                var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 32;
                i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                  $41_1 = 0;
                } else {
                  i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                  $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                }
                __wasm_intrinsics_temp_i64 = $41_1;
                __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$2 = var$4;
                i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                return i64toi32_i32$2 | 0;
              }
              var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 < 31 >>> 0) {
                break label$4;
              }
              break label$2;
            }
            i64toi32_i32$2 = var$0$hi;
            i64toi32_i32$2 = 0;
            __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
            if ((var$3 | 0) == (1 | 0)) {
              break label$1;
            }
            i64toi32_i32$2 = var$0$hi;
            i64toi32_i32$2 = 0;
            $120$hi = i64toi32_i32$2;
            i64toi32_i32$2 = var$0$hi;
            i64toi32_i32$3 = var$0;
            i64toi32_i32$1 = $120$hi;
            i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            i64toi32_i32$3 = $42_1;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
          }
          var$3 = 63 - var$2 | 0;
          var$2 = var$2 + 1 | 0;
        }
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$3 = 0;
        $129$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$2 = var$0;
        i64toi32_i32$1 = $129$hi;
        i64toi32_i32$0 = var$2 & 63 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
          i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
          $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        var$5 = $43_1;
        var$5$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$1 = 0;
        $134$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$3 = var$0;
        i64toi32_i32$2 = $134$hi;
        i64toi32_i32$0 = var$3 & 63 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
          $44_1 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
          $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
        }
        var$0 = $44_1;
        var$0$hi = i64toi32_i32$2;
        label$13: {
          if (var$2) {
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$1 = var$1;
            i64toi32_i32$3 = -1;
            i64toi32_i32$0 = -1;
            i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            var$8 = i64toi32_i32$4;
            var$8$hi = i64toi32_i32$5;
            label$15: while (1) {
              i64toi32_i32$5 = var$5$hi;
              i64toi32_i32$2 = var$5;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 1;
              i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                $45_1 = 0;
              } else {
                i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
                $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
              }
              $140 = $45_1;
              $140$hi = i64toi32_i32$1;
              i64toi32_i32$1 = var$0$hi;
              i64toi32_i32$5 = var$0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = 63;
              i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
              }
              $142$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $140$hi;
              i64toi32_i32$1 = $140;
              i64toi32_i32$5 = $142$hi;
              i64toi32_i32$0 = $46_1;
              i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
              var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
              var$5$hi = i64toi32_i32$5;
              $144 = var$5;
              $144$hi = i64toi32_i32$5;
              i64toi32_i32$5 = var$8$hi;
              i64toi32_i32$5 = var$5$hi;
              i64toi32_i32$5 = var$8$hi;
              i64toi32_i32$2 = var$8;
              i64toi32_i32$1 = var$5$hi;
              i64toi32_i32$0 = var$5;
              i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
              i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
              i64toi32_i32$5 = i64toi32_i32$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = 63;
              i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
                $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
                $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
              }
              var$6 = $47_1;
              var$6$hi = i64toi32_i32$2;
              i64toi32_i32$2 = var$1$hi;
              i64toi32_i32$2 = var$6$hi;
              i64toi32_i32$4 = var$6;
              i64toi32_i32$5 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
              $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
              $151$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $144$hi;
              i64toi32_i32$2 = $144;
              i64toi32_i32$4 = $151$hi;
              i64toi32_i32$0 = $151;
              i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
              i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
              i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
              var$5 = i64toi32_i32$1;
              var$5$hi = i64toi32_i32$3;
              i64toi32_i32$3 = var$0$hi;
              i64toi32_i32$5 = var$0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = 1;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
                $48_1 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
              }
              $154$hi = i64toi32_i32$2;
              i64toi32_i32$2 = var$7$hi;
              i64toi32_i32$2 = $154$hi;
              i64toi32_i32$3 = $48_1;
              i64toi32_i32$5 = var$7$hi;
              i64toi32_i32$0 = var$7;
              i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
              var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              var$0$hi = i64toi32_i32$5;
              i64toi32_i32$5 = var$6$hi;
              i64toi32_i32$2 = var$6;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = 1;
              i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
              var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              var$6$hi = i64toi32_i32$3;
              var$7 = var$6;
              var$7$hi = i64toi32_i32$3;
              var$2 = var$2 + -1 | 0;
              if (var$2) {
                continue label$15;
              }
              break label$15;
            }
            break label$13;
          }
        }
        i64toi32_i32$3 = var$5$hi;
        __wasm_intrinsics_temp_i64 = var$5;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
          $49_1 = 0;
        } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
          $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $165$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$2 = $165$hi;
        i64toi32_i32$3 = $49_1;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$0 = var$6;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
        return i64toi32_i32$3 | 0;
      }
      i64toi32_i32$3 = var$0$hi;
      __wasm_intrinsics_temp_i64 = var$0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      var$0 = 0;
      var$0$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
    return i64toi32_i32$5 | 0;
  }
  function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
    var$0 = var$0 | 0;
    var$0$hi = var$0$hi | 0;
    var$1 = var$1 | 0;
    var$1$hi = var$1$hi | 0;
    var i64toi32_i32$0 = 0,
      i64toi32_i32$1 = 0;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$0 = var$1$hi;
    i64toi32_i32$0 = var$0$hi;
    i64toi32_i32$1 = var$1$hi;
    i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
    i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
  }
  function __wasm_rotl_i32(var$0, var$1) {
    var$0 = var$0 | 0;
    var$1 = var$1 | 0;
    var var$2 = 0;
    var$2 = var$1 & 31 | 0;
    var$1 = (0 - var$1 | 0) & 31 | 0;
    return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
  }
  function __wasm_ctz_i32(var$0) {
    var$0 = var$0 | 0;
    if (var$0) {
      return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0;
    }
    return 32 | 0;
  }
  bufferView = HEAPU8;
  initActiveSegments(imports);
  var FUNCTION_TABLE = Table([null, $53, $52, $66, $65]);
  function __wasm_memory_size() {
    return buffer.byteLength / 65536 | 0;
  }
  return {
    v: Object.create(Object.prototype, {
      grow: {},
      buffer: {
        get: function () {
          return buffer;
        }
      }
    }),
    w: $37,
    x: $72,
    y: $69,
    z: FUNCTION_TABLE,
    A: $64,
    B: $71,
    C: $70,
    D: $68,
    E: $67
  };
}

global.globalAppKey = "e8e328d27d9866dcf49ed2e0bb7411c4";
global.globalRegion = "us";

const randomOffset = -1 * (Math.floor(Math.random() * (650 - 550 + 1)) + 550);
const customTimeOffset = Date.now() + randomOffset;

o0o00 = {
  jsDownloadedTime: customTimeOffset,
  version: "vJFj2RQFFOn4BbY55sTT7fsHsEUIqR0yQEcEsA9DCLoD3PMfucNkSWA8q4jieSKO",
  channel: "",
  timestamp: (customTimeOffset + "") + "-18094664849"
};

function oQQ0o() {
  return OOQOQ(o0o00["version"]);
}
function oooQo() {
  return Date["now"]() - o0o00["jsDownloadedTime"];
}
function oQ0oO() {
  return Number(o0o00["timestamp"]["substring"](0, 13));
}
function oOoQQ() {
  return OOQOQ(o0o00["channel"]);
}

function oOQ0Q() {
  return o0oQO(OQQoo["b"]["a"] || OQQoo["b"]["i"]);
}
function Qoo0o() {
  return o0oQO(OQQoo["b"]["b"] || OQQoo["b"]["j"]);
}
function OQO0Q() {
  return o0oQO(OQQoo["b"]["c"] || OQQoo["b"]["k"]);
}
function ooOOQ() {
  return o0oQO(OQQoo["b"]["d"] || OQQoo["b"]["l"]);
}
function oQOo0() {
  return o0oQO(OQQoo["b"]["g"] || OQQoo["b"]["o"]);
}
function o0ooo() {
  return OOQOQ(OQQoo["b"]["e"]);
}
function QOooo() {
  return OOQOQ(OQQoo["b"]["f"]);
}
function QQooo() {
  return OOQOQ(OQQoo["q"]["appKey"] || "");
}
function Q0o0o() {
  var O0oQo = 67;
  while (O0oQo) {
    switch (O0oQo) {
      case 108 + 12 - 51:
        {
          var QOQo0 = new Float64Array(retasmFunc.v["buffer"], OQOO0, OQOOQ["length"]);
          O0oQo = 70;
          break;
        }
      case 97 + 16 - 45:
        {
          var OQOO0 = retasmFunc.y(8 * OQOOQ["length"]);
          O0oQo = 69;
          break;
        }
      case 95 + 17 - 42:
        {
          for (var QoQoQ = 0; QoQoQ < OQOOQ["length"]; ++QoQoQ) {
            QOQo0[QoQoQ] = OQOOQ[QoQoQ];
          }
          return OQOO0;
        }
      case 151 + 9 - 93:
        {
          var OQOOQ = []["concat"](OoQ0Q(new Array(35)))["map"](function () {
            return Math["random"]();
          });
          O0oQo = 68;
          break;
        }
    }
  }
}
function OQo00() {
  const value = Math["random"]();
  return value;
}
function oOooo() {
  var O0oQo = 56;
  while (O0oQo) {
    switch (O0oQo) {
      case 108 + 19 - 71:
        {
          var QOQo0 = []["concat"](OoQ0Q(new Array(16)))["map"](function () {
            return Math["random"]();
          });
          O0oQo = 57;
          break;
        }
      case 107 + 16 - 64:
        {
          for (var OQOO0 = 0; OQOO0 < QOQo0["length"]; ++OQOO0) {
            QoQoQ[OQOO0] = QOQo0[OQOO0];
          }
          return OQOOQ;
        }
      case 89 + 11 - 42:
        {
          var QoQoQ = new Float64Array(retasmFunc.v["buffer"], OQOOQ, QOQo0["length"]);
          O0oQo = 59;
          break;
        }
      case 101 + 10 - 54:
        {
          var OQOOQ = retasmFunc.y(8 * QOQo0["length"]);
          O0oQo = 58;
          break;
        }
    }
  }
}
function Oo0O0() {
  return OOQOQ(OQQoo["q"]["partner"] || "");
}
var OQoOO = {};
function OOQOQ(O0oQo) {
  var QOQo0 = new TextEncoder()["encode"](O0oQo);
  var OQOO0 = retasmFunc.y(QOQo0["length"] + 1);
  o0oO0["hp"]["set"](QOQo0, OQOO0), o0oO0["hp"][OQOO0 + QOQo0["length"]] = 0;
  return OQOO0;
}
var QoQoQ = {};
QoQoQ["k"] = function o0QOQ() {
  return Date["now"]();
}, QoQoQ["l"] = function OQOOo(O0oQo, QOQo0, OQOO0) {
  return new Uint8Array(retasmFunc.v["buffer"])["copyWithin"](O0oQo, QOQo0, QOQo0 + OQOO0);
}, QoQoQ["i"] = function ooo00() {}, QoQoQ["g"] = oOQ0Q, QoQoQ["f"] = Qoo0o, QoQoQ["e"] = OQO0Q, QoQoQ["o"] = oOoQQ, QoQoQ["h"] = oOooo, QoQoQ["t"] = function o0QQO() {
  var O0oQo = 51;
  while (O0oQo) {
    switch (O0oQo) {
      case 130 + 9 - 88:
        {
          var QOQo0 = undefined;
          O0oQo = 52;
          break;
        }
      case 114 + 6 - 66:
        {
          new Uint8Array(retasmFunc.v["buffer"], QoQoQ, OQOO0["length"])["set"](OQOO0);
          return QoQoQ;
        }
      case 101 + 17 - 66:
        {
          var OQOO0 = new TextEncoder()["encode"](QOQo0);
          O0oQo = 53;
          break;
        }
      case 105 + 19 - 71:
        {
          var QoQoQ = retasmFunc.y(OQOO0["length"] + 1);
          O0oQo = 54;
          break;
        }
    }
  }
}, QoQoQ["q"] = oooQo, QoQoQ["p"] = oQ0oO, QoQoQ["d"] = ooOOQ, QoQoQ["s"] = o0ooo, QoQoQ["b"] = QOooo, QoQoQ["n"] = Q0o0o, QoQoQ["c"] = oQOo0, QoQoQ["a"] = Oo0O0, QoQoQ["m"] = QQooo, QoQoQ["u"] = OQo00, QoQoQ["r"] = oQQ0o, QoQoQ["j"] = function OoQ0o(O0oQo, QOQo0) {
  var OQOO0 = new Uint8Array(retasmFunc.v["buffer"], O0oQo, QOQo0);
  clientIdKey = new TextDecoder()["decode"](OQOO0);
};
var retasmFunc = asmFunc({
  a: QoQoQ
});
module.exports = {
  v: retasmFunc.v,
  w: retasmFunc.w,
  x: retasmFunc.x,
  y: retasmFunc.y,
  A: retasmFunc.A,
  B: retasmFunc.B,
  C: retasmFunc.C,
  D: retasmFunc.D,
  E: retasmFunc.E
};
var o0oO0 = {};
o0oO0["hp"] = new Int8Array(retasmFunc.v["buffer"]);
function o0oQO(O0oQo) {
  var QOQo0 = 19;
  while (QOQo0) {
    switch (QOQo0) {
      case 68 + 10 - 58:
        {
          for (var OQOO0 = 0; OQOO0 < O0oQo["length"]; ++OQOO0) {
            oOo0o["push"](new TextEncoder()["encode"]("" + O0oQo[OQOO0])), oo0oo += oOo0o[OQOO0]["length"] + 1;
          }
          var QoQoQ = retasmFunc.y(oo0oo);
          QOQo0 = 21;
          break;
        }
      case 80 + 14 - 72:
        {
          var OQOOQ = QoQoQ + 8;
          for (var OoO0Q = 0; OoO0Q < oOo0o["length"]; ++OoO0Q) {
            o0oO0["hp"]["set"](oOo0o[OoO0Q], OQOOQ), o0oO0["hp"][OQOOQ + oOo0o[OoO0Q]["length"]] = 0, OQOOQ += oOo0o[OoO0Q]["length"] + 1;
          }
          return QoQoQ;
        }
      case 41 + 18 - 40:
        {
          var oOo0o = [];
          var oo0oo = 8;
          QOQo0 = 20;
          break;
        }
      case 93 + 19 - 91:
        {
          var O0QO0 = new Uint32Array(retasmFunc.v["buffer"], QoQoQ, 2);
          O0QO0[0] = O0oQo["length"], O0QO0[1] = oo0oo;
          QOQo0 = 22;
          break;
        }
    }
  }
}
var OoQ0Q = function (O0oQo) {
  if (Array["isArray"](O0oQo)) {
    for (var QOQo0 = 0, OQOO0 = Array(O0oQo["length"]); QOQo0 < O0oQo["length"]; QOQo0++) OQOO0[QOQo0] = O0oQo[QOQo0];
    return OQOO0;
  } else {
    return Array["from"](O0oQo);
  }
};
var OQQoo = {};
function ooQoO(O0oQo, QOQo0) {
  return O0oQo <= QOQo0;
}
function o00QO(O0oQo, QOQo0) {
  return O0oQo != QOQo0;
}
function O0O0o(O0oQo, QOQo0) {
  return O0oQo / QOQo0;
}
function OoQO0(O0oQo, QOQo0) {
  return O0oQo >> QOQo0;
}
function o000O(O0oQo, QOQo0) {
  return O0oQo ^ QOQo0;
}
function OoQQQ(O0oQo, QOQo0) {
  return O0oQo | QOQo0;
}
function OOOQQ(O0oQo, QOQo0) {
  return O0oQo & QOQo0;
}
function QOo00(O0oQo, QOQo0) {
  return O0oQo * QOQo0;
}
function O00OQ(O0oQo, QOQo0) {
  return O0oQo << QOQo0;
}
function QQQOo(O0oQo, QOQo0) {
  return O0oQo % QOQo0;
}
function oO0Qo(O0oQo, QOQo0) {
  return O0oQo - QOQo0;
}
function Qo0OO(O0oQo, QOQo0) {
  return O0oQo || QOQo0;
}
function O0Q0O(O0oQo, QOQo0) {
  return O0oQo >= QOQo0;
}
function OQO0O(O0oQo, QOQo0) {
  return O0oQo instanceof QOQo0;
}
function QO0O0(O0oQo, QOQo0) {
  return O0oQo > QOQo0;
}
function QOQ0Q(O0oQo, QOQo0) {
  return O0oQo + QOQo0;
}
function QOo0o(O0oQo, QOQo0) {
  return O0oQo >>> QOQo0;
}
function oOOoQ(O0oQo, QOQo0) {
  return O0oQo == QOQo0;
}
function OQ0O0(O0oQo, QOQo0) {
  return O0oQo < QOQo0;
}
function OooQO(O0oQo, QOQo0) {
  return O0oQo !== QOQo0;
}
function QQ0QQ(O0oQo, QOQo0) {
  return O0oQo === QOQo0;
}
function oo0oO(O0oQo, QOQo0) {
  return O0oQo && QOQo0;
}
OQQoo["bb"] = {}, OQQoo["pageInfo"] = {}, OQQoo["q"] = {}, OQQoo["b"] = {}, OQQoo["wb"] = "";
var Q00oQ = {};
Q00oQ["_x64Add"] = function QQoOo(O0oQo, QOQo0) {
  O0oQo = [QOo0o(O0oQo[0], 16), OOOQQ(O0oQo[0], 65535), QOo0o(O0oQo[1], 16), OOOQQ(O0oQo[1], 65535)], QOQo0 = [QOo0o(QOQo0[0], 16), OOOQQ(QOQo0[0], 65535), QOo0o(QOQo0[1], 16), OOOQQ(QOQo0[1], 65535)];
  var OQOO0 = [0, 0, 0, 0];
  OQOO0[3] += QOQ0Q(O0oQo[3], QOQo0[3]), OQOO0[2] += QOo0o(OQOO0[3], 16), OQOO0[3] &= 65535, OQOO0[2] += QOQ0Q(O0oQo[2], QOQo0[2]), OQOO0[1] += QOo0o(OQOO0[2], 16), OQOO0[2] &= 65535, OQOO0[1] += QOQ0Q(O0oQo[1], QOQo0[1]), OQOO0[0] += QOo0o(OQOO0[1], 16), OQOO0[1] &= 65535, OQOO0[0] += QOQ0Q(O0oQo[0], QOQo0[0]), OQOO0[0] &= 65535;
  return [OoQQQ(O00OQ(OQOO0[0], 16), OQOO0[1]), OoQQQ(O00OQ(OQOO0[2], 16), OQOO0[3])];
}, Q00oQ["_x64Multiply"] = function Qoooo(O0oQo, QOQo0) {
  O0oQo = [QOo0o(O0oQo[0], 16), OOOQQ(O0oQo[0], 65535), QOo0o(O0oQo[1], 16), OOOQQ(O0oQo[1], 65535)], QOQo0 = [QOo0o(QOQo0[0], 16), OOOQQ(QOQo0[0], 65535), QOo0o(QOQo0[1], 16), OOOQQ(QOQo0[1], 65535)];
  var OQOO0 = [0, 0, 0, 0];
  OQOO0[3] += QOo00(O0oQo[3], QOQo0[3]), OQOO0[2] += QOo0o(OQOO0[3], 16), OQOO0[3] &= 65535, OQOO0[2] += QOo00(O0oQo[2], QOQo0[3]), OQOO0[1] += QOo0o(OQOO0[2], 16), OQOO0[2] &= 65535, OQOO0[2] += QOo00(O0oQo[3], QOQo0[2]), OQOO0[1] += QOo0o(OQOO0[2], 16), OQOO0[2] &= 65535, OQOO0[1] += QOo00(O0oQo[1], QOQo0[3]), OQOO0[0] += QOo0o(OQOO0[1], 16), OQOO0[1] &= 65535, OQOO0[1] += QOo00(O0oQo[2], QOQo0[2]), OQOO0[0] += QOo0o(OQOO0[1], 16), OQOO0[1] &= 65535, OQOO0[1] += QOo00(O0oQo[3], QOQo0[1]), OQOO0[0] += QOo0o(OQOO0[1], 16), OQOO0[1] &= 65535, OQOO0[0] += QOQ0Q(QOQ0Q(QOQ0Q(QOo00(O0oQo[0], QOQo0[3]), QOo00(O0oQo[1], QOQo0[2])), QOo00(O0oQo[2], QOQo0[1])), QOo00(O0oQo[3], QOQo0[0])), OQOO0[0] &= 65535;
  return [OoQQQ(O00OQ(OQOO0[0], 16), OQOO0[1]), OoQQQ(O00OQ(OQOO0[2], 16), OQOO0[3])];
}, Q00oQ["_x64Rotl"] = function ooQoo(O0oQo, QOQo0) {
  var OQOO0 = 92;
  while (OQOO0) {
    switch (OQOO0) {
      case 183 + 11 - 100:
        {
          if (OQ0O0(QOQo0, 32)) {
            return [OoQQQ(O00OQ(O0oQo[0], QOQo0), QOo0o(O0oQo[1], oO0Qo(32, QOQo0))), OoQQQ(O00OQ(O0oQo[1], QOQo0), QOo0o(O0oQo[0], oO0Qo(32, QOQo0)))];
          }
          OQOO0 = 95;
          break;
        }
      case 179 + 9 - 95:
        {
          if (QQ0QQ(QOQo0, 32)) {
            return [O0oQo[1], O0oQo[0]];
          }
          OQOO0 = 94;
          break;
        }
      case 173 + 9 - 87:
        {
          QOQo0 -= 32;
          return [OoQQQ(O00OQ(O0oQo[1], QOQo0), QOo0o(O0oQo[0], oO0Qo(32, QOQo0))), OoQQQ(O00OQ(O0oQo[0], QOQo0), QOo0o(O0oQo[1], oO0Qo(32, QOQo0)))];
        }
      case 167 + 11 - 86:
        {
          QOQo0 %= 64;
          OQOO0 = 93;
          break;
        }
    }
  }
}, Q00oQ["_x64LeftShift"] = function Q0Q00(O0oQo, QOQo0) {
  QOQo0 %= 64;
  if (QQ0QQ(QOQo0, 0)) {
    return O0oQo;
  }
  if (OQ0O0(QOQo0, 32)) {
    return [OoQQQ(O00OQ(O0oQo[0], QOQo0), QOo0o(O0oQo[1], oO0Qo(32, QOQo0))), O00OQ(O0oQo[1], QOQo0)];
  }
  return [O00OQ(O0oQo[1], oO0Qo(QOQo0, 32)), 0];
}, Q00oQ["_x64Xor"] = function OoOO0(O0oQo, QOQo0) {
  return [o000O(O0oQo[0], QOQo0[0]), o000O(O0oQo[1], QOQo0[1])];
}, Q00oQ["_x64Fmix"] = function oQoOo(O0oQo) {
  O0oQo = this["_x64Xor"](O0oQo, [0, QOo0o(O0oQo[0], 1)]), O0oQo = this["_x64Multiply"](O0oQo, [4283543511, 3981806797]), O0oQo = this["_x64Xor"](O0oQo, [0, QOo0o(O0oQo[0], 1)]), O0oQo = this["_x64Multiply"](O0oQo, [3301882366, 444984403]), O0oQo = this["_x64Xor"](O0oQo, [0, QOo0o(O0oQo[0], 1)]);
  return O0oQo;
}, Q00oQ["hash128"] = function OooQQ(O0oQo, QOQo0) {
  var OQOO0 = 40;
  while (OQOO0) {
    switch (OQOO0) {
      case 74 + 10 - 44:
        {
          O0oQo = O0oQo || "", QOQo0 = QOQo0 || 0;
          var QoQoQ = QQQOo(O0oQo["length"], 16);
          var OQOOQ = oO0Qo(O0oQo["length"], QoQoQ);
          OQOO0 = 41;
          break;
        }
      case 114 + 7 - 79:
        {
          var OoO0Q = [0, 0];
          var oOo0o = [2277735313, 289559509];
          var oo0oo = [1291169091, 658871167];
          OQOO0 = 43;
          break;
        }
      case 98 + 5 - 60:
        {
          var O0QO0 = 0;
          for (; OQ0O0(O0QO0, OQOOQ); O0QO0 += 16) {
            Qo0OO = [OoQQQ(OoQQQ(OoQQQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 4)), 255), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 5)), 255), 8)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 6)), 255), 16)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 7)), 255), 24)), OoQQQ(OoQQQ(OoQQQ(OOOQQ(O0oQo["charCodeAt"](O0QO0), 255), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 1)), 255), 8)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 2)), 255), 16)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 3)), 255), 24))], OoO0Q = [OoQQQ(OoQQQ(OoQQQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 12)), 255), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 13)), 255), 8)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 14)), 255), 16)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 15)), 255), 24)), OoQQQ(OoQQQ(OoQQQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 8)), 255), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 9)), 255), 8)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 10)), 255), 16)), O00OQ(OOOQQ(O0oQo["charCodeAt"](QOQ0Q(O0QO0, 11)), 255), 24))], Qo0OO = this["_x64Multiply"](Qo0OO, oOo0o), Qo0OO = this["_x64Rotl"](Qo0OO, 31), Qo0OO = this["_x64Multiply"](Qo0OO, oo0oo), o0Q0o = this["_x64Xor"](o0Q0o, Qo0OO), o0Q0o = this["_x64Rotl"](o0Q0o, 27), o0Q0o = this["_x64Add"](o0Q0o, oQ00Q), o0Q0o = this["_x64Add"](this["_x64Multiply"](o0Q0o, [0, 5]), [0, 1390208809]), OoO0Q = this["_x64Multiply"](OoO0Q, oo0oo), OoO0Q = this["_x64Rotl"](OoO0Q, 33), OoO0Q = this["_x64Multiply"](OoO0Q, oOo0o), oQ00Q = this["_x64Xor"](oQ00Q, OoO0Q), oQ00Q = this["_x64Rotl"](oQ00Q, 31), oQ00Q = this["_x64Add"](oQ00Q, o0Q0o), oQ00Q = this["_x64Add"](this["_x64Multiply"](oQ00Q, [0, 5]), [0, 944331445]);
          }
          Qo0OO = [0, 0], OoO0Q = [0, 0];
          switch (QoQoQ) {
            case 60 + 15 - 60:
              OoO0Q = this["_x64Xor"](OoO0Q, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 14))], 48));
            case 51 + 8 - 45:
              OoO0Q = this["_x64Xor"](OoO0Q, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 13))], 40));
            case 85 + 20 - 92:
              OoO0Q = this["_x64Xor"](OoO0Q, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 12))], 32));
            case 104 + 6 - 98:
              OoO0Q = this["_x64Xor"](OoO0Q, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 11))], 24));
            case 52 + 7 - 48:
              OoO0Q = this["_x64Xor"](OoO0Q, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 10))], 16));
            case 36 + 18 - 44:
              OoO0Q = this["_x64Xor"](OoO0Q, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 9))], 8));
            case 89 + 16 - 96:
              OoO0Q = this["_x64Xor"](OoO0Q, [0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 8))]);
              OoO0Q = this["_x64Multiply"](OoO0Q, oo0oo);
              OoO0Q = this["_x64Rotl"](OoO0Q, 33);
              OoO0Q = this["_x64Multiply"](OoO0Q, oOo0o);
              oQ00Q = this["_x64Xor"](oQ00Q, OoO0Q);
            case 65 + 17 - 74:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 7))], 56));
            case 54 + 13 - 60:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 6))], 48));
            case 41 + 18 - 53:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 5))], 40));
            case 85 + 18 - 98:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 4))], 32));
            case 72 + 16 - 84:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 3))], 24));
            case 28 + 15 - 40:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 2))], 16));
            case 66 + 19 - 83:
              Qo0OO = this["_x64Xor"](Qo0OO, this["_x64LeftShift"]([0, O0oQo["charCodeAt"](QOQ0Q(O0QO0, 1))], 8));
            case 28 + 20 - 47:
              Qo0OO = this["_x64Xor"](Qo0OO, [0, O0oQo["charCodeAt"](O0QO0)]);
              Qo0OO = this["_x64Multiply"](Qo0OO, oOo0o);
              Qo0OO = this["_x64Rotl"](Qo0OO, 31);
              Qo0OO = this["_x64Multiply"](Qo0OO, oo0oo);
              o0Q0o = this["_x64Xor"](o0Q0o, Qo0OO);
          }
          o0Q0o = this["_x64Xor"](o0Q0o, [0, O0oQo["length"]]), oQ00Q = this["_x64Xor"](oQ00Q, [0, O0oQo["length"]]), o0Q0o = this["_x64Add"](o0Q0o, oQ00Q), oQ00Q = this["_x64Add"](oQ00Q, o0Q0o), o0Q0o = this["_x64Fmix"](o0Q0o), oQ00Q = this["_x64Fmix"](oQ00Q), o0Q0o = this["_x64Add"](o0Q0o, oQ00Q), oQ00Q = this["_x64Add"](oQ00Q, o0Q0o);
          return QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q("00000000", QOo0o(o0Q0o[0], 0)["toString"](16))["slice"](-8), QOQ0Q("00000000", QOo0o(o0Q0o[1], 0)["toString"](16))["slice"](-8)), QOQ0Q("00000000", QOo0o(oQ00Q[0], 0)["toString"](16))["slice"](-8)), QOQ0Q("00000000", QOo0o(oQ00Q[1], 0)["toString"](16))["slice"](-8));
        }
      case 72 + 19 - 50:
        {
          var o0Q0o = [0, QOQo0];
          var oQ00Q = [0, QOQo0];
          var Qo0OO = [0, 0];
          OQOO0 = 42;
          break;
        }
    }
  }
};
function ooQ0Q() {
  var O0oQo = 29;
  while (O0oQo) {
    switch (O0oQo) {
      case 59 + 11 - 40:
        {
          var QOQo0 = "";
          O0oQo = 31;
          break;
        }
      case 92 + 18 - 81:
        {
          var OQOO0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
          O0oQo = 30;
          break;
        }
      case 66 + 17 - 52:
        {
          for (var QoQoQ = 0, OQOOQ = OQOO0["length"]; OQ0O0(QoQoQ, 127); QoQoQ++) {
            QOQo0 += OQOO0["charAt"](Math["floor"](QOo00(Math["random"](), OQOOQ)));
          }
          O0oQo = 32;
          break;
        }
      case 98 + 20 - 86:
        {
          var OoO0Q = QOQo0["split"]("");
          OoO0Q["splice"](Math["floor"](QOo00(Math["random"](), oO0Qo(OQOO0["length"], 1))), 0, "\\");
          return OoO0Q["join"]("");
        }
    }
  }
}
var oOOo0 = [];
function Q0oO0(O0oQo) {
  var QOQo0 = 45;
  while (QOQo0) {
    switch (QOQo0) {
      case 117 + 10 - 79:
        {
          var OQOO0 = 77;
          while (OQOO0) {
            switch (OQOO0) {
              case 159 + 5 - 87:
                {
                  OQOO0 = OQ0O0(oo0oo, 1e3) ? 78 : 0;
                  break;
                }
              case 169 + 5 - 96:
                {
                  oOo0o = [OoO0Q[parseInt(QOo00(Math["random"](), 62))], OoO0Q[parseInt(QOo00(Math["random"](), 62))], OoO0Q[parseInt(QOo00(Math["random"](), 62))]];
                  if (QO0O0(oOOo0["length"], 1e3) || QQ0QQ(oOOo0["indexOf"](QOQ0Q(QOQ0Q(QOQ0Q("", oOo0o[0]), oOo0o[1]), oOo0o[2])), -1)) {
                    oo0oo = 1e3, oOOo0["push"](QOQ0Q(QOQ0Q(QOQ0Q("", oOo0o[0]), oOo0o[1]), oOo0o[2])), QoQoQ = QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q("", OQOOQ[0]), OQOOQ[1]), oOo0o[0]), OQOOQ[2]), oOo0o[1]), OQOOQ[3]), oOo0o[2]), OQOOQ[4]);
                  }
                  OQOO0 = 79;
                  break;
                }
              case 151 + 14 - 86:
                {
                  oo0oo++;
                  OQOO0 = 77;
                  break;
                }
            }
          }
          if (OooQO(QoQoQ["length"], 26)) {
            QoQoQ = QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q(QOQ0Q("", OQOOQ[0]), OQOOQ[1]), oOo0o[0]), OQOOQ[2]), oOo0o[1]), OQOOQ[3]), oOo0o[2]), OQOOQ[4]);
          }
          return QoQoQ;
        }
      case 116 + 10 - 81:
        {
          if (OooQO(O0oQo["length"], 23)) {
            return O0oQo;
          }
          var QoQoQ = "";
          QOQo0 = 46;
          break;
        }
      case 113 + 20 - 87:
        {
          var OQOOQ = ["ghijklmnopqrstuv"["charAt"]("0123456789abcdef"["indexOf"](O0oQo["substring"](0, 1))), O0oQo["substring"](1, 4), O0oQo["substring"](4, 14), O0oQo["substring"](14, 22), O0oQo["substring"](22, 23)];
          var OoO0Q = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
          QOQo0 = 47;
          break;
        }
      case 94 + 14 - 61:
        {
          var oOo0o = [];
          var oo0oo = 0;
          QOQo0 = 48;
          break;
        }
    }
  }
}
function OoQOo(O0oQo, QOQo0) {
  try {
    if (!o0oO0) {
      return "";
    }
    var OQOO0 = "";
    var QoQoQ = retasmFunc.v;
    var OQOOQ = retasmFunc.x;
    var OoO0Q = retasmFunc.C;
    var oOo0o = retasmFunc.y;
    var oo0oo = new TextEncoder()["encode"](O0oQo);
    var O0QO0 = oOo0o(QOQ0Q(oo0oo["length"], 1));
    new Uint8Array(QoQoQ["buffer"], O0QO0, oo0oo["length"])["set"](oo0oo);
    var o0Q0o = new TextEncoder()["encode"](QOQo0);
    var oQ00Q = oOo0o(QOQ0Q(o0Q0o["length"], 1));
    new Uint8Array(QoQoQ["buffer"], oQ00Q, o0Q0o["length"])["set"](o0Q0o);
    var Qo0OO = oOo0o(QOQ0Q(170, 1));
    var OoQ0O = OoO0Q(O0QO0, oQ00Q, Qo0OO);
    var OoQQo = "";
    if (QQ0QQ(OoQ0O, 0)) {
      var QoQo0 = new Uint8Array(QoQoQ["buffer"], Qo0OO, 170);
      OoQQo = new TextDecoder()["decode"](QoQo0), OQOO0 = "success";
    }
    if (QQ0QQ(OoQ0O, 2e3)) {
      OQOO0 = "failed, path is empty";
    }
    if (QQ0QQ(OoQ0O, 2001)) {
      OQOO0 = "query and body is empty";
    }
    OQOOQ(O0QO0), OQOOQ(oQ00Q), OQOOQ(Qo0OO);
    var oooOQ = {};
    oooOQ["code"] = OoQ0O, oooOQ["sign"] = OoQQo, oooOQ["message"] = OQOO0;
    return oooOQ;
  } catch (OOQ0O) {
    return "";
  }
}
function OOQ00() {
  var O0oQo = 26;
  while (O0oQo) {
    switch (O0oQo) {
      case 86 + 20 - 79:
        {
          OQQoo["wb"] = "";
          O0oQo = 28;
          break;
        }
      case 85 + 13 - 72:
        {
          var QOQo0 = "";
          O0oQo = 27;
          break;
        }
      case 80 + 8 - 59:
        {
          try {
            var OQOO0 = retasmFunc.D();
            var QoQoQ = new Uint32Array(retasmFunc.v["buffer"], OQOO0, 2);
            if (QoQoQ[0] == 0) {
              var OQOOQ = new Uint8Array(retasmFunc.v["buffer"], OQOO0 + 8, QoQoQ[1]);
              if (OQOOQ) {
                QOQo0 = QOQQQ(OQOOQ), OQQoo["wb"] = QOQo0;
              }
            }
            retasmFunc.x(OQOO0);
          } catch (OOQ0O) {}
          return QOQo0;
        }
      case 81 + 11 - 64:
        {
          function QOQQQ(O0oQo) {
            var QOQo0 = "";
            for (var OQOO0 = 0; OQOO0 < O0oQo["length"]; OQOO0++) {
              QOQo0 += String["fromCharCode"](O0oQo[OQOO0]);
            }
            try {
              if (btoa) {
                return btoa(QOQo0)["replace"](/\//g, "_")["replace"](/\+/g, "-");
              }
            } catch (OOQ0O) {}
            return "";
          }
          O0oQo = 29;
          break;
        }
    }
  }
}

const crypto = require("crypto");

W = (e, t, n) => {
  let o = function e(t) {
      return "object" == typeof t && t ? Array.isArray(t) ? t.map(e) : Object.keys(t).sort().reduce((n, o) => ({
        ...n,
        [o]: e(t[o])
      }), {}) : t;
    }(e),
    r = Object.keys(o).sort(),
    a = {};
  for (let e of r) "get" === n ? void 0 !== o[e] && "" !== o[e] && null !== o[e] && (a[e] = String(o[e])) : a[e] = o[e];
  let i = "".concat(JSON.stringify(a)).concat("W_ak^moHpMla").concat(t);
  return crypto.createHash("md5").update(i).digest("hex");
};

function updateFingerprint(fp) {

  fp["b"]["o"][13] = clientIdKey;

  fp["b"]["e"] = ooQ0Q();

  fp["b"]["k"][10] = new Date()["getTime"]() + "";

  customTime = (new Date()["getTime"]() - 98)["toString"](32);

  fp["b"]["i"][fp["b"]["i"].length - 1] = customTime;
  fp["b"]["j"][fp["b"]["j"].length - 1] = customTime;
  fp["b"]["k"][fp["b"]["k"].length - 1] = customTime;
  fp["b"]["l"][fp["b"]["l"].length - 1] = customTime;
  fp["b"]["o"][fp["b"]["o"].length - 1] = customTime;

  return fp
}

async function asyncData(fp, appKey, fpRegion) {
  global.globalAppKey = appKey
  global.globalRegion = fpRegion

  retasmFunc.A();

  fp = updateFingerprint(fp)
  
  OQQoo = fp;

  OQOO0 = new TextEncoder()["encode"](clientIdKey);
  QoQoQ = retasmFunc.y(OQOO0["length"] + 1);
  new Uint8Array(retasmFunc.v["buffer"], QoQoQ, OQOO0["length"])["set"](OQOO0);

  return OOQ00();
}

function Q0oOO(O0oQo, QOQo0) {
  var OQOO0 = "";
  if (o0oO0) {
    var QoQoQ = retasmFunc.v;
    var OQOOQ = retasmFunc.E;
    var OoO0Q = retasmFunc.x;
    var oOo0o = OOQOQ(O0oQo);
    var oo0oo = OOQOQ(QOQo0);
    var O0QO0 = OQOOQ(oOo0o, oo0oo);
    OoO0Q(oOo0o), OoO0Q(oo0oo);
    var o0Q0o = new Uint32Array(QoQoQ["buffer"], O0QO0, 2);
    var oQ00Q = o0Q0o[0];
    if (oQ00Q === 0) {
      var Qo0OO = o0Q0o[1];
      var OoQ0O = new Uint8Array(QoQoQ["buffer"], O0QO0 + 8, Qo0OO);
      OQOO0 = JSON["parse"](new TextDecoder()["decode"](OoQ0O));
    }
  }
  return OQOO0;
}

async function asyncDecData(result, appKey, fpRegion) {
  global.globalAppKey = appKey
  global.globalRegion = fpRegion

  decdata = Q0oOO(result["requestId"], result["result"]);
  return decdata;
}

async function asyncSign(token, path, body, fp, appKey, fpRegion) {
  global.globalAppKey = appKey
  global.globalRegion = fpRegion

  retasmFunc.A();

  fp = updateFingerprint(fp)

  OQQoo = fp;

  OQOO0 = new TextEncoder()["encode"](clientIdKey);
  QoQoQ = retasmFunc.y(OQOO0["length"] + 1);
  new Uint8Array(retasmFunc.v["buffer"], QoQoQ, OQOO0["length"])["set"](OQOO0);

  const sign = OoQOo(path, body);

  return {
    "td-session-sign": sign["sign"],
    "td-session-key": Q0oO0(token)
  }
}

module.exports = {
  asyncSign: asyncSign,
  asyncData: asyncData,
  asyncDecData: asyncDecData
};
